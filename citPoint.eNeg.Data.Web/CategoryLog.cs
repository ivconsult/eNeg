//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace citPOINT.eNeg.Data.Web
{
    public partial class CategoryLog
    {
        #region Primitive Properties
    
        public virtual int CategoryLogID
        {
            get;
            set;
        }
    
        public virtual int CategoryID
        {
            get { return _categoryID; }
            set
            {
                if (_categoryID != value)
                {
                    if (Category != null && Category.CategoryID != value)
                    {
                        Category = null;
                    }
                    _categoryID = value;
                }
            }
        }
        private int _categoryID;
    
        public virtual int LogID
        {
            get { return _logID; }
            set
            {
                if (_logID != value)
                {
                    if (Log != null && Log.LogID != value)
                    {
                        Log = null;
                    }
                    _logID = value;
                }
            }
        }
        private int _logID;

        #endregion
        #region Navigation Properties
    
        public virtual Category Category
        {
            get { return _category; }
            set
            {
                if (!ReferenceEquals(_category, value))
                {
                    var previousValue = _category;
                    _category = value;
                    FixupCategory(previousValue);
                }
            }
        }
        private Category _category;
    
        public virtual Log Log
        {
            get { return _log; }
            set
            {
                if (!ReferenceEquals(_log, value))
                {
                    var previousValue = _log;
                    _log = value;
                    FixupLog(previousValue);
                }
            }
        }
        private Log _log;

        #endregion
        #region Association Fixup
    
        private void FixupCategory(Category previousValue)
        {
            if (previousValue != null && previousValue.CategoryLogs.Contains(this))
            {
                previousValue.CategoryLogs.Remove(this);
            }
    
            if (Category != null)
            {
                if (!Category.CategoryLogs.Contains(this))
                {
                    Category.CategoryLogs.Add(this);
                }
                if (CategoryID != Category.CategoryID)
                {
                    CategoryID = Category.CategoryID;
                }
            }
        }
    
        private void FixupLog(Log previousValue)
        {
            if (previousValue != null && previousValue.CategoryLogs.Contains(this))
            {
                previousValue.CategoryLogs.Remove(this);
            }
    
            if (Log != null)
            {
                if (!Log.CategoryLogs.Contains(this))
                {
                    Log.CategoryLogs.Add(this);
                }
                if (LogID != Log.LogID)
                {
                    LogID = Log.LogID;
                }
            }
        }

        #endregion
    }
}
