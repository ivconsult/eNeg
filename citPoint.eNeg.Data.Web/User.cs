//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace citPOINT.eNeg.Data.Web
{
    public partial class User
    {
        #region Primitive Properties
    
        public virtual System.Guid UserID
        {
            get;
            set;
        }
    
        public virtual string EmailAddress
        {
            get;
            set;
        }
    
        public virtual string PasswordHash
        {
            get;
            set;
        }
    
        public virtual string PasswordSalt
        {
            get;
            set;
        }
    
        public virtual bool Locked
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LockedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LastLoginDate
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreateDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> AccountTypeID
        {
            get { return _accountTypeID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_accountTypeID != value)
                    {
                        if (AccountType != null && AccountType.AccountTypeID != value)
                        {
                            AccountType = null;
                        }
                        _accountTypeID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _accountTypeID;
    
        public virtual string IPAddress
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> SecurityQuestionID
        {
            get { return _securityQuestionID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_securityQuestionID != value)
                    {
                        if (SecurityQuestion != null && SecurityQuestion.SecurityQuestionID != value)
                        {
                            SecurityQuestion = null;
                        }
                        _securityQuestionID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _securityQuestionID;
    
        public virtual string AnswerHash
        {
            get;
            set;
        }
    
        public virtual string AnswerSalt
        {
            get;
            set;
        }
    
        public virtual bool Online
        {
            get;
            set;
        }
    
        public virtual bool Disabled
        {
            get;
            set;
        }
    
        public virtual string FirstName
        {
            get;
            set;
        }
    
        public virtual string LastName
        {
            get;
            set;
        }
    
        public virtual string CompanyName
        {
            get;
            set;
        }
    
        public virtual Nullable<int> LCID
        {
            get { return _lCID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_lCID != value)
                    {
                        if (PreferedLanguage != null && PreferedLanguage.LCID != value)
                        {
                            PreferedLanguage = null;
                        }
                        _lCID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _lCID;
    
        public virtual string Address
        {
            get;
            set;
        }
    
        public virtual string City
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> CountryID
        {
            get { return _countryID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_countryID != value)
                    {
                        if (Country != null && Country.CountryID != value)
                        {
                            Country = null;
                        }
                        _countryID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _countryID;
    
        public virtual string Phone
        {
            get;
            set;
        }
    
        public virtual string Mobile
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> Gender
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> Reset
        {
            get;
            set;
        }
    
        public virtual Nullable<int> CultureID
        {
            get { return _cultureID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_cultureID != value)
                    {
                        if (Culture != null && Culture.CultureID != value)
                        {
                            Culture = null;
                        }
                        _cultureID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _cultureID;
    
        public virtual Nullable<bool> HasPublicProfile
        {
            get;
            set;
        }
    
        public virtual string ProfileDescription
        {
            get;
            set;
        }
    
        public virtual string PostalCode
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Country Country
        {
            get { return _country; }
            set
            {
                if (!ReferenceEquals(_country, value))
                {
                    var previousValue = _country;
                    _country = value;
                    FixupCountry(previousValue);
                }
            }
        }
        private Country _country;
    
        public virtual PreferedLanguage PreferedLanguage
        {
            get { return _preferedLanguage; }
            set
            {
                if (!ReferenceEquals(_preferedLanguage, value))
                {
                    var previousValue = _preferedLanguage;
                    _preferedLanguage = value;
                    FixupPreferedLanguage(previousValue);
                }
            }
        }
        private PreferedLanguage _preferedLanguage;
    
        public virtual ICollection<Profile> Profile
        {
            get
            {
                if (_profile == null)
                {
                    var newCollection = new FixupCollection<Profile>();
                    newCollection.CollectionChanged += FixupProfile;
                    _profile = newCollection;
                }
                return _profile;
            }
            set
            {
                if (!ReferenceEquals(_profile, value))
                {
                    var previousValue = _profile as FixupCollection<Profile>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProfile;
                    }
                    _profile = value;
                    var newValue = value as FixupCollection<Profile>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProfile;
                    }
                }
            }
        }
        private ICollection<Profile> _profile;
    
        public virtual SecurityQuestion SecurityQuestion
        {
            get { return _securityQuestion; }
            set
            {
                if (!ReferenceEquals(_securityQuestion, value))
                {
                    var previousValue = _securityQuestion;
                    _securityQuestion = value;
                    FixupSecurityQuestion(previousValue);
                }
            }
        }
        private SecurityQuestion _securityQuestion;
    
        public virtual ICollection<UserRole> UserRole
        {
            get
            {
                if (_userRole == null)
                {
                    var newCollection = new FixupCollection<UserRole>();
                    newCollection.CollectionChanged += FixupUserRole;
                    _userRole = newCollection;
                }
                return _userRole;
            }
            set
            {
                if (!ReferenceEquals(_userRole, value))
                {
                    var previousValue = _userRole as FixupCollection<UserRole>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserRole;
                    }
                    _userRole = value;
                    var newValue = value as FixupCollection<UserRole>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserRole;
                    }
                }
            }
        }
        private ICollection<UserRole> _userRole;
    
        public virtual AccountType AccountType
        {
            get { return _accountType; }
            set
            {
                if (!ReferenceEquals(_accountType, value))
                {
                    var previousValue = _accountType;
                    _accountType = value;
                    FixupAccountType(previousValue);
                }
            }
        }
        private AccountType _accountType;
    
        public virtual ICollection<Conversation> Conversations
        {
            get
            {
                if (_conversations == null)
                {
                    var newCollection = new FixupCollection<Conversation>();
                    newCollection.CollectionChanged += FixupConversations;
                    _conversations = newCollection;
                }
                return _conversations;
            }
            set
            {
                if (!ReferenceEquals(_conversations, value))
                {
                    var previousValue = _conversations as FixupCollection<Conversation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupConversations;
                    }
                    _conversations = value;
                    var newValue = value as FixupCollection<Conversation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupConversations;
                    }
                }
            }
        }
        private ICollection<Conversation> _conversations;
    
        public virtual ICollection<NegotiationApplicationStatu> NegotiationApplicationStatus
        {
            get
            {
                if (_negotiationApplicationStatus == null)
                {
                    var newCollection = new FixupCollection<NegotiationApplicationStatu>();
                    newCollection.CollectionChanged += FixupNegotiationApplicationStatus;
                    _negotiationApplicationStatus = newCollection;
                }
                return _negotiationApplicationStatus;
            }
            set
            {
                if (!ReferenceEquals(_negotiationApplicationStatus, value))
                {
                    var previousValue = _negotiationApplicationStatus as FixupCollection<NegotiationApplicationStatu>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupNegotiationApplicationStatus;
                    }
                    _negotiationApplicationStatus = value;
                    var newValue = value as FixupCollection<NegotiationApplicationStatu>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupNegotiationApplicationStatus;
                    }
                }
            }
        }
        private ICollection<NegotiationApplicationStatu> _negotiationApplicationStatus;
    
        public virtual ICollection<History> Histories
        {
            get
            {
                if (_histories == null)
                {
                    var newCollection = new FixupCollection<History>();
                    newCollection.CollectionChanged += FixupHistories;
                    _histories = newCollection;
                }
                return _histories;
            }
            set
            {
                if (!ReferenceEquals(_histories, value))
                {
                    var previousValue = _histories as FixupCollection<History>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupHistories;
                    }
                    _histories = value;
                    var newValue = value as FixupCollection<History>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupHistories;
                    }
                }
            }
        }
        private ICollection<History> _histories;
    
        public virtual ICollection<Message> Messages
        {
            get
            {
                if (_messages == null)
                {
                    var newCollection = new FixupCollection<Message>();
                    newCollection.CollectionChanged += FixupMessages;
                    _messages = newCollection;
                }
                return _messages;
            }
            set
            {
                if (!ReferenceEquals(_messages, value))
                {
                    var previousValue = _messages as FixupCollection<Message>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMessages;
                    }
                    _messages = value;
                    var newValue = value as FixupCollection<Message>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMessages;
                    }
                }
            }
        }
        private ICollection<Message> _messages;
    
        public virtual ICollection<UserApplicationStatu> UserApplicationStatus
        {
            get
            {
                if (_userApplicationStatus == null)
                {
                    var newCollection = new FixupCollection<UserApplicationStatu>();
                    newCollection.CollectionChanged += FixupUserApplicationStatus;
                    _userApplicationStatus = newCollection;
                }
                return _userApplicationStatus;
            }
            set
            {
                if (!ReferenceEquals(_userApplicationStatus, value))
                {
                    var previousValue = _userApplicationStatus as FixupCollection<UserApplicationStatu>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserApplicationStatus;
                    }
                    _userApplicationStatus = value;
                    var newValue = value as FixupCollection<UserApplicationStatu>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserApplicationStatus;
                    }
                }
            }
        }
        private ICollection<UserApplicationStatu> _userApplicationStatus;
    
        public virtual Culture Culture
        {
            get { return _culture; }
            set
            {
                if (!ReferenceEquals(_culture, value))
                {
                    var previousValue = _culture;
                    _culture = value;
                    FixupCulture(previousValue);
                }
            }
        }
        private Culture _culture;
    
        public virtual ICollection<UserOrganization> UserOrganizations
        {
            get
            {
                if (_userOrganizations == null)
                {
                    var newCollection = new FixupCollection<UserOrganization>();
                    newCollection.CollectionChanged += FixupUserOrganizations;
                    _userOrganizations = newCollection;
                }
                return _userOrganizations;
            }
            set
            {
                if (!ReferenceEquals(_userOrganizations, value))
                {
                    var previousValue = _userOrganizations as FixupCollection<UserOrganization>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserOrganizations;
                    }
                    _userOrganizations = value;
                    var newValue = value as FixupCollection<UserOrganization>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserOrganizations;
                    }
                }
            }
        }
        private ICollection<UserOrganization> _userOrganizations;
    
        public virtual ICollection<UserOperation> UserOperations
        {
            get
            {
                if (_userOperations == null)
                {
                    var newCollection = new FixupCollection<UserOperation>();
                    newCollection.CollectionChanged += FixupUserOperations;
                    _userOperations = newCollection;
                }
                return _userOperations;
            }
            set
            {
                if (!ReferenceEquals(_userOperations, value))
                {
                    var previousValue = _userOperations as FixupCollection<UserOperation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserOperations;
                    }
                    _userOperations = value;
                    var newValue = value as FixupCollection<UserOperation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserOperations;
                    }
                }
            }
        }
        private ICollection<UserOperation> _userOperations;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCountry(Country previousValue)
        {
            if (previousValue != null && previousValue.User.Contains(this))
            {
                previousValue.User.Remove(this);
            }
    
            if (Country != null)
            {
                if (!Country.User.Contains(this))
                {
                    Country.User.Add(this);
                }
                if (CountryID != Country.CountryID)
                {
                    CountryID = Country.CountryID;
                }
            }
            else if (!_settingFK)
            {
                CountryID = null;
            }
        }
    
        private void FixupPreferedLanguage(PreferedLanguage previousValue)
        {
            if (previousValue != null && previousValue.User.Contains(this))
            {
                previousValue.User.Remove(this);
            }
    
            if (PreferedLanguage != null)
            {
                if (!PreferedLanguage.User.Contains(this))
                {
                    PreferedLanguage.User.Add(this);
                }
                if (LCID != PreferedLanguage.LCID)
                {
                    LCID = PreferedLanguage.LCID;
                }
            }
            else if (!_settingFK)
            {
                LCID = null;
            }
        }
    
        private void FixupSecurityQuestion(SecurityQuestion previousValue)
        {
            if (previousValue != null && previousValue.User.Contains(this))
            {
                previousValue.User.Remove(this);
            }
    
            if (SecurityQuestion != null)
            {
                if (!SecurityQuestion.User.Contains(this))
                {
                    SecurityQuestion.User.Add(this);
                }
                if (SecurityQuestionID != SecurityQuestion.SecurityQuestionID)
                {
                    SecurityQuestionID = SecurityQuestion.SecurityQuestionID;
                }
            }
            else if (!_settingFK)
            {
                SecurityQuestionID = null;
            }
        }
    
        private void FixupAccountType(AccountType previousValue)
        {
            if (previousValue != null && previousValue.User.Contains(this))
            {
                previousValue.User.Remove(this);
            }
    
            if (AccountType != null)
            {
                if (!AccountType.User.Contains(this))
                {
                    AccountType.User.Add(this);
                }
                if (AccountTypeID != AccountType.AccountTypeID)
                {
                    AccountTypeID = AccountType.AccountTypeID;
                }
            }
            else if (!_settingFK)
            {
                AccountTypeID = null;
            }
        }
    
        private void FixupCulture(Culture previousValue)
        {
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (Culture != null)
            {
                if (!Culture.Users.Contains(this))
                {
                    Culture.Users.Add(this);
                }
                if (CultureID != Culture.CultureID)
                {
                    CultureID = Culture.CultureID;
                }
            }
            else if (!_settingFK)
            {
                CultureID = null;
            }
        }
    
        private void FixupProfile(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Profile item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Profile item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserRole(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserRole item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserRole item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupConversations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Conversation item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Conversation item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupNegotiationApplicationStatus(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (NegotiationApplicationStatu item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NegotiationApplicationStatu item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupHistories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (History item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (History item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupMessages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Message item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Message item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserApplicationStatus(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserApplicationStatu item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserApplicationStatu item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserOrganizations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserOrganization item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserOrganization item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserOperations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserOperation item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserOperation item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }

        #endregion
    }
}
