//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace citPOINT.eNeg.Data.Web
{
    public partial class Negotiation
    {
        #region Primitive Properties
    
        public virtual System.Guid NegotiationID
        {
            get;
            set;
        }
    
        public virtual string NegotiationName
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> StatusID
        {
            get { return _statusID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_statusID != value)
                    {
                        if (NegotiationStatu != null && NegotiationStatu.StatusID != value)
                        {
                            NegotiationStatu = null;
                        }
                        _statusID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _statusID;
    
        public virtual Nullable<bool> Deleted
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DeletedDate
        {
            get;
            set;
        }
    
        public virtual System.Guid UserID
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Conversation> Conversations
        {
            get
            {
                if (_conversations == null)
                {
                    var newCollection = new FixupCollection<Conversation>();
                    newCollection.CollectionChanged += FixupConversations;
                    _conversations = newCollection;
                }
                return _conversations;
            }
            set
            {
                if (!ReferenceEquals(_conversations, value))
                {
                    var previousValue = _conversations as FixupCollection<Conversation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupConversations;
                    }
                    _conversations = value;
                    var newValue = value as FixupCollection<Conversation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupConversations;
                    }
                }
            }
        }
        private ICollection<Conversation> _conversations;
    
        public virtual ICollection<NegotiationApplicationStatu> NegotiationApplicationStatus
        {
            get
            {
                if (_negotiationApplicationStatus == null)
                {
                    var newCollection = new FixupCollection<NegotiationApplicationStatu>();
                    newCollection.CollectionChanged += FixupNegotiationApplicationStatus;
                    _negotiationApplicationStatus = newCollection;
                }
                return _negotiationApplicationStatus;
            }
            set
            {
                if (!ReferenceEquals(_negotiationApplicationStatus, value))
                {
                    var previousValue = _negotiationApplicationStatus as FixupCollection<NegotiationApplicationStatu>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupNegotiationApplicationStatus;
                    }
                    _negotiationApplicationStatus = value;
                    var newValue = value as FixupCollection<NegotiationApplicationStatu>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupNegotiationApplicationStatus;
                    }
                }
            }
        }
        private ICollection<NegotiationApplicationStatu> _negotiationApplicationStatus;
    
        public virtual NegotiationStatu NegotiationStatu
        {
            get { return _negotiationStatu; }
            set
            {
                if (!ReferenceEquals(_negotiationStatu, value))
                {
                    var previousValue = _negotiationStatu;
                    _negotiationStatu = value;
                    FixupNegotiationStatu(previousValue);
                }
            }
        }
        private NegotiationStatu _negotiationStatu;
    
        public virtual ICollection<NegotiationOrganization> NegotiationOrganizations
        {
            get
            {
                if (_negotiationOrganizations == null)
                {
                    var newCollection = new FixupCollection<NegotiationOrganization>();
                    newCollection.CollectionChanged += FixupNegotiationOrganizations;
                    _negotiationOrganizations = newCollection;
                }
                return _negotiationOrganizations;
            }
            set
            {
                if (!ReferenceEquals(_negotiationOrganizations, value))
                {
                    var previousValue = _negotiationOrganizations as FixupCollection<NegotiationOrganization>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupNegotiationOrganizations;
                    }
                    _negotiationOrganizations = value;
                    var newValue = value as FixupCollection<NegotiationOrganization>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupNegotiationOrganizations;
                    }
                }
            }
        }
        private ICollection<NegotiationOrganization> _negotiationOrganizations;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupNegotiationStatu(NegotiationStatu previousValue)
        {
            if (previousValue != null && previousValue.Negotiations.Contains(this))
            {
                previousValue.Negotiations.Remove(this);
            }
    
            if (NegotiationStatu != null)
            {
                if (!NegotiationStatu.Negotiations.Contains(this))
                {
                    NegotiationStatu.Negotiations.Add(this);
                }
                if (StatusID != NegotiationStatu.StatusID)
                {
                    StatusID = NegotiationStatu.StatusID;
                }
            }
            else if (!_settingFK)
            {
                StatusID = null;
            }
        }
    
        private void FixupConversations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Conversation item in e.NewItems)
                {
                    item.Negotiation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Conversation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Negotiation, this))
                    {
                        item.Negotiation = null;
                    }
                }
            }
        }
    
        private void FixupNegotiationApplicationStatus(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (NegotiationApplicationStatu item in e.NewItems)
                {
                    item.Negotiation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NegotiationApplicationStatu item in e.OldItems)
                {
                    if (ReferenceEquals(item.Negotiation, this))
                    {
                        item.Negotiation = null;
                    }
                }
            }
        }
    
        private void FixupNegotiationOrganizations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (NegotiationOrganization item in e.NewItems)
                {
                    item.Negotiation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NegotiationOrganization item in e.OldItems)
                {
                    if (ReferenceEquals(item.Negotiation, this))
                    {
                        item.Negotiation = null;
                    }
                }
            }
        }

        #endregion
    }
}
