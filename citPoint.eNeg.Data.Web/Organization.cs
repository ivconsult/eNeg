//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace citPOINT.eNeg.Data.Web
{
    public partial class Organization
    {
        #region Primitive Properties
    
        public virtual System.Guid OrganizationID
        {
            get;
            set;
        }
    
        public virtual string OrganizationName
        {
            get;
            set;
        }
    
        public virtual int OrganizationTypeID
        {
            get { return _organizationTypeID; }
            set
            {
                if (_organizationTypeID != value)
                {
                    if (OrganizationType != null && OrganizationType.OrganizationTypeID != value)
                    {
                        OrganizationType = null;
                    }
                    _organizationTypeID = value;
                }
            }
        }
        private int _organizationTypeID;
    
        public virtual bool Deleted
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> DeletedBy
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DeletedOn
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<NegotiationOrganization> NegotiationOrganizations
        {
            get
            {
                if (_negotiationOrganizations == null)
                {
                    var newCollection = new FixupCollection<NegotiationOrganization>();
                    newCollection.CollectionChanged += FixupNegotiationOrganizations;
                    _negotiationOrganizations = newCollection;
                }
                return _negotiationOrganizations;
            }
            set
            {
                if (!ReferenceEquals(_negotiationOrganizations, value))
                {
                    var previousValue = _negotiationOrganizations as FixupCollection<NegotiationOrganization>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupNegotiationOrganizations;
                    }
                    _negotiationOrganizations = value;
                    var newValue = value as FixupCollection<NegotiationOrganization>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupNegotiationOrganizations;
                    }
                }
            }
        }
        private ICollection<NegotiationOrganization> _negotiationOrganizations;
    
        public virtual OrganizationType OrganizationType
        {
            get { return _organizationType; }
            set
            {
                if (!ReferenceEquals(_organizationType, value))
                {
                    var previousValue = _organizationType;
                    _organizationType = value;
                    FixupOrganizationType(previousValue);
                }
            }
        }
        private OrganizationType _organizationType;
    
        public virtual ICollection<UserOrganization> UserOrganizations
        {
            get
            {
                if (_userOrganizations == null)
                {
                    var newCollection = new FixupCollection<UserOrganization>();
                    newCollection.CollectionChanged += FixupUserOrganizations;
                    _userOrganizations = newCollection;
                }
                return _userOrganizations;
            }
            set
            {
                if (!ReferenceEquals(_userOrganizations, value))
                {
                    var previousValue = _userOrganizations as FixupCollection<UserOrganization>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserOrganizations;
                    }
                    _userOrganizations = value;
                    var newValue = value as FixupCollection<UserOrganization>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserOrganizations;
                    }
                }
            }
        }
        private ICollection<UserOrganization> _userOrganizations;

        #endregion
        #region Association Fixup
    
        private void FixupOrganizationType(OrganizationType previousValue)
        {
            if (previousValue != null && previousValue.Organizations.Contains(this))
            {
                previousValue.Organizations.Remove(this);
            }
    
            if (OrganizationType != null)
            {
                if (!OrganizationType.Organizations.Contains(this))
                {
                    OrganizationType.Organizations.Add(this);
                }
                if (OrganizationTypeID != OrganizationType.OrganizationTypeID)
                {
                    OrganizationTypeID = OrganizationType.OrganizationTypeID;
                }
            }
        }
    
        private void FixupNegotiationOrganizations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (NegotiationOrganization item in e.NewItems)
                {
                    item.Organization = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NegotiationOrganization item in e.OldItems)
                {
                    if (ReferenceEquals(item.Organization, this))
                    {
                        item.Organization = null;
                    }
                }
            }
        }
    
        private void FixupUserOrganizations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserOrganization item in e.NewItems)
                {
                    item.Organization = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserOrganization item in e.OldItems)
                {
                    if (ReferenceEquals(item.Organization, this))
                    {
                        item.Organization = null;
                    }
                }
            }
        }

        #endregion
    }
}
