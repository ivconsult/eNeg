//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace citPOINT.eNeg.Data.Web
{
    public partial class Message
    {
        #region Primitive Properties
    
        public virtual System.Guid MessageID
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> ConversationID
        {
            get { return _conversationID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_conversationID != value)
                    {
                        if (Conversation != null && Conversation.ConversationID != value)
                        {
                            Conversation = null;
                        }
                        _conversationID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _conversationID;
    
        public virtual string MessageContent
        {
            get;
            set;
        }
    
        public virtual string MessageSubject
        {
            get;
            set;
        }
    
        public virtual string MessageSender
        {
            get;
            set;
        }
    
        public virtual string MessageReceiver
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> MessageDate
        {
            get;
            set;
        }
    
        public virtual System.Guid ChannelID
        {
            get { return _channelID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_channelID != value)
                    {
                        if (Channel != null && Channel.ChannelID != value)
                        {
                            Channel = null;
                        }
                        _channelID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _channelID;
    
        public virtual bool IsSent
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> Deleted
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> DeletedBy
        {
            get { return _deletedBy; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_deletedBy != value)
                    {
                        if (User != null && User.UserID != value)
                        {
                            User = null;
                        }
                        _deletedBy = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _deletedBy;
    
        public virtual Nullable<System.DateTime> DeletedOn
        {
            get;
            set;
        }
    
        public virtual bool IsAppsMessage
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Attachement> Attachements
        {
            get
            {
                if (_attachements == null)
                {
                    var newCollection = new FixupCollection<Attachement>();
                    newCollection.CollectionChanged += FixupAttachements;
                    _attachements = newCollection;
                }
                return _attachements;
            }
            set
            {
                if (!ReferenceEquals(_attachements, value))
                {
                    var previousValue = _attachements as FixupCollection<Attachement>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAttachements;
                    }
                    _attachements = value;
                    var newValue = value as FixupCollection<Attachement>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAttachements;
                    }
                }
            }
        }
        private ICollection<Attachement> _attachements;
    
        public virtual Channel Channel
        {
            get { return _channel; }
            set
            {
                if (!ReferenceEquals(_channel, value))
                {
                    var previousValue = _channel;
                    _channel = value;
                    FixupChannel(previousValue);
                }
            }
        }
        private Channel _channel;
    
        public virtual Conversation Conversation
        {
            get { return _conversation; }
            set
            {
                if (!ReferenceEquals(_conversation, value))
                {
                    var previousValue = _conversation;
                    _conversation = value;
                    FixupConversation(previousValue);
                }
            }
        }
        private Conversation _conversation;
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupChannel(Channel previousValue)
        {
            if (previousValue != null && previousValue.Messages.Contains(this))
            {
                previousValue.Messages.Remove(this);
            }
    
            if (Channel != null)
            {
                if (!Channel.Messages.Contains(this))
                {
                    Channel.Messages.Add(this);
                }
                if (ChannelID != Channel.ChannelID)
                {
                    ChannelID = Channel.ChannelID;
                }
            }
        }
    
        private void FixupConversation(Conversation previousValue)
        {
            if (previousValue != null && previousValue.Messages.Contains(this))
            {
                previousValue.Messages.Remove(this);
            }
    
            if (Conversation != null)
            {
                if (!Conversation.Messages.Contains(this))
                {
                    Conversation.Messages.Add(this);
                }
                if (ConversationID != Conversation.ConversationID)
                {
                    ConversationID = Conversation.ConversationID;
                }
            }
            else if (!_settingFK)
            {
                ConversationID = null;
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.Messages.Contains(this))
            {
                previousValue.Messages.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Messages.Contains(this))
                {
                    User.Messages.Add(this);
                }
                if (DeletedBy != User.UserID)
                {
                    DeletedBy = User.UserID;
                }
            }
            else if (!_settingFK)
            {
                DeletedBy = null;
            }
        }
    
        private void FixupAttachements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Attachement item in e.NewItems)
                {
                    item.Message = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Attachement item in e.OldItems)
                {
                    if (ReferenceEquals(item.Message, this))
                    {
                        item.Message = null;
                    }
                }
            }
        }

        #endregion
    }
}
