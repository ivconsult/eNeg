//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace citPOINT.eNeg.Data.Web
{
    public partial class Conversation
    {
        #region Primitive Properties
    
        public virtual System.Guid ConversationID
        {
            get;
            set;
        }
    
        public virtual string ConversationName
        {
            get;
            set;
        }
    
        public virtual System.Guid NegotiationID
        {
            get { return _negotiationID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_negotiationID != value)
                    {
                        if (Negotiation != null && Negotiation.NegotiationID != value)
                        {
                            Negotiation = null;
                        }
                        _negotiationID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _negotiationID;
    
        public virtual Nullable<bool> Deleted
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> DeletedBy
        {
            get { return _deletedBy; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_deletedBy != value)
                    {
                        if (User != null && User.UserID != value)
                        {
                            User = null;
                        }
                        _deletedBy = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _deletedBy;
    
        public virtual Nullable<System.DateTime> DeletedOn
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
        public virtual Negotiation Negotiation
        {
            get { return _negotiation; }
            set
            {
                if (!ReferenceEquals(_negotiation, value))
                {
                    var previousValue = _negotiation;
                    _negotiation = value;
                    FixupNegotiation(previousValue);
                }
            }
        }
        private Negotiation _negotiation;
    
        public virtual ICollection<Message> Messages
        {
            get
            {
                if (_messages == null)
                {
                    var newCollection = new FixupCollection<Message>();
                    newCollection.CollectionChanged += FixupMessages;
                    _messages = newCollection;
                }
                return _messages;
            }
            set
            {
                if (!ReferenceEquals(_messages, value))
                {
                    var previousValue = _messages as FixupCollection<Message>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMessages;
                    }
                    _messages = value;
                    var newValue = value as FixupCollection<Message>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMessages;
                    }
                }
            }
        }
        private ICollection<Message> _messages;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.Conversations.Contains(this))
            {
                previousValue.Conversations.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Conversations.Contains(this))
                {
                    User.Conversations.Add(this);
                }
                if (DeletedBy != User.UserID)
                {
                    DeletedBy = User.UserID;
                }
            }
            else if (!_settingFK)
            {
                DeletedBy = null;
            }
        }
    
        private void FixupNegotiation(Negotiation previousValue)
        {
            if (previousValue != null && previousValue.Conversations.Contains(this))
            {
                previousValue.Conversations.Remove(this);
            }
    
            if (Negotiation != null)
            {
                if (!Negotiation.Conversations.Contains(this))
                {
                    Negotiation.Conversations.Add(this);
                }
                if (NegotiationID != Negotiation.NegotiationID)
                {
                    NegotiationID = Negotiation.NegotiationID;
                }
            }
        }
    
        private void FixupMessages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Message item in e.NewItems)
                {
                    item.Conversation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Message item in e.OldItems)
                {
                    if (ReferenceEquals(item.Conversation, this))
                    {
                        item.Conversation = null;
                    }
                }
            }
        }

        #endregion
    }
}
