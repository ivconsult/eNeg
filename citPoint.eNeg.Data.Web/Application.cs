//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace citPOINT.eNeg.Data.Web
{
    public partial class Application
    {
        #region Primitive Properties
    
        public virtual System.Guid ApplicationID
        {
            get;
            set;
        }
    
        public virtual string ApplicationTitle
        {
            get;
            set;
        }
    
        public virtual string AssemblyName
        {
            get;
            set;
        }
    
        public virtual string ModuleName
        {
            get;
            set;
        }
    
        public virtual string XapFilePath
        {
            get;
            set;
        }
    
        public virtual int ApplicationRank
        {
            get;
            set;
        }
    
        public virtual string ApplicationBaseAddress
        {
            get;
            set;
        }
    
        public virtual string ApplicationMainServicePath
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<NegotiationApplicationStatu> NegotiationApplicationStatus
        {
            get
            {
                if (_negotiationApplicationStatus == null)
                {
                    var newCollection = new FixupCollection<NegotiationApplicationStatu>();
                    newCollection.CollectionChanged += FixupNegotiationApplicationStatus;
                    _negotiationApplicationStatus = newCollection;
                }
                return _negotiationApplicationStatus;
            }
            set
            {
                if (!ReferenceEquals(_negotiationApplicationStatus, value))
                {
                    var previousValue = _negotiationApplicationStatus as FixupCollection<NegotiationApplicationStatu>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupNegotiationApplicationStatus;
                    }
                    _negotiationApplicationStatus = value;
                    var newValue = value as FixupCollection<NegotiationApplicationStatu>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupNegotiationApplicationStatus;
                    }
                }
            }
        }
        private ICollection<NegotiationApplicationStatu> _negotiationApplicationStatus;
    
        public virtual ICollection<UserApplicationStatu> UserApplicationStatus
        {
            get
            {
                if (_userApplicationStatus == null)
                {
                    var newCollection = new FixupCollection<UserApplicationStatu>();
                    newCollection.CollectionChanged += FixupUserApplicationStatus;
                    _userApplicationStatus = newCollection;
                }
                return _userApplicationStatus;
            }
            set
            {
                if (!ReferenceEquals(_userApplicationStatus, value))
                {
                    var previousValue = _userApplicationStatus as FixupCollection<UserApplicationStatu>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserApplicationStatus;
                    }
                    _userApplicationStatus = value;
                    var newValue = value as FixupCollection<UserApplicationStatu>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserApplicationStatus;
                    }
                }
            }
        }
        private ICollection<UserApplicationStatu> _userApplicationStatus;

        #endregion
        #region Association Fixup
    
        private void FixupNegotiationApplicationStatus(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (NegotiationApplicationStatu item in e.NewItems)
                {
                    item.Application = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NegotiationApplicationStatu item in e.OldItems)
                {
                    if (ReferenceEquals(item.Application, this))
                    {
                        item.Application = null;
                    }
                }
            }
        }
    
        private void FixupUserApplicationStatus(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserApplicationStatu item in e.NewItems)
                {
                    item.Application = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserApplicationStatu item in e.OldItems)
                {
                    if (ReferenceEquals(item.Application, this))
                    {
                        item.Application = null;
                    }
                }
            }
        }

        #endregion
    }
}
