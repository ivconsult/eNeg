//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace citPOINT.eNeg.Infrastructure.ClientSideTest
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace citPOINT.eNeg.Infrastructure.ClientSideTest.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The domain context corresponding to the 'ServerSimulationService' domain service.
    /// </summary>
    public sealed partial class ServerSimulationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerSimulationContext"/> class.
        /// </summary>
        public ServerSimulationContext() : 
                this(new WebDomainClient<IServerSimulationServiceContract>(new Uri("citPOINT-eNeg-Infrastructure-ClientSideTest-Web-ServerSimulationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerSimulationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ServerSimulationService service URI.</param>
        public ServerSimulationContext(Uri serviceUri) : 
                this(new WebDomainClient<IServerSimulationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerSimulationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public ServerSimulationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'HandleAtServer' method of the domain service.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation HandleAtServer(Action<InvokeOperation> callback, object userState)
        {
            this.ValidateMethod("HandleAtServer", null);
            return this.InvokeOperation("HandleAtServer", typeof(void), null, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'HandleAtServer' method of the domain service.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation HandleAtServer()
        {
            this.ValidateMethod("HandleAtServer", null);
            return this.InvokeOperation("HandleAtServer", typeof(void), null, true, null, null);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ServerSimulationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ServerSimulationService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IServerSimulationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'HandleAtServer' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ServerSimulationService/HandleAtServerDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ServerSimulationService/HandleAtServer", ReplyAction="http://tempuri.org/ServerSimulationService/HandleAtServerResponse")]
            IAsyncResult BeginHandleAtServer(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginHandleAtServer'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginHandleAtServer'.</param>
            void EndHandleAtServer(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ServerSimulationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ServerSimulationService/SubmitChanges", ReplyAction="http://tempuri.org/ServerSimulationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ServerSimulationContextEntityContainer : EntityContainer
        {
            
            public ServerSimulationContextEntityContainer()
            {
            }
        }
    }
}
