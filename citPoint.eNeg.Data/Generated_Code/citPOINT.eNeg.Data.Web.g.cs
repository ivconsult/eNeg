//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace citPOINT.eNeg.Data.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'AccountType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class AccountType : Entity
    {
        
        private Guid _accountTypeID;
        
        private string _typeDescription;
        
        private string _typeName;
        
        private EntityCollection<User> _user;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAccountTypeIDChanging(Guid value);
        partial void OnAccountTypeIDChanged();
        partial void OnTypeDescriptionChanging(string value);
        partial void OnTypeDescriptionChanged();
        partial void OnTypeNameChanging(string value);
        partial void OnTypeNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountType"/> class.
        /// </summary>
        public AccountType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AccountTypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid AccountTypeID
        {
            get
            {
                return this._accountTypeID;
            }
            set
            {
                if ((this._accountTypeID != value))
                {
                    this.OnAccountTypeIDChanging(value);
                    this.ValidateProperty("AccountTypeID", value);
                    this._accountTypeID = value;
                    this.RaisePropertyChanged("AccountTypeID");
                    this.OnAccountTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TypeDescription' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string TypeDescription
        {
            get
            {
                return this._typeDescription;
            }
            set
            {
                if ((this._typeDescription != value))
                {
                    this.OnTypeDescriptionChanging(value);
                    this.RaiseDataMemberChanging("TypeDescription");
                    this.ValidateProperty("TypeDescription", value);
                    this._typeDescription = value;
                    this.RaiseDataMemberChanged("TypeDescription");
                    this.OnTypeDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TypeName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string TypeName
        {
            get
            {
                return this._typeName;
            }
            set
            {
                if ((this._typeName != value))
                {
                    this.OnTypeNameChanging(value);
                    this.RaiseDataMemberChanging("TypeName");
                    this.ValidateProperty("TypeName", value);
                    this._typeName = value;
                    this.RaiseDataMemberChanged("TypeName");
                    this.OnTypeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="User"/> entities.
        /// </summary>
        [Association("AccountType_User", "AccountTypeID", "AccountTypeID")]
        [XmlIgnore()]
        public EntityCollection<User> User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityCollection<User>(this, "User", this.FilterUser, this.AttachUser, this.DetachUser);
                }
                return this._user;
            }
        }
        
        private void AttachUser(User entity)
        {
            entity.AccountType = this;
        }
        
        private void DetachUser(User entity)
        {
            entity.AccountType = null;
        }
        
        private bool FilterUser(User entity)
        {
            return (entity.AccountTypeID == this.AccountTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._accountTypeID;
        }
    }
    
    /// <summary>
    /// The 'ActionType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class ActionType : Entity
    {
        
        private string _actionDescription;
        
        private Guid _actionTypeID;
        
        private EntityCollection<History> _histories;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActionDescriptionChanging(string value);
        partial void OnActionDescriptionChanged();
        partial void OnActionTypeIDChanging(Guid value);
        partial void OnActionTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionType"/> class.
        /// </summary>
        public ActionType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ActionDescription' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string ActionDescription
        {
            get
            {
                return this._actionDescription;
            }
            set
            {
                if ((this._actionDescription != value))
                {
                    this.OnActionDescriptionChanging(value);
                    this.RaiseDataMemberChanging("ActionDescription");
                    this.ValidateProperty("ActionDescription", value);
                    this._actionDescription = value;
                    this.RaiseDataMemberChanged("ActionDescription");
                    this.OnActionDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ActionTypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ActionTypeID
        {
            get
            {
                return this._actionTypeID;
            }
            set
            {
                if ((this._actionTypeID != value))
                {
                    this.OnActionTypeIDChanging(value);
                    this.ValidateProperty("ActionTypeID", value);
                    this._actionTypeID = value;
                    this.RaisePropertyChanged("ActionTypeID");
                    this.OnActionTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="History"/> entities.
        /// </summary>
        [Association("ActionType_History", "ActionTypeID", "ActionTypeID")]
        [XmlIgnore()]
        public EntityCollection<History> Histories
        {
            get
            {
                if ((this._histories == null))
                {
                    this._histories = new EntityCollection<History>(this, "Histories", this.FilterHistories, this.AttachHistories, this.DetachHistories);
                }
                return this._histories;
            }
        }
        
        private void AttachHistories(History entity)
        {
            entity.ActionType = this;
        }
        
        private void DetachHistories(History entity)
        {
            entity.ActionType = null;
        }
        
        private bool FilterHistories(History entity)
        {
            return (entity.ActionTypeID == this.ActionTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._actionTypeID;
        }
    }
    
    /// <summary>
    /// The 'Application' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class Application : Entity
    {
        
        private string _applicationBaseAddress;
        
        private Guid _applicationID;
        
        private string _applicationMainServicePath;
        
        private int _applicationRank;
        
        private string _applicationTitle;
        
        private string _assemblyName;
        
        private string _moduleName;
        
        private EntityCollection<NegotiationApplicationStatu> _negotiationApplicationStatus;
        
        private EntityCollection<UserApplicationStatu> _userApplicationStatus;
        
        private string _xapFilePath;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnApplicationBaseAddressChanging(string value);
        partial void OnApplicationBaseAddressChanged();
        partial void OnApplicationIDChanging(Guid value);
        partial void OnApplicationIDChanged();
        partial void OnApplicationMainServicePathChanging(string value);
        partial void OnApplicationMainServicePathChanged();
        partial void OnApplicationRankChanging(int value);
        partial void OnApplicationRankChanged();
        partial void OnApplicationTitleChanging(string value);
        partial void OnApplicationTitleChanged();
        partial void OnAssemblyNameChanging(string value);
        partial void OnAssemblyNameChanged();
        partial void OnModuleNameChanging(string value);
        partial void OnModuleNameChanged();
        partial void OnXapFilePathChanging(string value);
        partial void OnXapFilePathChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Application"/> class.
        /// </summary>
        public Application()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ApplicationBaseAddress' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string ApplicationBaseAddress
        {
            get
            {
                return this._applicationBaseAddress;
            }
            set
            {
                if ((this._applicationBaseAddress != value))
                {
                    this.OnApplicationBaseAddressChanging(value);
                    this.RaiseDataMemberChanging("ApplicationBaseAddress");
                    this.ValidateProperty("ApplicationBaseAddress", value);
                    this._applicationBaseAddress = value;
                    this.RaiseDataMemberChanged("ApplicationBaseAddress");
                    this.OnApplicationBaseAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ApplicationID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ApplicationID
        {
            get
            {
                return this._applicationID;
            }
            set
            {
                if ((this._applicationID != value))
                {
                    this.OnApplicationIDChanging(value);
                    this.ValidateProperty("ApplicationID", value);
                    this._applicationID = value;
                    this.RaisePropertyChanged("ApplicationID");
                    this.OnApplicationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ApplicationMainServicePath' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string ApplicationMainServicePath
        {
            get
            {
                return this._applicationMainServicePath;
            }
            set
            {
                if ((this._applicationMainServicePath != value))
                {
                    this.OnApplicationMainServicePathChanging(value);
                    this.RaiseDataMemberChanging("ApplicationMainServicePath");
                    this.ValidateProperty("ApplicationMainServicePath", value);
                    this._applicationMainServicePath = value;
                    this.RaiseDataMemberChanged("ApplicationMainServicePath");
                    this.OnApplicationMainServicePathChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ApplicationRank' value.
        /// </summary>
        [DataMember()]
        public int ApplicationRank
        {
            get
            {
                return this._applicationRank;
            }
            set
            {
                if ((this._applicationRank != value))
                {
                    this.OnApplicationRankChanging(value);
                    this.RaiseDataMemberChanging("ApplicationRank");
                    this.ValidateProperty("ApplicationRank", value);
                    this._applicationRank = value;
                    this.RaiseDataMemberChanged("ApplicationRank");
                    this.OnApplicationRankChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ApplicationTitle' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string ApplicationTitle
        {
            get
            {
                return this._applicationTitle;
            }
            set
            {
                if ((this._applicationTitle != value))
                {
                    this.OnApplicationTitleChanging(value);
                    this.RaiseDataMemberChanging("ApplicationTitle");
                    this.ValidateProperty("ApplicationTitle", value);
                    this._applicationTitle = value;
                    this.RaiseDataMemberChanged("ApplicationTitle");
                    this.OnApplicationTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AssemblyName' value.
        /// </summary>
        [DataMember()]
        [StringLength(150)]
        public string AssemblyName
        {
            get
            {
                return this._assemblyName;
            }
            set
            {
                if ((this._assemblyName != value))
                {
                    this.OnAssemblyNameChanging(value);
                    this.RaiseDataMemberChanging("AssemblyName");
                    this.ValidateProperty("AssemblyName", value);
                    this._assemblyName = value;
                    this.RaiseDataMemberChanged("AssemblyName");
                    this.OnAssemblyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ModuleName' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string ModuleName
        {
            get
            {
                return this._moduleName;
            }
            set
            {
                if ((this._moduleName != value))
                {
                    this.OnModuleNameChanging(value);
                    this.RaiseDataMemberChanging("ModuleName");
                    this.ValidateProperty("ModuleName", value);
                    this._moduleName = value;
                    this.RaiseDataMemberChanged("ModuleName");
                    this.OnModuleNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="NegotiationApplicationStatu"/> entities.
        /// </summary>
        [Association("Application_NegotiationApplicationStatu", "ApplicationID", "ApplicationID")]
        [XmlIgnore()]
        public EntityCollection<NegotiationApplicationStatu> NegotiationApplicationStatus
        {
            get
            {
                if ((this._negotiationApplicationStatus == null))
                {
                    this._negotiationApplicationStatus = new EntityCollection<NegotiationApplicationStatu>(this, "NegotiationApplicationStatus", this.FilterNegotiationApplicationStatus, this.AttachNegotiationApplicationStatus, this.DetachNegotiationApplicationStatus);
                }
                return this._negotiationApplicationStatus;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="UserApplicationStatu"/> entities.
        /// </summary>
        [Association("Application_UserApplicationStatu", "ApplicationID", "ApplicationID")]
        [XmlIgnore()]
        public EntityCollection<UserApplicationStatu> UserApplicationStatus
        {
            get
            {
                if ((this._userApplicationStatus == null))
                {
                    this._userApplicationStatus = new EntityCollection<UserApplicationStatu>(this, "UserApplicationStatus", this.FilterUserApplicationStatus, this.AttachUserApplicationStatus, this.DetachUserApplicationStatus);
                }
                return this._userApplicationStatus;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'XapFilePath' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string XapFilePath
        {
            get
            {
                return this._xapFilePath;
            }
            set
            {
                if ((this._xapFilePath != value))
                {
                    this.OnXapFilePathChanging(value);
                    this.RaiseDataMemberChanging("XapFilePath");
                    this.ValidateProperty("XapFilePath", value);
                    this._xapFilePath = value;
                    this.RaiseDataMemberChanged("XapFilePath");
                    this.OnXapFilePathChanged();
                }
            }
        }
        
        private void AttachNegotiationApplicationStatus(NegotiationApplicationStatu entity)
        {
            entity.Application = this;
        }
        
        private void DetachNegotiationApplicationStatus(NegotiationApplicationStatu entity)
        {
            entity.Application = null;
        }
        
        private bool FilterNegotiationApplicationStatus(NegotiationApplicationStatu entity)
        {
            return (entity.ApplicationID == this.ApplicationID);
        }
        
        private void AttachUserApplicationStatus(UserApplicationStatu entity)
        {
            entity.Application = this;
        }
        
        private void DetachUserApplicationStatus(UserApplicationStatu entity)
        {
            entity.Application = null;
        }
        
        private bool FilterUserApplicationStatus(UserApplicationStatu entity)
        {
            return (entity.ApplicationID == this.ApplicationID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._applicationID;
        }
    }
    
    /// <summary>
    /// The 'Attachement' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class Attachement : Entity
    {
        
        private byte[] _attachementContent;
        
        private Guid _attachementID;
        
        private string _attachementName;
        
        private EntityRef<Message> _message;
        
        private Nullable<Guid> _messageID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAttachementContentChanging(byte[] value);
        partial void OnAttachementContentChanged();
        partial void OnAttachementIDChanging(Guid value);
        partial void OnAttachementIDChanged();
        partial void OnAttachementNameChanging(string value);
        partial void OnAttachementNameChanged();
        partial void OnMessageIDChanging(Nullable<Guid> value);
        partial void OnMessageIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Attachement"/> class.
        /// </summary>
        public Attachement()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AttachementContent' value.
        /// </summary>
        [DataMember()]
        public byte[] AttachementContent
        {
            get
            {
                return this._attachementContent;
            }
            set
            {
                if ((this._attachementContent != value))
                {
                    this.OnAttachementContentChanging(value);
                    this.RaiseDataMemberChanging("AttachementContent");
                    this.ValidateProperty("AttachementContent", value);
                    this._attachementContent = value;
                    this.RaiseDataMemberChanged("AttachementContent");
                    this.OnAttachementContentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AttachementID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid AttachementID
        {
            get
            {
                return this._attachementID;
            }
            set
            {
                if ((this._attachementID != value))
                {
                    this.OnAttachementIDChanging(value);
                    this.ValidateProperty("AttachementID", value);
                    this._attachementID = value;
                    this.RaisePropertyChanged("AttachementID");
                    this.OnAttachementIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AttachementName' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string AttachementName
        {
            get
            {
                return this._attachementName;
            }
            set
            {
                if ((this._attachementName != value))
                {
                    this.OnAttachementNameChanging(value);
                    this.RaiseDataMemberChanging("AttachementName");
                    this.ValidateProperty("AttachementName", value);
                    this._attachementName = value;
                    this.RaiseDataMemberChanged("AttachementName");
                    this.OnAttachementNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Message"/> entity.
        /// </summary>
        [Association("Message_Attachement", "MessageID", "MessageID", IsForeignKey=true)]
        [XmlIgnore()]
        public Message Message
        {
            get
            {
                if ((this._message == null))
                {
                    this._message = new EntityRef<Message>(this, "Message", this.FilterMessage);
                }
                return this._message.Entity;
            }
            set
            {
                Message previous = this.Message;
                if ((previous != value))
                {
                    this.ValidateProperty("Message", value);
                    if ((previous != null))
                    {
                        this._message.Entity = null;
                        previous.Attachements.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MessageID = value.MessageID;
                    }
                    else
                    {
                        this.MessageID = default(Nullable<Guid>);
                    }
                    this._message.Entity = value;
                    if ((value != null))
                    {
                        value.Attachements.Add(this);
                    }
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> MessageID
        {
            get
            {
                return this._messageID;
            }
            set
            {
                if ((this._messageID != value))
                {
                    this.OnMessageIDChanging(value);
                    this.RaiseDataMemberChanging("MessageID");
                    this.ValidateProperty("MessageID", value);
                    this._messageID = value;
                    this.RaiseDataMemberChanged("MessageID");
                    this.OnMessageIDChanged();
                }
            }
        }
        
        private bool FilterMessage(Message entity)
        {
            return (entity.MessageID == this.MessageID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._attachementID;
        }
    }
    
    /// <summary>
    /// The 'Category' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class Category : Entity
    {
        
        private int _categoryID;
        
        private EntityCollection<CategoryLog> _categoryLogs;
        
        private string _categoryName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryIDChanging(int value);
        partial void OnCategoryIDChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Category"/> class.
        /// </summary>
        public Category()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CategoryID
        {
            get
            {
                return this._categoryID;
            }
            set
            {
                if ((this._categoryID != value))
                {
                    this.OnCategoryIDChanging(value);
                    this.ValidateProperty("CategoryID", value);
                    this._categoryID = value;
                    this.RaisePropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CategoryLog"/> entities.
        /// </summary>
        [Association("Category_CategoryLog", "CategoryID", "CategoryID")]
        [XmlIgnore()]
        public EntityCollection<CategoryLog> CategoryLogs
        {
            get
            {
                if ((this._categoryLogs == null))
                {
                    this._categoryLogs = new EntityCollection<CategoryLog>(this, "CategoryLogs", this.FilterCategoryLogs, this.AttachCategoryLogs, this.DetachCategoryLogs);
                }
                return this._categoryLogs;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string CategoryName
        {
            get
            {
                return this._categoryName;
            }
            set
            {
                if ((this._categoryName != value))
                {
                    this.OnCategoryNameChanging(value);
                    this.RaiseDataMemberChanging("CategoryName");
                    this.ValidateProperty("CategoryName", value);
                    this._categoryName = value;
                    this.RaiseDataMemberChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }
        
        private void AttachCategoryLogs(CategoryLog entity)
        {
            entity.Category = this;
        }
        
        private void DetachCategoryLogs(CategoryLog entity)
        {
            entity.Category = null;
        }
        
        private bool FilterCategoryLogs(CategoryLog entity)
        {
            return (entity.CategoryID == this.CategoryID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._categoryID;
        }
    }
    
    /// <summary>
    /// The 'CategoryLog' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class CategoryLog : Entity
    {
        
        private EntityRef<Category> _category;
        
        private int _categoryID;
        
        private int _categoryLogID;
        
        private EntityRef<Log> _log;
        
        private int _logID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryIDChanging(int value);
        partial void OnCategoryIDChanged();
        partial void OnCategoryLogIDChanging(int value);
        partial void OnCategoryLogIDChanged();
        partial void OnLogIDChanging(int value);
        partial void OnLogIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryLog"/> class.
        /// </summary>
        public CategoryLog()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Category"/> entity.
        /// </summary>
        [Association("Category_CategoryLog", "CategoryID", "CategoryID", IsForeignKey=true)]
        [XmlIgnore()]
        public Category Category
        {
            get
            {
                if ((this._category == null))
                {
                    this._category = new EntityRef<Category>(this, "Category", this.FilterCategory);
                }
                return this._category.Entity;
            }
            set
            {
                Category previous = this.Category;
                if ((previous != value))
                {
                    this.ValidateProperty("Category", value);
                    if ((previous != null))
                    {
                        this._category.Entity = null;
                        previous.CategoryLogs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CategoryID = value.CategoryID;
                    }
                    else
                    {
                        this.CategoryID = default(int);
                    }
                    this._category.Entity = value;
                    if ((value != null))
                    {
                        value.CategoryLogs.Add(this);
                    }
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int CategoryID
        {
            get
            {
                return this._categoryID;
            }
            set
            {
                if ((this._categoryID != value))
                {
                    this.OnCategoryIDChanging(value);
                    this.RaiseDataMemberChanging("CategoryID");
                    this.ValidateProperty("CategoryID", value);
                    this._categoryID = value;
                    this.RaiseDataMemberChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryLogID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CategoryLogID
        {
            get
            {
                return this._categoryLogID;
            }
            set
            {
                if ((this._categoryLogID != value))
                {
                    this.OnCategoryLogIDChanging(value);
                    this.ValidateProperty("CategoryLogID", value);
                    this._categoryLogID = value;
                    this.RaisePropertyChanged("CategoryLogID");
                    this.OnCategoryLogIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Log"/> entity.
        /// </summary>
        [Association("Log_CategoryLog", "LogID", "LogID", IsForeignKey=true)]
        [XmlIgnore()]
        public Log Log
        {
            get
            {
                if ((this._log == null))
                {
                    this._log = new EntityRef<Log>(this, "Log", this.FilterLog);
                }
                return this._log.Entity;
            }
            set
            {
                Log previous = this.Log;
                if ((previous != value))
                {
                    this.ValidateProperty("Log", value);
                    if ((previous != null))
                    {
                        this._log.Entity = null;
                        previous.CategoryLogs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.LogID = value.LogID;
                    }
                    else
                    {
                        this.LogID = default(int);
                    }
                    this._log.Entity = value;
                    if ((value != null))
                    {
                        value.CategoryLogs.Add(this);
                    }
                    this.RaisePropertyChanged("Log");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LogID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int LogID
        {
            get
            {
                return this._logID;
            }
            set
            {
                if ((this._logID != value))
                {
                    this.OnLogIDChanging(value);
                    this.RaiseDataMemberChanging("LogID");
                    this.ValidateProperty("LogID", value);
                    this._logID = value;
                    this.RaiseDataMemberChanged("LogID");
                    this.OnLogIDChanged();
                }
            }
        }
        
        private bool FilterCategory(Category entity)
        {
            return (entity.CategoryID == this.CategoryID);
        }
        
        private bool FilterLog(Log entity)
        {
            return (entity.LogID == this.LogID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._categoryLogID;
        }
    }
    
    /// <summary>
    /// The 'Channel' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class Channel : Entity
    {
        
        private Guid _channelID;
        
        private string _channelName;
        
        private EntityRef<ChannelType> _channelType;
        
        private Nullable<Guid> _channelTypeID;
        
        private EntityCollection<Message> _messages;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnChannelIDChanging(Guid value);
        partial void OnChannelIDChanged();
        partial void OnChannelNameChanging(string value);
        partial void OnChannelNameChanged();
        partial void OnChannelTypeIDChanging(Nullable<Guid> value);
        partial void OnChannelTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Channel"/> class.
        /// </summary>
        public Channel()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ChannelID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ChannelID
        {
            get
            {
                return this._channelID;
            }
            set
            {
                if ((this._channelID != value))
                {
                    this.OnChannelIDChanging(value);
                    this.ValidateProperty("ChannelID", value);
                    this._channelID = value;
                    this.RaisePropertyChanged("ChannelID");
                    this.OnChannelIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChannelName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string ChannelName
        {
            get
            {
                return this._channelName;
            }
            set
            {
                if ((this._channelName != value))
                {
                    this.OnChannelNameChanging(value);
                    this.RaiseDataMemberChanging("ChannelName");
                    this.ValidateProperty("ChannelName", value);
                    this._channelName = value;
                    this.RaiseDataMemberChanged("ChannelName");
                    this.OnChannelNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ChannelType"/> entity.
        /// </summary>
        [Association("ChannelType_Channel", "ChannelTypeID", "ChannelTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public ChannelType ChannelType
        {
            get
            {
                if ((this._channelType == null))
                {
                    this._channelType = new EntityRef<ChannelType>(this, "ChannelType", this.FilterChannelType);
                }
                return this._channelType.Entity;
            }
            set
            {
                ChannelType previous = this.ChannelType;
                if ((previous != value))
                {
                    this.ValidateProperty("ChannelType", value);
                    if ((previous != null))
                    {
                        this._channelType.Entity = null;
                        previous.Channels.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ChannelTypeID = value.ChannelTypeID;
                    }
                    else
                    {
                        this.ChannelTypeID = default(Nullable<Guid>);
                    }
                    this._channelType.Entity = value;
                    if ((value != null))
                    {
                        value.Channels.Add(this);
                    }
                    this.RaisePropertyChanged("ChannelType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChannelTypeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> ChannelTypeID
        {
            get
            {
                return this._channelTypeID;
            }
            set
            {
                if ((this._channelTypeID != value))
                {
                    this.OnChannelTypeIDChanging(value);
                    this.RaiseDataMemberChanging("ChannelTypeID");
                    this.ValidateProperty("ChannelTypeID", value);
                    this._channelTypeID = value;
                    this.RaiseDataMemberChanged("ChannelTypeID");
                    this.OnChannelTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Message"/> entities.
        /// </summary>
        [Association("Channel_Message", "ChannelID", "ChannelID")]
        [XmlIgnore()]
        public EntityCollection<Message> Messages
        {
            get
            {
                if ((this._messages == null))
                {
                    this._messages = new EntityCollection<Message>(this, "Messages", this.FilterMessages, this.AttachMessages, this.DetachMessages);
                }
                return this._messages;
            }
        }
        
        private bool FilterChannelType(ChannelType entity)
        {
            return (entity.ChannelTypeID == this.ChannelTypeID);
        }
        
        private void AttachMessages(Message entity)
        {
            entity.Channel = this;
        }
        
        private void DetachMessages(Message entity)
        {
            entity.Channel = null;
        }
        
        private bool FilterMessages(Message entity)
        {
            return (entity.ChannelID == this.ChannelID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._channelID;
        }
    }
    
    /// <summary>
    /// The 'ChannelType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class ChannelType : Entity
    {
        
        private EntityCollection<Channel> _channels;
        
        private Guid _channelTypeID;
        
        private string _typeName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnChannelTypeIDChanging(Guid value);
        partial void OnChannelTypeIDChanged();
        partial void OnTypeNameChanging(string value);
        partial void OnTypeNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelType"/> class.
        /// </summary>
        public ChannelType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Channel"/> entities.
        /// </summary>
        [Association("ChannelType_Channel", "ChannelTypeID", "ChannelTypeID")]
        [XmlIgnore()]
        public EntityCollection<Channel> Channels
        {
            get
            {
                if ((this._channels == null))
                {
                    this._channels = new EntityCollection<Channel>(this, "Channels", this.FilterChannels, this.AttachChannels, this.DetachChannels);
                }
                return this._channels;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChannelTypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ChannelTypeID
        {
            get
            {
                return this._channelTypeID;
            }
            set
            {
                if ((this._channelTypeID != value))
                {
                    this.OnChannelTypeIDChanging(value);
                    this.ValidateProperty("ChannelTypeID", value);
                    this._channelTypeID = value;
                    this.RaisePropertyChanged("ChannelTypeID");
                    this.OnChannelTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TypeName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string TypeName
        {
            get
            {
                return this._typeName;
            }
            set
            {
                if ((this._typeName != value))
                {
                    this.OnTypeNameChanging(value);
                    this.RaiseDataMemberChanging("TypeName");
                    this.ValidateProperty("TypeName", value);
                    this._typeName = value;
                    this.RaiseDataMemberChanged("TypeName");
                    this.OnTypeNameChanged();
                }
            }
        }
        
        private void AttachChannels(Channel entity)
        {
            entity.ChannelType = this;
        }
        
        private void DetachChannels(Channel entity)
        {
            entity.ChannelType = null;
        }
        
        private bool FilterChannels(Channel entity)
        {
            return (entity.ChannelTypeID == this.ChannelTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._channelTypeID;
        }
    }
    
    /// <summary>
    /// The 'Conversation' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class Conversation : Entity
    {
        
        private Guid _conversationID;
        
        private string _conversationName;
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private bool _isConvSelected;
        
        private bool _isNewConversation;
        
        private EntityCollection<Message> _messages;
        
        private EntityRef<Negotiation> _negotiation;
        
        private Guid _negotiationID;
        
        private EntityRef<User> _user;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnConversationIDChanging(Guid value);
        partial void OnConversationIDChanged();
        partial void OnConversationNameChanging(string value);
        partial void OnConversationNameChanged();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnIsConvSelectedChanging(bool value);
        partial void OnIsConvSelectedChanged();
        partial void OnIsNewConversationChanging(bool value);
        partial void OnIsNewConversationChanged();
        partial void OnNegotiationIDChanging(Guid value);
        partial void OnNegotiationIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Conversation"/> class.
        /// </summary>
        public Conversation()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ConversationID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ConversationID
        {
            get
            {
                return this._conversationID;
            }
            set
            {
                if ((this._conversationID != value))
                {
                    this.OnConversationIDChanging(value);
                    this.ValidateProperty("ConversationID", value);
                    this._conversationID = value;
                    this.RaisePropertyChanged("ConversationID");
                    this.OnConversationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ConversationName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string ConversationName
        {
            get
            {
                return this._conversationName;
            }
            set
            {
                if ((this._conversationName != value))
                {
                    this.OnConversationNameChanging(value);
                    this.RaiseDataMemberChanging("ConversationName");
                    this.ValidateProperty("ConversationName", value);
                    this._conversationName = value;
                    this.RaiseDataMemberChanged("ConversationName");
                    this.OnConversationNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsConvSelected' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(null)]
        public bool IsConvSelected
        {
            get
            {
                return this._isConvSelected;
            }
            set
            {
                if ((this._isConvSelected != value))
                {
                    this.OnIsConvSelectedChanging(value);
                    this.RaiseDataMemberChanging("IsConvSelected");
                    this.ValidateProperty("IsConvSelected", value);
                    this._isConvSelected = value;
                    this.RaiseDataMemberChanged("IsConvSelected");
                    this.OnIsConvSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsNewConversation' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(null)]
        public bool IsNewConversation
        {
            get
            {
                return this._isNewConversation;
            }
            set
            {
                if ((this._isNewConversation != value))
                {
                    this.OnIsNewConversationChanging(value);
                    this.RaiseDataMemberChanging("IsNewConversation");
                    this.ValidateProperty("IsNewConversation", value);
                    this._isNewConversation = value;
                    this.RaiseDataMemberChanged("IsNewConversation");
                    this.OnIsNewConversationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Message"/> entities.
        /// </summary>
        [Association("Conversation_Message", "ConversationID", "ConversationID")]
        [XmlIgnore()]
        public EntityCollection<Message> Messages
        {
            get
            {
                if ((this._messages == null))
                {
                    this._messages = new EntityCollection<Message>(this, "Messages", this.FilterMessages, this.AttachMessages, this.DetachMessages);
                }
                return this._messages;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Negotiation"/> entity.
        /// </summary>
        [Association("Negotiation_Conversation", "NegotiationID", "NegotiationID", IsForeignKey=true)]
        [XmlIgnore()]
        public Negotiation Negotiation
        {
            get
            {
                if ((this._negotiation == null))
                {
                    this._negotiation = new EntityRef<Negotiation>(this, "Negotiation", this.FilterNegotiation);
                }
                return this._negotiation.Entity;
            }
            set
            {
                Negotiation previous = this.Negotiation;
                if ((previous != value))
                {
                    this.ValidateProperty("Negotiation", value);
                    if ((previous != null))
                    {
                        this._negotiation.Entity = null;
                        previous.Conversations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.NegotiationID = value.NegotiationID;
                    }
                    else
                    {
                        this.NegotiationID = default(Guid);
                    }
                    this._negotiation.Entity = value;
                    if ((value != null))
                    {
                        value.Conversations.Add(this);
                    }
                    this.RaisePropertyChanged("Negotiation");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid NegotiationID
        {
            get
            {
                return this._negotiationID;
            }
            set
            {
                if ((this._negotiationID != value))
                {
                    this.OnNegotiationIDChanging(value);
                    this.RaiseDataMemberChanging("NegotiationID");
                    this.ValidateProperty("NegotiationID", value);
                    this._negotiationID = value;
                    this.RaiseDataMemberChanged("NegotiationID");
                    this.OnNegotiationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="User"/> entity.
        /// </summary>
        [Association("User_Conversation", "DeletedBy", "UserID", IsForeignKey=true)]
        [XmlIgnore()]
        public User User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<User>(this, "User", this.FilterUser);
                }
                return this._user.Entity;
            }
            set
            {
                User previous = this.User;
                if ((previous != value))
                {
                    this.ValidateProperty("User", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.Conversations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DeletedBy = value.UserID;
                    }
                    else
                    {
                        this.DeletedBy = default(Nullable<Guid>);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.Conversations.Add(this);
                    }
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        private void AttachMessages(Message entity)
        {
            entity.Conversation = this;
        }
        
        private void DetachMessages(Message entity)
        {
            entity.Conversation = null;
        }
        
        private bool FilterMessages(Message entity)
        {
            return (entity.ConversationID == this.ConversationID);
        }
        
        private bool FilterNegotiation(Negotiation entity)
        {
            return (entity.NegotiationID == this.NegotiationID);
        }
        
        private bool FilterUser(User entity)
        {
            return (entity.UserID == this.DeletedBy);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._conversationID;
        }
    }
    
    /// <summary>
    /// The 'Country' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class Country : Entity
    {
        
        private Guid _countryID;
        
        private string _countryName;
        
        private EntityCollection<User> _user;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCountryIDChanging(Guid value);
        partial void OnCountryIDChanged();
        partial void OnCountryNameChanging(string value);
        partial void OnCountryNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Country"/> class.
        /// </summary>
        public Country()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CountryID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid CountryID
        {
            get
            {
                return this._countryID;
            }
            set
            {
                if ((this._countryID != value))
                {
                    this.OnCountryIDChanging(value);
                    this.ValidateProperty("CountryID", value);
                    this._countryID = value;
                    this.RaisePropertyChanged("CountryID");
                    this.OnCountryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CountryName' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string CountryName
        {
            get
            {
                return this._countryName;
            }
            set
            {
                if ((this._countryName != value))
                {
                    this.OnCountryNameChanging(value);
                    this.RaiseDataMemberChanging("CountryName");
                    this.ValidateProperty("CountryName", value);
                    this._countryName = value;
                    this.RaiseDataMemberChanged("CountryName");
                    this.OnCountryNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="User"/> entities.
        /// </summary>
        [Association("Country_User", "CountryID", "CountryID")]
        [XmlIgnore()]
        public EntityCollection<User> User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityCollection<User>(this, "User", this.FilterUser, this.AttachUser, this.DetachUser);
                }
                return this._user;
            }
        }
        
        private void AttachUser(User entity)
        {
            entity.Country = this;
        }
        
        private void DetachUser(User entity)
        {
            entity.Country = null;
        }
        
        private bool FilterUser(User entity)
        {
            return (entity.CountryID == this.CountryID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._countryID;
        }
    }
    
    /// <summary>
    /// The 'Culture' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class Culture : Entity
    {
        
        private int _cultureID;
        
        private string _cultureName;
        
        private EntityCollection<User> _users;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCultureIDChanging(int value);
        partial void OnCultureIDChanged();
        partial void OnCultureNameChanging(string value);
        partial void OnCultureNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Culture"/> class.
        /// </summary>
        public Culture()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CultureID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CultureID
        {
            get
            {
                return this._cultureID;
            }
            set
            {
                if ((this._cultureID != value))
                {
                    this.OnCultureIDChanging(value);
                    this.ValidateProperty("CultureID", value);
                    this._cultureID = value;
                    this.RaisePropertyChanged("CultureID");
                    this.OnCultureIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CultureName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(20)]
        public string CultureName
        {
            get
            {
                return this._cultureName;
            }
            set
            {
                if ((this._cultureName != value))
                {
                    this.OnCultureNameChanging(value);
                    this.RaiseDataMemberChanging("CultureName");
                    this.ValidateProperty("CultureName", value);
                    this._cultureName = value;
                    this.RaiseDataMemberChanged("CultureName");
                    this.OnCultureNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="User"/> entities.
        /// </summary>
        [Association("Culture_User", "CultureID", "CultureID")]
        [XmlIgnore()]
        public EntityCollection<User> Users
        {
            get
            {
                if ((this._users == null))
                {
                    this._users = new EntityCollection<User>(this, "Users", this.FilterUsers, this.AttachUsers, this.DetachUsers);
                }
                return this._users;
            }
        }
        
        private void AttachUsers(User entity)
        {
            entity.Culture = this;
        }
        
        private void DetachUsers(User entity)
        {
            entity.Culture = null;
        }
        
        private bool FilterUsers(User entity)
        {
            return (entity.CultureID == this.CultureID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._cultureID;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'eNegService' domain service.
    /// </summary>
    public sealed partial class eNegContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="eNegContext"/> class.
        /// </summary>
        public eNegContext() : 
                this(new WebDomainClient<IeNegServiceContract>(new Uri("citPOINT-eNeg-Data-Web-eNegService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="eNegContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The eNegService service URI.</param>
        public eNegContext(Uri serviceUri) : 
                this(new WebDomainClient<IeNegServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="eNegContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public eNegContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserLeaveOrganizationResult"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<UserLeaveOrganizationResult> UserLeaveOrganizationResults
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserLeaveOrganizationResult>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="AccountType"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<AccountType> AccountTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<AccountType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ActionType"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<ActionType> ActionTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ActionType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Application"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<Application> Applications
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Application>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserApplicationStatu"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<UserApplicationStatu> UserApplicationStatus
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserApplicationStatu>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Attachement"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<Attachement> Attachements
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Attachement>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Negotiation"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<Negotiation> Negotiations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Negotiation>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Category"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<Category> Categories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Category>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CategoryLog"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<CategoryLog> CategoryLogs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CategoryLog>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Channel"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<Channel> Channels
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Channel>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ChannelType"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<ChannelType> ChannelTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ChannelType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="NegotiationArchive"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<NegotiationArchive> NegotiationArchives
        {
            get
            {
                return base.EntityContainer.GetEntitySet<NegotiationArchive>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Conversation"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<Conversation> Conversations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Conversation>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Country"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<Country> Countries
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Country>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Culture"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<Culture> Cultures
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Culture>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="History"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<History> Histories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<History>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Log"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<Log> Logs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Log>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Message"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<Message> Messages
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Message>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="NegotiationApplicationStatu"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<NegotiationApplicationStatu> NegotiationApplicationStatus
        {
            get
            {
                return base.EntityContainer.GetEntitySet<NegotiationApplicationStatu>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="NegotiationOrganization"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<NegotiationOrganization> NegotiationOrganizations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<NegotiationOrganization>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="NegotiationStatu"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<NegotiationStatu> NegotiationStatus
        {
            get
            {
                return base.EntityContainer.GetEntitySet<NegotiationStatu>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Organization"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<Organization> Organizations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Organization>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserOrganization"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<UserOrganization> UserOrganizations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserOrganization>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="OrganizationType"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<OrganizationType> OrganizationTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<OrganizationType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PreferedLanguage"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<PreferedLanguage> PreferedLanguages
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PreferedLanguage>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Profile"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<Profile> Profiles
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Profile>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Right"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<Right> Rights
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Right>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Role"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<Role> Roles
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Role>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RoleRight"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<RoleRight> RoleRights
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RoleRight>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SecurityQuestion"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<SecurityQuestion> SecurityQuestions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SecurityQuestion>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserOperation"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<UserOperation> UserOperations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserOperation>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserProfileStatisticalsResult"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<UserProfileStatisticalsResult> UserProfileStatisticalsResults
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserProfileStatisticalsResult>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserRole"/> entities that have been loaded into this <see cref="eNegContext"/> instance.
        /// </summary>
        public EntitySet<UserRole> UserRoles
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserRole>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserLeaveOrganizationResult"/> entities using the 'CanUserLeaveOrganization' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <param name="organizationID">The value for the 'organizationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserLeaveOrganizationResult"/> entities.</returns>
        public EntityQuery<UserLeaveOrganizationResult> CanUserLeaveOrganizationQuery(Guid userID, Guid organizationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("organizationID", organizationID);
            this.ValidateMethod("CanUserLeaveOrganizationQuery", parameters);
            return base.CreateQuery<UserLeaveOrganizationResult>("CanUserLeaveOrganization", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'DeleteUserOperationByUserID' query.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> DeleteUserOperationByUserIDQuery(Guid UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            this.ValidateMethod("DeleteUserOperationByUserIDQuery", parameters);
            return base.CreateQuery<User>("DeleteUserOperationByUserID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'FindUser' query.
        /// </summary>
        /// <param name="KeyWord">The value for the 'KeyWord' parameter of the query.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <param name="IsForPublicProfile">The value for the 'IsForPublicProfile' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> FindUserQuery(string KeyWord, Guid UserID, bool IsForPublicProfile)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("KeyWord", KeyWord);
            parameters.Add("UserID", UserID);
            parameters.Add("IsForPublicProfile", IsForPublicProfile);
            this.ValidateMethod("FindUserQuery", parameters);
            return base.CreateQuery<User>("FindUser", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="AccountType"/> entities using the 'GetAccountType' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="AccountType"/> entities.</returns>
        public EntityQuery<AccountType> GetAccountTypeQuery()
        {
            this.ValidateMethod("GetAccountTypeQuery", null);
            return base.CreateQuery<AccountType>("GetAccountType", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ActionType"/> entities using the 'GetActionTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ActionType"/> entities.</returns>
        public EntityQuery<ActionType> GetActionTypesQuery()
        {
            this.ValidateMethod("GetActionTypesQuery", null);
            return base.CreateQuery<ActionType>("GetActionTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Application"/> entities using the 'GetActiveSupportApplicationsForConversation' query.
        /// </summary>
        /// <param name="conversationID">The value for the 'conversationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Application"/> entities.</returns>
        public EntityQuery<Application> GetActiveSupportApplicationsForConversationQuery(Guid conversationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationID", conversationID);
            this.ValidateMethod("GetActiveSupportApplicationsForConversationQuery", parameters);
            return base.CreateQuery<Application>("GetActiveSupportApplicationsForConversation", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Application"/> entities using the 'GetApplications' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Application"/> entities.</returns>
        public EntityQuery<Application> GetApplicationsQuery()
        {
            this.ValidateMethod("GetApplicationsQuery", null);
            return base.CreateQuery<Application>("GetApplications", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserApplicationStatu"/> entities using the 'GetAppsActiveForDM' query.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserApplicationStatu"/> entities.</returns>
        public EntityQuery<UserApplicationStatu> GetAppsActiveForDMQuery(Guid UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            this.ValidateMethod("GetAppsActiveForDMQuery", parameters);
            return base.CreateQuery<UserApplicationStatu>("GetAppsActiveForDM", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Attachement"/> entities using the 'GetAttachements' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Attachement"/> entities.</returns>
        public EntityQuery<Attachement> GetAttachementsQuery()
        {
            this.ValidateMethod("GetAttachementsQuery", null);
            return base.CreateQuery<Attachement>("GetAttachements", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Negotiation"/> entities using the 'GetAvailableNegotiationsToAnalysis' query.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <param name="AppName">The value for the 'AppName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Negotiation"/> entities.</returns>
        public EntityQuery<Negotiation> GetAvailableNegotiationsToAnalysisQuery(Guid UserID, string AppName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            parameters.Add("AppName", AppName);
            this.ValidateMethod("GetAvailableNegotiationsToAnalysisQuery", parameters);
            return base.CreateQuery<Negotiation>("GetAvailableNegotiationsToAnalysis", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Category"/> entities using the 'GetCategories' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Category"/> entities.</returns>
        public EntityQuery<Category> GetCategoriesQuery()
        {
            this.ValidateMethod("GetCategoriesQuery", null);
            return base.CreateQuery<Category>("GetCategories", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CategoryLog"/> entities using the 'GetCategoryLogs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CategoryLog"/> entities.</returns>
        public EntityQuery<CategoryLog> GetCategoryLogsQuery()
        {
            this.ValidateMethod("GetCategoryLogsQuery", null);
            return base.CreateQuery<CategoryLog>("GetCategoryLogs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Channel"/> entities using the 'GetChannels' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Channel"/> entities.</returns>
        public EntityQuery<Channel> GetChannelsQuery()
        {
            this.ValidateMethod("GetChannelsQuery", null);
            return base.CreateQuery<Channel>("GetChannels", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ChannelType"/> entities using the 'GetChannelTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ChannelType"/> entities.</returns>
        public EntityQuery<ChannelType> GetChannelTypesQuery()
        {
            this.ValidateMethod("GetChannelTypesQuery", null);
            return base.CreateQuery<ChannelType>("GetChannelTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Negotiation"/> entities using the 'GetClosedNegoiationsForArchive' query.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <param name="archiveYear">The value for the 'archiveYear' parameter of the query.</param>
        /// <param name="archiveMonth">The value for the 'archiveMonth' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Negotiation"/> entities.</returns>
        public EntityQuery<Negotiation> GetClosedNegoiationsForArchiveQuery(Guid UserID, int archiveYear, int archiveMonth)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            parameters.Add("archiveYear", archiveYear);
            parameters.Add("archiveMonth", archiveMonth);
            this.ValidateMethod("GetClosedNegoiationsForArchiveQuery", parameters);
            return base.CreateQuery<Negotiation>("GetClosedNegoiationsForArchive", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NegotiationArchive"/> entities using the 'GetClosedNegotiationArchive' query.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NegotiationArchive"/> entities.</returns>
        public EntityQuery<NegotiationArchive> GetClosedNegotiationArchiveQuery(Guid UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            this.ValidateMethod("GetClosedNegotiationArchiveQuery", parameters);
            return base.CreateQuery<NegotiationArchive>("GetClosedNegotiationArchive", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Conversation"/> entities using the 'GetConversations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Conversation"/> entities.</returns>
        public EntityQuery<Conversation> GetConversationsQuery()
        {
            this.ValidateMethod("GetConversationsQuery", null);
            return base.CreateQuery<Conversation>("GetConversations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Conversation"/> entities using the 'GetConversationsByNegotiationID' query.
        /// </summary>
        /// <param name="NegIDs">The value for the 'NegIDs' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Conversation"/> entities.</returns>
        public EntityQuery<Conversation> GetConversationsByNegotiationIDQuery(Guid[] NegIDs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("NegIDs", NegIDs);
            this.ValidateMethod("GetConversationsByNegotiationIDQuery", parameters);
            return base.CreateQuery<Conversation>("GetConversationsByNegotiationID", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Country"/> entities using the 'GetCountry' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Country"/> entities.</returns>
        public EntityQuery<Country> GetCountryQuery()
        {
            this.ValidateMethod("GetCountryQuery", null);
            return base.CreateQuery<Country>("GetCountry", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Culture"/> entities using the 'GetCultures' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Culture"/> entities.</returns>
        public EntityQuery<Culture> GetCulturesQuery()
        {
            this.ValidateMethod("GetCulturesQuery", null);
            return base.CreateQuery<Culture>("GetCultures", null, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="History"/> entities using the 'GetHistories' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="History"/> entities.</returns>
        public EntityQuery<History> GetHistoriesQuery()
        {
            this.ValidateMethod("GetHistoriesQuery", null);
            return base.CreateQuery<History>("GetHistories", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Log"/> entities using the 'GetLogs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Log"/> entities.</returns>
        public EntityQuery<Log> GetLogsQuery()
        {
            this.ValidateMethod("GetLogsQuery", null);
            return base.CreateQuery<Log>("GetLogs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Message"/> entities using the 'GetMessages' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Message"/> entities.</returns>
        public EntityQuery<Message> GetMessagesQuery()
        {
            this.ValidateMethod("GetMessagesQuery", null);
            return base.CreateQuery<Message>("GetMessages", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Message"/> entities using the 'GetMessagesByNegotiationID' query.
        /// </summary>
        /// <param name="NegotiationIDS">The value for the 'NegotiationIDS' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Message"/> entities.</returns>
        public EntityQuery<Message> GetMessagesByNegotiationIDQuery(Nullable<Guid>[] NegotiationIDS)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("NegotiationIDS", NegotiationIDS);
            this.ValidateMethod("GetMessagesByNegotiationIDQuery", parameters);
            return base.CreateQuery<Message>("GetMessagesByNegotiationID", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Message"/> entities using the 'GetMessagesByNegotiationIDForApps' query.
        /// </summary>
        /// <param name="NegotiationIDS">The value for the 'NegotiationIDS' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Message"/> entities.</returns>
        public EntityQuery<Message> GetMessagesByNegotiationIDForAppsQuery(Nullable<Guid>[] NegotiationIDS)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("NegotiationIDS", NegotiationIDS);
            this.ValidateMethod("GetMessagesByNegotiationIDForAppsQuery", parameters);
            return base.CreateQuery<Message>("GetMessagesByNegotiationIDForApps", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NegotiationApplicationStatu"/> entities using the 'GetNegotiationApplicationStatus' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NegotiationApplicationStatu"/> entities.</returns>
        public EntityQuery<NegotiationApplicationStatu> GetNegotiationApplicationStatusQuery()
        {
            this.ValidateMethod("GetNegotiationApplicationStatusQuery", null);
            return base.CreateQuery<NegotiationApplicationStatu>("GetNegotiationApplicationStatus", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NegotiationApplicationStatu"/> entities using the 'GetNegotiationApplicationStatusByNegotiationID' query.
        /// </summary>
        /// <param name="NegIDs">The value for the 'NegIDs' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NegotiationApplicationStatu"/> entities.</returns>
        public EntityQuery<NegotiationApplicationStatu> GetNegotiationApplicationStatusByNegotiationIDQuery(Guid[] NegIDs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("NegIDs", NegIDs);
            this.ValidateMethod("GetNegotiationApplicationStatusByNegotiationIDQuery", parameters);
            return base.CreateQuery<NegotiationApplicationStatu>("GetNegotiationApplicationStatusByNegotiationID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NegotiationOrganization"/> entities using the 'GetNegotiationOrganizations' query.
        /// </summary>
        /// <param name="negotiationIDList">The value for the 'negotiationIDList' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NegotiationOrganization"/> entities.</returns>
        public EntityQuery<NegotiationOrganization> GetNegotiationOrganizationsQuery(Guid[] negotiationIDList)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationIDList", negotiationIDList);
            this.ValidateMethod("GetNegotiationOrganizationsQuery", parameters);
            return base.CreateQuery<NegotiationOrganization>("GetNegotiationOrganizations", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Negotiation"/> entities using the 'GetNegotiations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Negotiation"/> entities.</returns>
        public EntityQuery<Negotiation> GetNegotiationsQuery()
        {
            this.ValidateMethod("GetNegotiationsQuery", null);
            return base.CreateQuery<Negotiation>("GetNegotiations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Negotiation"/> entities using the 'GetNegotiationsByListOfIDs' query.
        /// </summary>
        /// <param name="NegIDs">The value for the 'NegIDs' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Negotiation"/> entities.</returns>
        public EntityQuery<Negotiation> GetNegotiationsByListOfIDsQuery(Guid[] NegIDs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("NegIDs", NegIDs);
            this.ValidateMethod("GetNegotiationsByListOfIDsQuery", parameters);
            return base.CreateQuery<Negotiation>("GetNegotiationsByListOfIDs", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Negotiation"/> entities using the 'GetNegotiationsByUserID' query.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Negotiation"/> entities.</returns>
        public EntityQuery<Negotiation> GetNegotiationsByUserIDQuery(Guid UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            this.ValidateMethod("GetNegotiationsByUserIDQuery", parameters);
            return base.CreateQuery<Negotiation>("GetNegotiationsByUserID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NegotiationStatu"/> entities using the 'GetNegotiationStatus' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NegotiationStatu"/> entities.</returns>
        public EntityQuery<NegotiationStatu> GetNegotiationStatusQuery()
        {
            this.ValidateMethod("GetNegotiationStatusQuery", null);
            return base.CreateQuery<NegotiationStatu>("GetNegotiationStatus", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Organization"/> entities using the 'GetOrganizationByID' query.
        /// </summary>
        /// <param name="organizationID">The value for the 'organizationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Organization"/> entities.</returns>
        public EntityQuery<Organization> GetOrganizationByIDQuery(Guid organizationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("organizationID", organizationID);
            this.ValidateMethod("GetOrganizationByIDQuery", parameters);
            return base.CreateQuery<Organization>("GetOrganizationByID", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Organization"/> entities using the 'GetOrganizationByItsOwnerID' query.
        /// </summary>
        /// <param name="OwnerID">The value for the 'OwnerID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Organization"/> entities.</returns>
        public EntityQuery<Organization> GetOrganizationByItsOwnerIDQuery(Guid OwnerID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("OwnerID", OwnerID);
            this.ValidateMethod("GetOrganizationByItsOwnerIDQuery", parameters);
            return base.CreateQuery<Organization>("GetOrganizationByItsOwnerID", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'GetOrganizationMembers' query.
        /// </summary>
        /// <param name="organizationID">The value for the 'organizationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> GetOrganizationMembersQuery(Guid organizationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("organizationID", organizationID);
            this.ValidateMethod("GetOrganizationMembersQuery", parameters);
            return base.CreateQuery<User>("GetOrganizationMembers", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserOrganization"/> entities using the 'GetOrganizationMembersStatus' query.
        /// </summary>
        /// <param name="organizationID">The value for the 'organizationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserOrganization"/> entities.</returns>
        public EntityQuery<UserOrganization> GetOrganizationMembersStatusQuery(Guid organizationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("organizationID", organizationID);
            this.ValidateMethod("GetOrganizationMembersStatusQuery", parameters);
            return base.CreateQuery<UserOrganization>("GetOrganizationMembersStatus", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Organization"/> entities using the 'GetOrganizations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Organization"/> entities.</returns>
        public EntityQuery<Organization> GetOrganizationsQuery()
        {
            this.ValidateMethod("GetOrganizationsQuery", null);
            return base.CreateQuery<Organization>("GetOrganizations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Organization"/> entities using the 'GetOrganizationsForUser' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Organization"/> entities.</returns>
        public EntityQuery<Organization> GetOrganizationsForUserQuery(Guid userID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            this.ValidateMethod("GetOrganizationsForUserQuery", parameters);
            return base.CreateQuery<Organization>("GetOrganizationsForUser", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'GetOrganizationsOwners' query.
        /// </summary>
        /// <param name="organizationIDs">The value for the 'organizationIDs' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> GetOrganizationsOwnersQuery(Guid[] organizationIDs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("organizationIDs", organizationIDs);
            this.ValidateMethod("GetOrganizationsOwnersQuery", parameters);
            return base.CreateQuery<User>("GetOrganizationsOwners", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OrganizationType"/> entities using the 'GetOrganizationTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OrganizationType"/> entities.</returns>
        public EntityQuery<OrganizationType> GetOrganizationTypesQuery()
        {
            this.ValidateMethod("GetOrganizationTypesQuery", null);
            return base.CreateQuery<OrganizationType>("GetOrganizationTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PreferedLanguage"/> entities using the 'GetPreferedLanguage' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PreferedLanguage"/> entities.</returns>
        public EntityQuery<PreferedLanguage> GetPreferedLanguageQuery()
        {
            this.ValidateMethod("GetPreferedLanguageQuery", null);
            return base.CreateQuery<PreferedLanguage>("GetPreferedLanguage", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Profile"/> entities using the 'GetProfile' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Profile"/> entities.</returns>
        public EntityQuery<Profile> GetProfileQuery()
        {
            this.ValidateMethod("GetProfileQuery", null);
            return base.CreateQuery<Profile>("GetProfile", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Negotiation"/> entities using the 'GetPublishedNegoiations' query.
        /// </summary>
        /// <param name="NegStatus">The value for the 'NegStatus' parameter of the query.</param>
        /// <param name="NegOwner">The value for the 'NegOwner' parameter of the query.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <param name="archiveYear">The value for the 'archiveYear' parameter of the query.</param>
        /// <param name="archiveMonth">The value for the 'archiveMonth' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Negotiation"/> entities.</returns>
        public EntityQuery<Negotiation> GetPublishedNegoiationsQuery(byte NegStatus, byte NegOwner, Guid UserID, int archiveYear, int archiveMonth)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("NegStatus", NegStatus);
            parameters.Add("NegOwner", NegOwner);
            parameters.Add("UserID", UserID);
            parameters.Add("archiveYear", archiveYear);
            parameters.Add("archiveMonth", archiveMonth);
            this.ValidateMethod("GetPublishedNegoiationsQuery", parameters);
            return base.CreateQuery<Negotiation>("GetPublishedNegoiations", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NegotiationArchive"/> entities using the 'GetPublishedNegotiationArchive' query.
        /// </summary>
        /// <param name="NegStatus">The value for the 'NegStatus' parameter of the query.</param>
        /// <param name="NegOwner">The value for the 'NegOwner' parameter of the query.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NegotiationArchive"/> entities.</returns>
        public EntityQuery<NegotiationArchive> GetPublishedNegotiationArchiveQuery(byte NegStatus, byte NegOwner, Guid UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("NegStatus", NegStatus);
            parameters.Add("NegOwner", NegOwner);
            parameters.Add("UserID", UserID);
            this.ValidateMethod("GetPublishedNegotiationArchiveQuery", parameters);
            return base.CreateQuery<NegotiationArchive>("GetPublishedNegotiationArchive", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Right"/> entities using the 'GetRight' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Right"/> entities.</returns>
        public EntityQuery<Right> GetRightQuery()
        {
            this.ValidateMethod("GetRightQuery", null);
            return base.CreateQuery<Right>("GetRight", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Role"/> entities using the 'GetRole' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Role"/> entities.</returns>
        public EntityQuery<Role> GetRoleQuery()
        {
            this.ValidateMethod("GetRoleQuery", null);
            return base.CreateQuery<Role>("GetRole", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RoleRight"/> entities using the 'GetRoleRight' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RoleRight"/> entities.</returns>
        public EntityQuery<RoleRight> GetRoleRightQuery()
        {
            this.ValidateMethod("GetRoleRightQuery", null);
            return base.CreateQuery<RoleRight>("GetRoleRight", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SecurityQuestion"/> entities using the 'GetSecurityQuestion' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SecurityQuestion"/> entities.</returns>
        public EntityQuery<SecurityQuestion> GetSecurityQuestionQuery()
        {
            this.ValidateMethod("GetSecurityQuestionQuery", null);
            return base.CreateQuery<SecurityQuestion>("GetSecurityQuestion", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserApplicationStatu"/> entities using the 'GetUserApplicationStatus' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserApplicationStatu"/> entities.</returns>
        public EntityQuery<UserApplicationStatu> GetUserApplicationStatusQuery()
        {
            this.ValidateMethod("GetUserApplicationStatusQuery", null);
            return base.CreateQuery<UserApplicationStatu>("GetUserApplicationStatus", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'GetUserByID' query.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> GetUserByIDQuery(Guid UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            this.ValidateMethod("GetUserByIDQuery", parameters);
            return base.CreateQuery<User>("GetUserByID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'GetUserByOperationString' query.
        /// </summary>
        /// <param name="OperationString">The value for the 'OperationString' parameter of the query.</param>
        /// <param name="OperationType">The value for the 'OperationType' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> GetUserByOperationStringQuery(string OperationString, byte OperationType)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("OperationString", OperationString);
            parameters.Add("OperationType", OperationType);
            this.ValidateMethod("GetUserByOperationStringQuery", parameters);
            return base.CreateQuery<User>("GetUserByOperationString", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserOperation"/> entities using the 'GetUserOperations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserOperation"/> entities.</returns>
        public EntityQuery<UserOperation> GetUserOperationsQuery()
        {
            this.ValidateMethod("GetUserOperationsQuery", null);
            return base.CreateQuery<UserOperation>("GetUserOperations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserOrganization"/> entities using the 'GetUserOrganizationsForOwnersUsers' query.
        /// </summary>
        /// <param name="usersIDs">The value for the 'usersIDs' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserOrganization"/> entities.</returns>
        public EntityQuery<UserOrganization> GetUserOrganizationsForOwnersUsersQuery(IEnumerable<Guid> usersIDs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("usersIDs", usersIDs);
            this.ValidateMethod("GetUserOrganizationsForOwnersUsersQuery", parameters);
            return base.CreateQuery<UserOrganization>("GetUserOrganizationsForOwnersUsers", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserOrganization"/> entities using the 'GetUserOrganizationsForUser' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserOrganization"/> entities.</returns>
        public EntityQuery<UserOrganization> GetUserOrganizationsForUserQuery(Guid userID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            this.ValidateMethod("GetUserOrganizationsForUserQuery", parameters);
            return base.CreateQuery<UserOrganization>("GetUserOrganizationsForUser", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserProfileStatisticalsResult"/> entities using the 'GetUserProfileStatisticals' query.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserProfileStatisticalsResult"/> entities.</returns>
        public EntityQuery<UserProfileStatisticalsResult> GetUserProfileStatisticalsQuery(Guid UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            this.ValidateMethod("GetUserProfileStatisticalsQuery", parameters);
            return base.CreateQuery<UserProfileStatisticalsResult>("GetUserProfileStatisticals", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserRole"/> entities using the 'GetUserRole' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserRole"/> entities.</returns>
        public EntityQuery<UserRole> GetUserRoleQuery()
        {
            this.ValidateMethod("GetUserRoleQuery", null);
            return base.CreateQuery<UserRole>("GetUserRole", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'MakeUserOffline' query.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> MakeUserOfflineQuery(Nullable<Guid> UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            this.ValidateMethod("MakeUserOfflineQuery", parameters);
            return base.CreateQuery<User>("MakeUserOffline", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'MakeUserOnline' query.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <param name="IPAddress">The value for the 'IPAddress' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> MakeUserOnlineQuery(Nullable<Guid> UserID, string IPAddress)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            parameters.Add("IPAddress", IPAddress);
            this.ValidateMethod("MakeUserOnlineQuery", parameters);
            return base.CreateQuery<User>("MakeUserOnline", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserApplicationStatu"/> entities using the 'RetrieveApplicationDMStatus' query.
        /// </summary>
        /// <param name="AppName">The value for the 'AppName' parameter of the query.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserApplicationStatu"/> entities.</returns>
        public EntityQuery<UserApplicationStatu> RetrieveApplicationDMStatusQuery(string AppName, Guid UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("AppName", AppName);
            parameters.Add("UserID", UserID);
            this.ValidateMethod("RetrieveApplicationDMStatusQuery", parameters);
            return base.CreateQuery<UserApplicationStatu>("RetrieveApplicationDMStatus", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserApplicationStatu"/> entities using the 'UpdateDataMatchingStatusInAddon' query.
        /// </summary>
        /// <param name="AppName">The value for the 'AppName' parameter of the query.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <param name="IsActive">The value for the 'IsActive' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserApplicationStatu"/> entities.</returns>
        public EntityQuery<UserApplicationStatu> UpdateDataMatchingStatusInAddonQuery(string AppName, Guid UserID, bool IsActive)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("AppName", AppName);
            parameters.Add("UserID", UserID);
            parameters.Add("IsActive", IsActive);
            this.ValidateMethod("UpdateDataMatchingStatusInAddonQuery", parameters);
            return base.CreateQuery<UserApplicationStatu>("UpdateDataMatchingStatusInAddon", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'UpdateReset' query.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> UpdateResetQuery(Nullable<Guid> UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            this.ValidateMethod("UpdateResetQuery", parameters);
            return base.CreateQuery<User>("UpdateReset", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'UpdateUserByConfirmMail' query.
        /// </summary>
        /// <param name="operationString">The value for the 'operationString' parameter of the query.</param>
        /// <param name="operationStringType">The value for the 'operationStringType' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> UpdateUserByConfirmMailQuery(string operationString, byte operationStringType)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("operationString", operationString);
            parameters.Add("operationStringType", operationStringType);
            this.ValidateMethod("UpdateUserByConfirmMailQuery", parameters);
            return base.CreateQuery<User>("UpdateUserByConfirmMail", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'UserCanLogin' query.
        /// </summary>
        /// <param name="UserName">The value for the 'UserName' parameter of the query.</param>
        /// <param name="Password">The value for the 'Password' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> UserCanLoginQuery(string UserName, string Password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserName", UserName);
            parameters.Add("Password", Password);
            this.ValidateMethod("UserCanLoginQuery", parameters);
            return base.CreateQuery<User>("UserCanLogin", parameters, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddMessageToConversation' method of the domain service.
        /// </summary>
        /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <param name="messageContent">The value for the 'messageContent' parameter of this action.</param>
        /// <param name="messageSubject">The value for the 'messageSubject' parameter of this action.</param>
        /// <param name="messageSender">The value for the 'messageSender' parameter of this action.</param>
        /// <param name="messageReceiver">The value for the 'messageReceiver' parameter of this action.</param>
        /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> AddMessageToConversation(string AppName, Guid UserID, Guid conversationID, string messageContent, string messageSubject, string messageSender, string messageReceiver, bool isSent, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("AppName", AppName);
            parameters.Add("UserID", UserID);
            parameters.Add("conversationID", conversationID);
            parameters.Add("messageContent", messageContent);
            parameters.Add("messageSubject", messageSubject);
            parameters.Add("messageSender", messageSender);
            parameters.Add("messageReceiver", messageReceiver);
            parameters.Add("isSent", isSent);
            this.ValidateMethod("AddMessageToConversation", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("AddMessageToConversation", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddMessageToConversation' method of the domain service.
        /// </summary>
        /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <param name="messageContent">The value for the 'messageContent' parameter of this action.</param>
        /// <param name="messageSubject">The value for the 'messageSubject' parameter of this action.</param>
        /// <param name="messageSender">The value for the 'messageSender' parameter of this action.</param>
        /// <param name="messageReceiver">The value for the 'messageReceiver' parameter of this action.</param>
        /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> AddMessageToConversation(string AppName, Guid UserID, Guid conversationID, string messageContent, string messageSubject, string messageSender, string messageReceiver, bool isSent)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("AppName", AppName);
            parameters.Add("UserID", UserID);
            parameters.Add("conversationID", conversationID);
            parameters.Add("messageContent", messageContent);
            parameters.Add("messageSubject", messageSubject);
            parameters.Add("messageSender", messageSender);
            parameters.Add("messageReceiver", messageReceiver);
            parameters.Add("isSent", isSent);
            this.ValidateMethod("AddMessageToConversation", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("AddMessageToConversation", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CanUserSeeMemberProfile' method of the domain service.
        /// </summary>
        /// <param name="currentUserID">The value for the 'currentUserID' parameter of this action.</param>
        /// <param name="memberUserID">The value for the 'memberUserID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> CanUserSeeMemberProfile(Guid currentUserID, Guid memberUserID, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("currentUserID", currentUserID);
            parameters.Add("memberUserID", memberUserID);
            this.ValidateMethod("CanUserSeeMemberProfile", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("CanUserSeeMemberProfile", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CanUserSeeMemberProfile' method of the domain service.
        /// </summary>
        /// <param name="currentUserID">The value for the 'currentUserID' parameter of this action.</param>
        /// <param name="memberUserID">The value for the 'memberUserID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> CanUserSeeMemberProfile(Guid currentUserID, Guid memberUserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("currentUserID", currentUserID);
            parameters.Add("memberUserID", memberUserID);
            this.ValidateMethod("CanUserSeeMemberProfile", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("CanUserSeeMemberProfile", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CheckOnNegotiationRepeat' method of the domain service.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
        /// <param name="negotiationName">The value for the 'negotiationName' parameter of this action.</param>
        /// <param name="userID">The value for the 'userID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<int>> CheckOnNegotiationRepeat(Guid negotiationID, string negotiationName, Guid userID, Action<InvokeOperation<Nullable<int>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            parameters.Add("negotiationName", negotiationName);
            parameters.Add("userID", userID);
            this.ValidateMethod("CheckOnNegotiationRepeat", parameters);
            return ((InvokeOperation<Nullable<int>>)(this.InvokeOperation("CheckOnNegotiationRepeat", typeof(Nullable<int>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CheckOnNegotiationRepeat' method of the domain service.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
        /// <param name="negotiationName">The value for the 'negotiationName' parameter of this action.</param>
        /// <param name="userID">The value for the 'userID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<int>> CheckOnNegotiationRepeat(Guid negotiationID, string negotiationName, Guid userID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            parameters.Add("negotiationName", negotiationName);
            parameters.Add("userID", userID);
            this.ValidateMethod("CheckOnNegotiationRepeat", parameters);
            return ((InvokeOperation<Nullable<int>>)(this.InvokeOperation("CheckOnNegotiationRepeat", typeof(Nullable<int>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'FindUsersCount' method of the domain service.
        /// </summary>
        /// <param name="KeyWord">The value for the 'KeyWord' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="IsForPublicProfile">The value for the 'IsForPublicProfile' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<int>> FindUsersCount(string KeyWord, Guid UserID, bool IsForPublicProfile, Action<InvokeOperation<Nullable<int>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("KeyWord", KeyWord);
            parameters.Add("UserID", UserID);
            parameters.Add("IsForPublicProfile", IsForPublicProfile);
            this.ValidateMethod("FindUsersCount", parameters);
            return ((InvokeOperation<Nullable<int>>)(this.InvokeOperation("FindUsersCount", typeof(Nullable<int>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'FindUsersCount' method of the domain service.
        /// </summary>
        /// <param name="KeyWord">The value for the 'KeyWord' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="IsForPublicProfile">The value for the 'IsForPublicProfile' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Nullable<int>> FindUsersCount(string KeyWord, Guid UserID, bool IsForPublicProfile)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("KeyWord", KeyWord);
            parameters.Add("UserID", UserID);
            parameters.Add("IsForPublicProfile", IsForPublicProfile);
            this.ValidateMethod("FindUsersCount", parameters);
            return ((InvokeOperation<Nullable<int>>)(this.InvokeOperation("FindUsersCount", typeof(Nullable<int>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GeneratePDFConversations' method of the domain service.
        /// </summary>
        /// <param name="conversationIDs">The value for the 'conversationIDs' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte[]> GeneratePDFConversations(Guid[] conversationIDs, Action<InvokeOperation<byte[]>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationIDs", conversationIDs);
            this.ValidateMethod("GeneratePDFConversations", parameters);
            return ((InvokeOperation<byte[]>)(this.InvokeOperation("GeneratePDFConversations", typeof(byte[]), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GeneratePDFConversations' method of the domain service.
        /// </summary>
        /// <param name="conversationIDs">The value for the 'conversationIDs' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte[]> GeneratePDFConversations(Guid[] conversationIDs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationIDs", conversationIDs);
            this.ValidateMethod("GeneratePDFConversations", parameters);
            return ((InvokeOperation<byte[]>)(this.InvokeOperation("GeneratePDFConversations", typeof(byte[]), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GeneratePDFMessages' method of the domain service.
        /// </summary>
        /// <param name="messagesIDs">The value for the 'messagesIDs' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte[]> GeneratePDFMessages(Guid[] messagesIDs, Action<InvokeOperation<byte[]>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("messagesIDs", messagesIDs);
            this.ValidateMethod("GeneratePDFMessages", parameters);
            return ((InvokeOperation<byte[]>)(this.InvokeOperation("GeneratePDFMessages", typeof(byte[]), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GeneratePDFMessages' method of the domain service.
        /// </summary>
        /// <param name="messagesIDs">The value for the 'messagesIDs' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte[]> GeneratePDFMessages(Guid[] messagesIDs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("messagesIDs", messagesIDs);
            this.ValidateMethod("GeneratePDFMessages", parameters);
            return ((InvokeOperation<byte[]>)(this.InvokeOperation("GeneratePDFMessages", typeof(byte[]), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetNegotiationCountByStatus' method of the domain service.
        /// </summary>
        /// <param name="StatusType">The value for the 'StatusType' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetNegotiationCountByStatus(Guid StatusType, Guid UserID, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("StatusType", StatusType);
            parameters.Add("UserID", UserID);
            this.ValidateMethod("GetNegotiationCountByStatus", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetNegotiationCountByStatus", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetNegotiationCountByStatus' method of the domain service.
        /// </summary>
        /// <param name="StatusType">The value for the 'StatusType' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetNegotiationCountByStatus(Guid StatusType, Guid UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("StatusType", StatusType);
            parameters.Add("UserID", UserID);
            this.ValidateMethod("GetNegotiationCountByStatus", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetNegotiationCountByStatus", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetPartnerMailForConversation' method of the domain service.
        /// </summary>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetPartnerMailForConversation(Guid conversationID, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationID", conversationID);
            this.ValidateMethod("GetPartnerMailForConversation", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetPartnerMailForConversation", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetPartnerMailForConversation' method of the domain service.
        /// </summary>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetPartnerMailForConversation(Guid conversationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationID", conversationID);
            this.ValidateMethod("GetPartnerMailForConversation", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetPartnerMailForConversation", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetUsersCountByAlphabetExceptCurrentUser' method of the domain service.
        /// </summary>
        /// <param name="Alphabet">The value for the 'Alphabet' parameter of this action.</param>
        /// <param name="ColumnName">The value for the 'ColumnName' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="IsForPublicProfile">The value for the 'IsForPublicProfile' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetUsersCountByAlphabetExceptCurrentUser(string Alphabet, string ColumnName, Guid UserID, bool IsForPublicProfile, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Alphabet", Alphabet);
            parameters.Add("ColumnName", ColumnName);
            parameters.Add("UserID", UserID);
            parameters.Add("IsForPublicProfile", IsForPublicProfile);
            this.ValidateMethod("GetUsersCountByAlphabetExceptCurrentUser", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetUsersCountByAlphabetExceptCurrentUser", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetUsersCountByAlphabetExceptCurrentUser' method of the domain service.
        /// </summary>
        /// <param name="Alphabet">The value for the 'Alphabet' parameter of this action.</param>
        /// <param name="ColumnName">The value for the 'ColumnName' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="IsForPublicProfile">The value for the 'IsForPublicProfile' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetUsersCountByAlphabetExceptCurrentUser(string Alphabet, string ColumnName, Guid UserID, bool IsForPublicProfile)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Alphabet", Alphabet);
            parameters.Add("ColumnName", ColumnName);
            parameters.Add("UserID", UserID);
            parameters.Add("IsForPublicProfile", IsForPublicProfile);
            this.ValidateMethod("GetUsersCountByAlphabetExceptCurrentUser", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetUsersCountByAlphabetExceptCurrentUser", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetUsersCountExceptCurrentUser' method of the domain service.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="IsForPublicProfile">The value for the 'IsForPublicProfile' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetUsersCountExceptCurrentUser(Guid UserID, bool IsForPublicProfile, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            parameters.Add("IsForPublicProfile", IsForPublicProfile);
            this.ValidateMethod("GetUsersCountExceptCurrentUser", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetUsersCountExceptCurrentUser", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetUsersCountExceptCurrentUser' method of the domain service.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="IsForPublicProfile">The value for the 'IsForPublicProfile' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetUsersCountExceptCurrentUser(Guid UserID, bool IsForPublicProfile)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            parameters.Add("IsForPublicProfile", IsForPublicProfile);
            this.ValidateMethod("GetUsersCountExceptCurrentUser", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetUsersCountExceptCurrentUser", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateAppsStatisticalsByMessages' method of the domain service.
        /// </summary>
        /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <param name="messageContent">The value for the 'messageContent' parameter of this action.</param>
        /// <param name="messageSubject">The value for the 'messageSubject' parameter of this action.</param>
        /// <param name="messageSender">The value for the 'messageSender' parameter of this action.</param>
        /// <param name="messageReceiver">The value for the 'messageReceiver' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateAppsStatisticalsByMessages(string AppName, Guid UserID, Guid conversationID, string messageContent, string messageSubject, string messageSender, string messageReceiver, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("AppName", AppName);
            parameters.Add("UserID", UserID);
            parameters.Add("conversationID", conversationID);
            parameters.Add("messageContent", messageContent);
            parameters.Add("messageSubject", messageSubject);
            parameters.Add("messageSender", messageSender);
            parameters.Add("messageReceiver", messageReceiver);
            this.ValidateMethod("UpdateAppsStatisticalsByMessages", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateAppsStatisticalsByMessages", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateAppsStatisticalsByMessages' method of the domain service.
        /// </summary>
        /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <param name="messageContent">The value for the 'messageContent' parameter of this action.</param>
        /// <param name="messageSubject">The value for the 'messageSubject' parameter of this action.</param>
        /// <param name="messageSender">The value for the 'messageSender' parameter of this action.</param>
        /// <param name="messageReceiver">The value for the 'messageReceiver' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateAppsStatisticalsByMessages(string AppName, Guid UserID, Guid conversationID, string messageContent, string messageSubject, string messageSender, string messageReceiver)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("AppName", AppName);
            parameters.Add("UserID", UserID);
            parameters.Add("conversationID", conversationID);
            parameters.Add("messageContent", messageContent);
            parameters.Add("messageSubject", messageSubject);
            parameters.Add("messageSender", messageSender);
            parameters.Add("messageReceiver", messageReceiver);
            this.ValidateMethod("UpdateAppsStatisticalsByMessages", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateAppsStatisticalsByMessages", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateUserCulture' method of the domain service.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of this action.</param>
        /// <param name="cultureID">The value for the 'cultureID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateUserCulture(Guid userID, int cultureID, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("cultureID", cultureID);
            this.ValidateMethod("UpdateUserCulture", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateUserCulture", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateUserCulture' method of the domain service.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of this action.</param>
        /// <param name="cultureID">The value for the 'cultureID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateUserCulture(Guid userID, int cultureID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("cultureID", cultureID);
            this.ValidateMethod("UpdateUserCulture", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateUserCulture", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateUserFromeSource' method of the domain service.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of this action.</param>
        /// <param name="fName">The value for the 'fName' parameter of this action.</param>
        /// <param name="lName">The value for the 'lName' parameter of this action.</param>
        /// <param name="gender">The value for the 'gender' parameter of this action.</param>
        /// <param name="companyName">The value for the 'companyName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateUserFromeSource(Guid userID, string fName, string lName, bool gender, string companyName, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("fName", fName);
            parameters.Add("lName", lName);
            parameters.Add("gender", gender);
            parameters.Add("companyName", companyName);
            this.ValidateMethod("UpdateUserFromeSource", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateUserFromeSource", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateUserFromeSource' method of the domain service.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of this action.</param>
        /// <param name="fName">The value for the 'fName' parameter of this action.</param>
        /// <param name="lName">The value for the 'lName' parameter of this action.</param>
        /// <param name="gender">The value for the 'gender' parameter of this action.</param>
        /// <param name="companyName">The value for the 'companyName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateUserFromeSource(Guid userID, string fName, string lName, bool gender, string companyName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("fName", fName);
            parameters.Add("lName", lName);
            parameters.Add("gender", gender);
            parameters.Add("companyName", companyName);
            this.ValidateMethod("UpdateUserFromeSource", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateUserFromeSource", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new eNegContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'eNegService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IeNegServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'AddMessageToConversation' operation.
            /// </summary>
            /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="messageContent">The value for the 'messageContent' parameter of this action.</param>
            /// <param name="messageSubject">The value for the 'messageSubject' parameter of this action.</param>
            /// <param name="messageSender">The value for the 'messageSender' parameter of this action.</param>
            /// <param name="messageReceiver">The value for the 'messageReceiver' parameter of this action.</param>
            /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/AddMessageToConversationDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/AddMessageToConversation", ReplyAction="http://tempuri.org/eNegService/AddMessageToConversationResponse")]
            IAsyncResult BeginAddMessageToConversation(string AppName, Guid UserID, Guid conversationID, string messageContent, string messageSubject, string messageSender, string messageReceiver, bool isSent, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddMessageToConversation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddMessageToConversation'.</param>
            /// <returns>The 'String' returned from the 'AddMessageToConversation' operation.</returns>
            string EndAddMessageToConversation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'CanUserLeaveOrganization' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="organizationID">The value for the 'organizationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/CanUserLeaveOrganizationDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/CanUserLeaveOrganization", ReplyAction="http://tempuri.org/eNegService/CanUserLeaveOrganizationResponse")]
            [WebGet()]
            IAsyncResult BeginCanUserLeaveOrganization(Guid userID, Guid organizationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCanUserLeaveOrganization'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCanUserLeaveOrganization'.</param>
            /// <returns>The 'QueryResult' returned from the 'CanUserLeaveOrganization' operation.</returns>
            QueryResult<UserLeaveOrganizationResult> EndCanUserLeaveOrganization(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'CanUserSeeMemberProfile' operation.
            /// </summary>
            /// <param name="currentUserID">The value for the 'currentUserID' parameter of this action.</param>
            /// <param name="memberUserID">The value for the 'memberUserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/CanUserSeeMemberProfileDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/CanUserSeeMemberProfile", ReplyAction="http://tempuri.org/eNegService/CanUserSeeMemberProfileResponse")]
            IAsyncResult BeginCanUserSeeMemberProfile(Guid currentUserID, Guid memberUserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCanUserSeeMemberProfile'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCanUserSeeMemberProfile'.</param>
            /// <returns>The 'Boolean' returned from the 'CanUserSeeMemberProfile' operation.</returns>
            bool EndCanUserSeeMemberProfile(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'CheckOnNegotiationRepeat' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="negotiationName">The value for the 'negotiationName' parameter of this action.</param>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/CheckOnNegotiationRepeatDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/CheckOnNegotiationRepeat", ReplyAction="http://tempuri.org/eNegService/CheckOnNegotiationRepeatResponse")]
            IAsyncResult BeginCheckOnNegotiationRepeat(Guid negotiationID, string negotiationName, Guid userID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCheckOnNegotiationRepeat'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCheckOnNegotiationRepeat'.</param>
            /// <returns>The 'Nullable`1' returned from the 'CheckOnNegotiationRepeat' operation.</returns>
            Nullable<int> EndCheckOnNegotiationRepeat(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DeleteUserOperationByUserID' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/DeleteUserOperationByUserIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/DeleteUserOperationByUserID", ReplyAction="http://tempuri.org/eNegService/DeleteUserOperationByUserIDResponse")]
            [WebGet()]
            IAsyncResult BeginDeleteUserOperationByUserID(Guid UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDeleteUserOperationByUserID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDeleteUserOperationByUserID'.</param>
            /// <returns>The 'QueryResult' returned from the 'DeleteUserOperationByUserID' operation.</returns>
            QueryResult<User> EndDeleteUserOperationByUserID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'FindUser' operation.
            /// </summary>
            /// <param name="KeyWord">The value for the 'KeyWord' parameter of this action.</param>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="IsForPublicProfile">The value for the 'IsForPublicProfile' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/FindUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/FindUser", ReplyAction="http://tempuri.org/eNegService/FindUserResponse")]
            [WebGet()]
            IAsyncResult BeginFindUser(string KeyWord, Guid UserID, bool IsForPublicProfile, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginFindUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginFindUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'FindUser' operation.</returns>
            QueryResult<User> EndFindUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'FindUsersCount' operation.
            /// </summary>
            /// <param name="KeyWord">The value for the 'KeyWord' parameter of this action.</param>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="IsForPublicProfile">The value for the 'IsForPublicProfile' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/FindUsersCountDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/FindUsersCount", ReplyAction="http://tempuri.org/eNegService/FindUsersCountResponse")]
            IAsyncResult BeginFindUsersCount(string KeyWord, Guid UserID, bool IsForPublicProfile, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginFindUsersCount'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginFindUsersCount'.</param>
            /// <returns>The 'Nullable`1' returned from the 'FindUsersCount' operation.</returns>
            Nullable<int> EndFindUsersCount(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GeneratePDFConversations' operation.
            /// </summary>
            /// <param name="conversationIDs">The value for the 'conversationIDs' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GeneratePDFConversationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GeneratePDFConversations", ReplyAction="http://tempuri.org/eNegService/GeneratePDFConversationsResponse")]
            IAsyncResult BeginGeneratePDFConversations(Guid[] conversationIDs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGeneratePDFConversations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGeneratePDFConversations'.</param>
            /// <returns>The 'Byte[]' returned from the 'GeneratePDFConversations' operation.</returns>
            byte[] EndGeneratePDFConversations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GeneratePDFMessages' operation.
            /// </summary>
            /// <param name="messagesIDs">The value for the 'messagesIDs' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GeneratePDFMessagesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GeneratePDFMessages", ReplyAction="http://tempuri.org/eNegService/GeneratePDFMessagesResponse")]
            IAsyncResult BeginGeneratePDFMessages(Guid[] messagesIDs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGeneratePDFMessages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGeneratePDFMessages'.</param>
            /// <returns>The 'Byte[]' returned from the 'GeneratePDFMessages' operation.</returns>
            byte[] EndGeneratePDFMessages(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAccountType' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetAccountTypeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetAccountType", ReplyAction="http://tempuri.org/eNegService/GetAccountTypeResponse")]
            [WebGet()]
            IAsyncResult BeginGetAccountType(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAccountType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAccountType'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAccountType' operation.</returns>
            QueryResult<AccountType> EndGetAccountType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetActionTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetActionTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetActionTypes", ReplyAction="http://tempuri.org/eNegService/GetActionTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetActionTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetActionTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetActionTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetActionTypes' operation.</returns>
            QueryResult<ActionType> EndGetActionTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetActiveSupportApplicationsForConversation' operation.
            /// </summary>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetActiveSupportApplicationsForConversationDomainS" +
                "erviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetActiveSupportApplicationsForConversation", ReplyAction="http://tempuri.org/eNegService/GetActiveSupportApplicationsForConversationRespons" +
                "e")]
            [WebGet()]
            IAsyncResult BeginGetActiveSupportApplicationsForConversation(Guid conversationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetActiveSupportApplicationsForConversation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetActiveSupportApplicationsForConversation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetActiveSupportApplicationsForConversation' operation.</returns>
            QueryResult<Application> EndGetActiveSupportApplicationsForConversation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetApplications' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetApplicationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetApplications", ReplyAction="http://tempuri.org/eNegService/GetApplicationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetApplications(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetApplications'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetApplications'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetApplications' operation.</returns>
            QueryResult<Application> EndGetApplications(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAppsActiveForDM' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetAppsActiveForDMDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetAppsActiveForDM", ReplyAction="http://tempuri.org/eNegService/GetAppsActiveForDMResponse")]
            [WebGet()]
            IAsyncResult BeginGetAppsActiveForDM(Guid UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAppsActiveForDM'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAppsActiveForDM'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAppsActiveForDM' operation.</returns>
            QueryResult<UserApplicationStatu> EndGetAppsActiveForDM(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAttachements' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetAttachementsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetAttachements", ReplyAction="http://tempuri.org/eNegService/GetAttachementsResponse")]
            [WebGet()]
            IAsyncResult BeginGetAttachements(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAttachements'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAttachements'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAttachements' operation.</returns>
            QueryResult<Attachement> EndGetAttachements(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAvailableNegotiationsToAnalysis' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetAvailableNegotiationsToAnalysisDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetAvailableNegotiationsToAnalysis", ReplyAction="http://tempuri.org/eNegService/GetAvailableNegotiationsToAnalysisResponse")]
            [WebGet()]
            IAsyncResult BeginGetAvailableNegotiationsToAnalysis(Guid UserID, string AppName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAvailableNegotiationsToAnalysis'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAvailableNegotiationsToAnalysis'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAvailableNegotiationsToAnalysis' operation.</returns>
            QueryResult<Negotiation> EndGetAvailableNegotiationsToAnalysis(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCategories' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetCategoriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetCategories", ReplyAction="http://tempuri.org/eNegService/GetCategoriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCategories(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCategories'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCategories'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCategories' operation.</returns>
            QueryResult<Category> EndGetCategories(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCategoryLogs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetCategoryLogsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetCategoryLogs", ReplyAction="http://tempuri.org/eNegService/GetCategoryLogsResponse")]
            [WebGet()]
            IAsyncResult BeginGetCategoryLogs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCategoryLogs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCategoryLogs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCategoryLogs' operation.</returns>
            QueryResult<CategoryLog> EndGetCategoryLogs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetChannels' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetChannelsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetChannels", ReplyAction="http://tempuri.org/eNegService/GetChannelsResponse")]
            [WebGet()]
            IAsyncResult BeginGetChannels(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetChannels'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetChannels'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetChannels' operation.</returns>
            QueryResult<Channel> EndGetChannels(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetChannelTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetChannelTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetChannelTypes", ReplyAction="http://tempuri.org/eNegService/GetChannelTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetChannelTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetChannelTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetChannelTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetChannelTypes' operation.</returns>
            QueryResult<ChannelType> EndGetChannelTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetClosedNegoiationsForArchive' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="archiveYear">The value for the 'archiveYear' parameter of this action.</param>
            /// <param name="archiveMonth">The value for the 'archiveMonth' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetClosedNegoiationsForArchiveDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetClosedNegoiationsForArchive", ReplyAction="http://tempuri.org/eNegService/GetClosedNegoiationsForArchiveResponse")]
            [WebGet()]
            IAsyncResult BeginGetClosedNegoiationsForArchive(Guid UserID, int archiveYear, int archiveMonth, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetClosedNegoiationsForArchive'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetClosedNegoiationsForArchive'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetClosedNegoiationsForArchive' operation.</returns>
            QueryResult<Negotiation> EndGetClosedNegoiationsForArchive(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetClosedNegotiationArchive' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetClosedNegotiationArchiveDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetClosedNegotiationArchive", ReplyAction="http://tempuri.org/eNegService/GetClosedNegotiationArchiveResponse")]
            [WebGet()]
            IAsyncResult BeginGetClosedNegotiationArchive(Guid UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetClosedNegotiationArchive'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetClosedNegotiationArchive'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetClosedNegotiationArchive' operation.</returns>
            QueryResult<NegotiationArchive> EndGetClosedNegotiationArchive(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetConversations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetConversationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetConversations", ReplyAction="http://tempuri.org/eNegService/GetConversationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetConversations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetConversations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetConversations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetConversations' operation.</returns>
            QueryResult<Conversation> EndGetConversations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetConversationsByNegotiationID' operation.
            /// </summary>
            /// <param name="NegIDs">The value for the 'NegIDs' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetConversationsByNegotiationIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetConversationsByNegotiationID", ReplyAction="http://tempuri.org/eNegService/GetConversationsByNegotiationIDResponse")]
            IAsyncResult BeginGetConversationsByNegotiationID(Guid[] NegIDs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetConversationsByNegotiationID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetConversationsByNegotiationID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetConversationsByNegotiationID' operation.</returns>
            QueryResult<Conversation> EndGetConversationsByNegotiationID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCountry' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetCountryDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetCountry", ReplyAction="http://tempuri.org/eNegService/GetCountryResponse")]
            [WebGet()]
            IAsyncResult BeginGetCountry(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCountry'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCountry'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCountry' operation.</returns>
            QueryResult<Country> EndGetCountry(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCultures' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetCulturesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetCultures", ReplyAction="http://tempuri.org/eNegService/GetCulturesResponse")]
            IAsyncResult BeginGetCultures(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCultures'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCultures'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCultures' operation.</returns>
            QueryResult<Culture> EndGetCultures(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetHistories' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetHistoriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetHistories", ReplyAction="http://tempuri.org/eNegService/GetHistoriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetHistories(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetHistories'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetHistories'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetHistories' operation.</returns>
            QueryResult<History> EndGetHistories(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLogs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetLogsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetLogs", ReplyAction="http://tempuri.org/eNegService/GetLogsResponse")]
            [WebGet()]
            IAsyncResult BeginGetLogs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLogs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLogs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLogs' operation.</returns>
            QueryResult<Log> EndGetLogs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMessages' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetMessagesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetMessages", ReplyAction="http://tempuri.org/eNegService/GetMessagesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMessages(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMessages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMessages'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMessages' operation.</returns>
            QueryResult<Message> EndGetMessages(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMessagesByNegotiationID' operation.
            /// </summary>
            /// <param name="NegotiationIDS">The value for the 'NegotiationIDS' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetMessagesByNegotiationIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetMessagesByNegotiationID", ReplyAction="http://tempuri.org/eNegService/GetMessagesByNegotiationIDResponse")]
            IAsyncResult BeginGetMessagesByNegotiationID(Nullable<Guid>[] NegotiationIDS, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMessagesByNegotiationID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMessagesByNegotiationID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMessagesByNegotiationID' operation.</returns>
            QueryResult<Message> EndGetMessagesByNegotiationID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMessagesByNegotiationIDForApps' operation.
            /// </summary>
            /// <param name="NegotiationIDS">The value for the 'NegotiationIDS' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetMessagesByNegotiationIDForAppsDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetMessagesByNegotiationIDForApps", ReplyAction="http://tempuri.org/eNegService/GetMessagesByNegotiationIDForAppsResponse")]
            IAsyncResult BeginGetMessagesByNegotiationIDForApps(Nullable<Guid>[] NegotiationIDS, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMessagesByNegotiationIDForApps'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMessagesByNegotiationIDForApps'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMessagesByNegotiationIDForApps' operation.</returns>
            QueryResult<Message> EndGetMessagesByNegotiationIDForApps(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiationApplicationStatus' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetNegotiationApplicationStatusDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetNegotiationApplicationStatus", ReplyAction="http://tempuri.org/eNegService/GetNegotiationApplicationStatusResponse")]
            [WebGet()]
            IAsyncResult BeginGetNegotiationApplicationStatus(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiationApplicationStatus'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiationApplicationStatus'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegotiationApplicationStatus' operation.</returns>
            QueryResult<NegotiationApplicationStatu> EndGetNegotiationApplicationStatus(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiationApplicationStatusByNegotiationID' operation.
            /// </summary>
            /// <param name="NegIDs">The value for the 'NegIDs' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetNegotiationApplicationStatusByNegotiationIDDoma" +
                "inServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetNegotiationApplicationStatusByNegotiationID", ReplyAction="http://tempuri.org/eNegService/GetNegotiationApplicationStatusByNegotiationIDResp" +
                "onse")]
            [WebGet()]
            IAsyncResult BeginGetNegotiationApplicationStatusByNegotiationID(Guid[] NegIDs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiationApplicationStatusByNegotiationID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiationApplicationStatusByNegotiationID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegotiationApplicationStatusByNegotiationID' operation.</returns>
            QueryResult<NegotiationApplicationStatu> EndGetNegotiationApplicationStatusByNegotiationID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiationCountByStatus' operation.
            /// </summary>
            /// <param name="StatusType">The value for the 'StatusType' parameter of this action.</param>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetNegotiationCountByStatusDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetNegotiationCountByStatus", ReplyAction="http://tempuri.org/eNegService/GetNegotiationCountByStatusResponse")]
            IAsyncResult BeginGetNegotiationCountByStatus(Guid StatusType, Guid UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiationCountByStatus'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiationCountByStatus'.</param>
            /// <returns>The 'Int32' returned from the 'GetNegotiationCountByStatus' operation.</returns>
            int EndGetNegotiationCountByStatus(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiationOrganizations' operation.
            /// </summary>
            /// <param name="negotiationIDList">The value for the 'negotiationIDList' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetNegotiationOrganizationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetNegotiationOrganizations", ReplyAction="http://tempuri.org/eNegService/GetNegotiationOrganizationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetNegotiationOrganizations(Guid[] negotiationIDList, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiationOrganizations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiationOrganizations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegotiationOrganizations' operation.</returns>
            QueryResult<NegotiationOrganization> EndGetNegotiationOrganizations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetNegotiationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetNegotiations", ReplyAction="http://tempuri.org/eNegService/GetNegotiationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetNegotiations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegotiations' operation.</returns>
            QueryResult<Negotiation> EndGetNegotiations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiationsByListOfIDs' operation.
            /// </summary>
            /// <param name="NegIDs">The value for the 'NegIDs' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetNegotiationsByListOfIDsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetNegotiationsByListOfIDs", ReplyAction="http://tempuri.org/eNegService/GetNegotiationsByListOfIDsResponse")]
            IAsyncResult BeginGetNegotiationsByListOfIDs(Guid[] NegIDs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiationsByListOfIDs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiationsByListOfIDs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegotiationsByListOfIDs' operation.</returns>
            QueryResult<Negotiation> EndGetNegotiationsByListOfIDs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiationsByUserID' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetNegotiationsByUserIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetNegotiationsByUserID", ReplyAction="http://tempuri.org/eNegService/GetNegotiationsByUserIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetNegotiationsByUserID(Guid UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiationsByUserID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiationsByUserID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegotiationsByUserID' operation.</returns>
            QueryResult<Negotiation> EndGetNegotiationsByUserID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiationStatus' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetNegotiationStatusDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetNegotiationStatus", ReplyAction="http://tempuri.org/eNegService/GetNegotiationStatusResponse")]
            [WebGet()]
            IAsyncResult BeginGetNegotiationStatus(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiationStatus'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiationStatus'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegotiationStatus' operation.</returns>
            QueryResult<NegotiationStatu> EndGetNegotiationStatus(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOrganizationByID' operation.
            /// </summary>
            /// <param name="organizationID">The value for the 'organizationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetOrganizationByIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetOrganizationByID", ReplyAction="http://tempuri.org/eNegService/GetOrganizationByIDResponse")]
            IAsyncResult BeginGetOrganizationByID(Guid organizationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOrganizationByID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOrganizationByID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOrganizationByID' operation.</returns>
            QueryResult<Organization> EndGetOrganizationByID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOrganizationByItsOwnerID' operation.
            /// </summary>
            /// <param name="OwnerID">The value for the 'OwnerID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetOrganizationByItsOwnerIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetOrganizationByItsOwnerID", ReplyAction="http://tempuri.org/eNegService/GetOrganizationByItsOwnerIDResponse")]
            IAsyncResult BeginGetOrganizationByItsOwnerID(Guid OwnerID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOrganizationByItsOwnerID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOrganizationByItsOwnerID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOrganizationByItsOwnerID' operation.</returns>
            QueryResult<Organization> EndGetOrganizationByItsOwnerID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOrganizationMembers' operation.
            /// </summary>
            /// <param name="organizationID">The value for the 'organizationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetOrganizationMembersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetOrganizationMembers", ReplyAction="http://tempuri.org/eNegService/GetOrganizationMembersResponse")]
            IAsyncResult BeginGetOrganizationMembers(Guid organizationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOrganizationMembers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOrganizationMembers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOrganizationMembers' operation.</returns>
            QueryResult<User> EndGetOrganizationMembers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOrganizationMembersStatus' operation.
            /// </summary>
            /// <param name="organizationID">The value for the 'organizationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetOrganizationMembersStatusDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetOrganizationMembersStatus", ReplyAction="http://tempuri.org/eNegService/GetOrganizationMembersStatusResponse")]
            IAsyncResult BeginGetOrganizationMembersStatus(Guid organizationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOrganizationMembersStatus'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOrganizationMembersStatus'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOrganizationMembersStatus' operation.</returns>
            QueryResult<UserOrganization> EndGetOrganizationMembersStatus(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOrganizations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetOrganizationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetOrganizations", ReplyAction="http://tempuri.org/eNegService/GetOrganizationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetOrganizations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOrganizations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOrganizations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOrganizations' operation.</returns>
            QueryResult<Organization> EndGetOrganizations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOrganizationsForUser' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetOrganizationsForUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetOrganizationsForUser", ReplyAction="http://tempuri.org/eNegService/GetOrganizationsForUserResponse")]
            IAsyncResult BeginGetOrganizationsForUser(Guid userID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOrganizationsForUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOrganizationsForUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOrganizationsForUser' operation.</returns>
            QueryResult<Organization> EndGetOrganizationsForUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOrganizationsOwners' operation.
            /// </summary>
            /// <param name="organizationIDs">The value for the 'organizationIDs' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetOrganizationsOwnersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetOrganizationsOwners", ReplyAction="http://tempuri.org/eNegService/GetOrganizationsOwnersResponse")]
            IAsyncResult BeginGetOrganizationsOwners(Guid[] organizationIDs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOrganizationsOwners'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOrganizationsOwners'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOrganizationsOwners' operation.</returns>
            QueryResult<User> EndGetOrganizationsOwners(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOrganizationTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetOrganizationTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetOrganizationTypes", ReplyAction="http://tempuri.org/eNegService/GetOrganizationTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetOrganizationTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOrganizationTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOrganizationTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOrganizationTypes' operation.</returns>
            QueryResult<OrganizationType> EndGetOrganizationTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPartnerMailForConversation' operation.
            /// </summary>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetPartnerMailForConversationDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetPartnerMailForConversation", ReplyAction="http://tempuri.org/eNegService/GetPartnerMailForConversationResponse")]
            IAsyncResult BeginGetPartnerMailForConversation(Guid conversationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPartnerMailForConversation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPartnerMailForConversation'.</param>
            /// <returns>The 'String' returned from the 'GetPartnerMailForConversation' operation.</returns>
            string EndGetPartnerMailForConversation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPreferedLanguage' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetPreferedLanguageDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetPreferedLanguage", ReplyAction="http://tempuri.org/eNegService/GetPreferedLanguageResponse")]
            [WebGet()]
            IAsyncResult BeginGetPreferedLanguage(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPreferedLanguage'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPreferedLanguage'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPreferedLanguage' operation.</returns>
            QueryResult<PreferedLanguage> EndGetPreferedLanguage(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProfile' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetProfileDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetProfile", ReplyAction="http://tempuri.org/eNegService/GetProfileResponse")]
            [WebGet()]
            IAsyncResult BeginGetProfile(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProfile'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProfile'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProfile' operation.</returns>
            QueryResult<Profile> EndGetProfile(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPublishedNegoiations' operation.
            /// </summary>
            /// <param name="NegStatus">The value for the 'NegStatus' parameter of this action.</param>
            /// <param name="NegOwner">The value for the 'NegOwner' parameter of this action.</param>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="archiveYear">The value for the 'archiveYear' parameter of this action.</param>
            /// <param name="archiveMonth">The value for the 'archiveMonth' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetPublishedNegoiationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetPublishedNegoiations", ReplyAction="http://tempuri.org/eNegService/GetPublishedNegoiationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPublishedNegoiations(byte NegStatus, byte NegOwner, Guid UserID, int archiveYear, int archiveMonth, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPublishedNegoiations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPublishedNegoiations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPublishedNegoiations' operation.</returns>
            QueryResult<Negotiation> EndGetPublishedNegoiations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPublishedNegotiationArchive' operation.
            /// </summary>
            /// <param name="NegStatus">The value for the 'NegStatus' parameter of this action.</param>
            /// <param name="NegOwner">The value for the 'NegOwner' parameter of this action.</param>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetPublishedNegotiationArchiveDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetPublishedNegotiationArchive", ReplyAction="http://tempuri.org/eNegService/GetPublishedNegotiationArchiveResponse")]
            [WebGet()]
            IAsyncResult BeginGetPublishedNegotiationArchive(byte NegStatus, byte NegOwner, Guid UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPublishedNegotiationArchive'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPublishedNegotiationArchive'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPublishedNegotiationArchive' operation.</returns>
            QueryResult<NegotiationArchive> EndGetPublishedNegotiationArchive(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRight' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetRightDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetRight", ReplyAction="http://tempuri.org/eNegService/GetRightResponse")]
            [WebGet()]
            IAsyncResult BeginGetRight(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRight'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRight'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRight' operation.</returns>
            QueryResult<Right> EndGetRight(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRole' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetRoleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetRole", ReplyAction="http://tempuri.org/eNegService/GetRoleResponse")]
            [WebGet()]
            IAsyncResult BeginGetRole(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRole'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRole'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRole' operation.</returns>
            QueryResult<Role> EndGetRole(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRoleRight' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetRoleRightDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetRoleRight", ReplyAction="http://tempuri.org/eNegService/GetRoleRightResponse")]
            [WebGet()]
            IAsyncResult BeginGetRoleRight(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRoleRight'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRoleRight'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRoleRight' operation.</returns>
            QueryResult<RoleRight> EndGetRoleRight(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSecurityQuestion' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetSecurityQuestionDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetSecurityQuestion", ReplyAction="http://tempuri.org/eNegService/GetSecurityQuestionResponse")]
            [WebGet()]
            IAsyncResult BeginGetSecurityQuestion(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSecurityQuestion'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSecurityQuestion'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSecurityQuestion' operation.</returns>
            QueryResult<SecurityQuestion> EndGetSecurityQuestion(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetUser", ReplyAction="http://tempuri.org/eNegService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserApplicationStatus' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetUserApplicationStatusDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetUserApplicationStatus", ReplyAction="http://tempuri.org/eNegService/GetUserApplicationStatusResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserApplicationStatus(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserApplicationStatus'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserApplicationStatus'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserApplicationStatus' operation.</returns>
            QueryResult<UserApplicationStatu> EndGetUserApplicationStatus(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserByID' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetUserByIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetUserByID", ReplyAction="http://tempuri.org/eNegService/GetUserByIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserByID(Guid UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserByID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserByID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserByID' operation.</returns>
            QueryResult<User> EndGetUserByID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserByOperationString' operation.
            /// </summary>
            /// <param name="OperationString">The value for the 'OperationString' parameter of this action.</param>
            /// <param name="OperationType">The value for the 'OperationType' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetUserByOperationStringDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetUserByOperationString", ReplyAction="http://tempuri.org/eNegService/GetUserByOperationStringResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserByOperationString(string OperationString, byte OperationType, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserByOperationString'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserByOperationString'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserByOperationString' operation.</returns>
            QueryResult<User> EndGetUserByOperationString(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserOperations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetUserOperationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetUserOperations", ReplyAction="http://tempuri.org/eNegService/GetUserOperationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserOperations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserOperations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserOperations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserOperations' operation.</returns>
            QueryResult<UserOperation> EndGetUserOperations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserOrganizationsForOwnersUsers' operation.
            /// </summary>
            /// <param name="usersIDs">The value for the 'usersIDs' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetUserOrganizationsForOwnersUsersDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetUserOrganizationsForOwnersUsers", ReplyAction="http://tempuri.org/eNegService/GetUserOrganizationsForOwnersUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserOrganizationsForOwnersUsers(IEnumerable<Guid> usersIDs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserOrganizationsForOwnersUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserOrganizationsForOwnersUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserOrganizationsForOwnersUsers' operation.</returns>
            QueryResult<UserOrganization> EndGetUserOrganizationsForOwnersUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserOrganizationsForUser' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetUserOrganizationsForUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetUserOrganizationsForUser", ReplyAction="http://tempuri.org/eNegService/GetUserOrganizationsForUserResponse")]
            IAsyncResult BeginGetUserOrganizationsForUser(Guid userID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserOrganizationsForUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserOrganizationsForUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserOrganizationsForUser' operation.</returns>
            QueryResult<UserOrganization> EndGetUserOrganizationsForUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserProfileStatisticals' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetUserProfileStatisticalsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetUserProfileStatisticals", ReplyAction="http://tempuri.org/eNegService/GetUserProfileStatisticalsResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserProfileStatisticals(Guid UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserProfileStatisticals'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserProfileStatisticals'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserProfileStatisticals' operation.</returns>
            QueryResult<UserProfileStatisticalsResult> EndGetUserProfileStatisticals(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserRole' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetUserRoleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetUserRole", ReplyAction="http://tempuri.org/eNegService/GetUserRoleResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserRole(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserRole'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserRole'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserRole' operation.</returns>
            QueryResult<UserRole> EndGetUserRole(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUsersCountByAlphabetExceptCurrentUser' operation.
            /// </summary>
            /// <param name="Alphabet">The value for the 'Alphabet' parameter of this action.</param>
            /// <param name="ColumnName">The value for the 'ColumnName' parameter of this action.</param>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="IsForPublicProfile">The value for the 'IsForPublicProfile' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetUsersCountByAlphabetExceptCurrentUserDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetUsersCountByAlphabetExceptCurrentUser", ReplyAction="http://tempuri.org/eNegService/GetUsersCountByAlphabetExceptCurrentUserResponse")]
            IAsyncResult BeginGetUsersCountByAlphabetExceptCurrentUser(string Alphabet, string ColumnName, Guid UserID, bool IsForPublicProfile, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUsersCountByAlphabetExceptCurrentUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUsersCountByAlphabetExceptCurrentUser'.</param>
            /// <returns>The 'Int32' returned from the 'GetUsersCountByAlphabetExceptCurrentUser' operation.</returns>
            int EndGetUsersCountByAlphabetExceptCurrentUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUsersCountExceptCurrentUser' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="IsForPublicProfile">The value for the 'IsForPublicProfile' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/GetUsersCountExceptCurrentUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/GetUsersCountExceptCurrentUser", ReplyAction="http://tempuri.org/eNegService/GetUsersCountExceptCurrentUserResponse")]
            IAsyncResult BeginGetUsersCountExceptCurrentUser(Guid UserID, bool IsForPublicProfile, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUsersCountExceptCurrentUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUsersCountExceptCurrentUser'.</param>
            /// <returns>The 'Int32' returned from the 'GetUsersCountExceptCurrentUser' operation.</returns>
            int EndGetUsersCountExceptCurrentUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'MakeUserOffline' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/MakeUserOfflineDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/MakeUserOffline", ReplyAction="http://tempuri.org/eNegService/MakeUserOfflineResponse")]
            [WebGet()]
            IAsyncResult BeginMakeUserOffline(Nullable<Guid> UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginMakeUserOffline'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginMakeUserOffline'.</param>
            /// <returns>The 'QueryResult' returned from the 'MakeUserOffline' operation.</returns>
            QueryResult<User> EndMakeUserOffline(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'MakeUserOnline' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="IPAddress">The value for the 'IPAddress' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/MakeUserOnlineDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/MakeUserOnline", ReplyAction="http://tempuri.org/eNegService/MakeUserOnlineResponse")]
            [WebGet()]
            IAsyncResult BeginMakeUserOnline(Nullable<Guid> UserID, string IPAddress, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginMakeUserOnline'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginMakeUserOnline'.</param>
            /// <returns>The 'QueryResult' returned from the 'MakeUserOnline' operation.</returns>
            QueryResult<User> EndMakeUserOnline(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'RetrieveApplicationDMStatus' operation.
            /// </summary>
            /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/RetrieveApplicationDMStatusDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/RetrieveApplicationDMStatus", ReplyAction="http://tempuri.org/eNegService/RetrieveApplicationDMStatusResponse")]
            [WebGet()]
            IAsyncResult BeginRetrieveApplicationDMStatus(string AppName, Guid UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginRetrieveApplicationDMStatus'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginRetrieveApplicationDMStatus'.</param>
            /// <returns>The 'QueryResult' returned from the 'RetrieveApplicationDMStatus' operation.</returns>
            QueryResult<UserApplicationStatu> EndRetrieveApplicationDMStatus(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdateAppsStatisticalsByMessages' operation.
            /// </summary>
            /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="messageContent">The value for the 'messageContent' parameter of this action.</param>
            /// <param name="messageSubject">The value for the 'messageSubject' parameter of this action.</param>
            /// <param name="messageSender">The value for the 'messageSender' parameter of this action.</param>
            /// <param name="messageReceiver">The value for the 'messageReceiver' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/UpdateAppsStatisticalsByMessagesDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/UpdateAppsStatisticalsByMessages", ReplyAction="http://tempuri.org/eNegService/UpdateAppsStatisticalsByMessagesResponse")]
            IAsyncResult BeginUpdateAppsStatisticalsByMessages(string AppName, Guid UserID, Guid conversationID, string messageContent, string messageSubject, string messageSender, string messageReceiver, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdateAppsStatisticalsByMessages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdateAppsStatisticalsByMessages'.</param>
            /// <returns>The 'Boolean' returned from the 'UpdateAppsStatisticalsByMessages' operation.</returns>
            bool EndUpdateAppsStatisticalsByMessages(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdateDataMatchingStatusInAddon' operation.
            /// </summary>
            /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="IsActive">The value for the 'IsActive' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/UpdateDataMatchingStatusInAddonDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/UpdateDataMatchingStatusInAddon", ReplyAction="http://tempuri.org/eNegService/UpdateDataMatchingStatusInAddonResponse")]
            [WebGet()]
            IAsyncResult BeginUpdateDataMatchingStatusInAddon(string AppName, Guid UserID, bool IsActive, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdateDataMatchingStatusInAddon'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdateDataMatchingStatusInAddon'.</param>
            /// <returns>The 'QueryResult' returned from the 'UpdateDataMatchingStatusInAddon' operation.</returns>
            QueryResult<UserApplicationStatu> EndUpdateDataMatchingStatusInAddon(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdateReset' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/UpdateResetDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/UpdateReset", ReplyAction="http://tempuri.org/eNegService/UpdateResetResponse")]
            [WebGet()]
            IAsyncResult BeginUpdateReset(Nullable<Guid> UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdateReset'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdateReset'.</param>
            /// <returns>The 'QueryResult' returned from the 'UpdateReset' operation.</returns>
            QueryResult<User> EndUpdateReset(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdateUserByConfirmMail' operation.
            /// </summary>
            /// <param name="operationString">The value for the 'operationString' parameter of this action.</param>
            /// <param name="operationStringType">The value for the 'operationStringType' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/UpdateUserByConfirmMailDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/UpdateUserByConfirmMail", ReplyAction="http://tempuri.org/eNegService/UpdateUserByConfirmMailResponse")]
            [WebGet()]
            IAsyncResult BeginUpdateUserByConfirmMail(string operationString, byte operationStringType, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdateUserByConfirmMail'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdateUserByConfirmMail'.</param>
            /// <returns>The 'QueryResult' returned from the 'UpdateUserByConfirmMail' operation.</returns>
            QueryResult<User> EndUpdateUserByConfirmMail(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdateUserCulture' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="cultureID">The value for the 'cultureID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/UpdateUserCultureDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/UpdateUserCulture", ReplyAction="http://tempuri.org/eNegService/UpdateUserCultureResponse")]
            IAsyncResult BeginUpdateUserCulture(Guid userID, int cultureID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdateUserCulture'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdateUserCulture'.</param>
            /// <returns>The 'Boolean' returned from the 'UpdateUserCulture' operation.</returns>
            bool EndUpdateUserCulture(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdateUserFromeSource' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="fName">The value for the 'fName' parameter of this action.</param>
            /// <param name="lName">The value for the 'lName' parameter of this action.</param>
            /// <param name="gender">The value for the 'gender' parameter of this action.</param>
            /// <param name="companyName">The value for the 'companyName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/UpdateUserFromeSourceDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/UpdateUserFromeSource", ReplyAction="http://tempuri.org/eNegService/UpdateUserFromeSourceResponse")]
            IAsyncResult BeginUpdateUserFromeSource(Guid userID, string fName, string lName, bool gender, string companyName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdateUserFromeSource'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdateUserFromeSource'.</param>
            /// <returns>The 'Boolean' returned from the 'UpdateUserFromeSource' operation.</returns>
            bool EndUpdateUserFromeSource(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UserCanLogin' operation.
            /// </summary>
            /// <param name="UserName">The value for the 'UserName' parameter of this action.</param>
            /// <param name="Password">The value for the 'Password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/UserCanLoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/UserCanLogin", ReplyAction="http://tempuri.org/eNegService/UserCanLoginResponse")]
            [WebGet()]
            IAsyncResult BeginUserCanLogin(string UserName, string Password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUserCanLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUserCanLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'UserCanLogin' operation.</returns>
            QueryResult<User> EndUserCanLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eNegService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eNegService/SubmitChanges", ReplyAction="http://tempuri.org/eNegService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class eNegContextEntityContainer : EntityContainer
        {
            
            public eNegContextEntityContainer()
            {
                this.CreateEntitySet<AccountType>(EntitySetOperations.All);
                this.CreateEntitySet<ActionType>(EntitySetOperations.All);
                this.CreateEntitySet<Application>(EntitySetOperations.All);
                this.CreateEntitySet<Attachement>(EntitySetOperations.All);
                this.CreateEntitySet<Category>(EntitySetOperations.All);
                this.CreateEntitySet<CategoryLog>(EntitySetOperations.All);
                this.CreateEntitySet<Channel>(EntitySetOperations.All);
                this.CreateEntitySet<ChannelType>(EntitySetOperations.All);
                this.CreateEntitySet<Conversation>(EntitySetOperations.All);
                this.CreateEntitySet<Country>(EntitySetOperations.All);
                this.CreateEntitySet<Culture>(EntitySetOperations.All);
                this.CreateEntitySet<History>(EntitySetOperations.All);
                this.CreateEntitySet<Log>(EntitySetOperations.All);
                this.CreateEntitySet<Message>(EntitySetOperations.All);
                this.CreateEntitySet<Negotiation>(EntitySetOperations.All);
                this.CreateEntitySet<NegotiationApplicationStatu>(EntitySetOperations.All);
                this.CreateEntitySet<NegotiationArchive>(EntitySetOperations.None);
                this.CreateEntitySet<NegotiationOrganization>(EntitySetOperations.All);
                this.CreateEntitySet<NegotiationStatu>(EntitySetOperations.All);
                this.CreateEntitySet<Organization>(EntitySetOperations.All);
                this.CreateEntitySet<OrganizationType>(EntitySetOperations.All);
                this.CreateEntitySet<PreferedLanguage>(EntitySetOperations.All);
                this.CreateEntitySet<Profile>(EntitySetOperations.All);
                this.CreateEntitySet<Right>(EntitySetOperations.All);
                this.CreateEntitySet<Role>(EntitySetOperations.All);
                this.CreateEntitySet<RoleRight>(EntitySetOperations.All);
                this.CreateEntitySet<SecurityQuestion>(EntitySetOperations.All);
                this.CreateEntitySet<User>(EntitySetOperations.All);
                this.CreateEntitySet<UserApplicationStatu>(EntitySetOperations.All);
                this.CreateEntitySet<UserLeaveOrganizationResult>(EntitySetOperations.None);
                this.CreateEntitySet<UserOperation>(EntitySetOperations.All);
                this.CreateEntitySet<UserOrganization>(EntitySetOperations.All);
                this.CreateEntitySet<UserProfileStatisticalsResult>(EntitySetOperations.None);
                this.CreateEntitySet<UserRole>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'History' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class History : Entity
    {
        
        private DateTime _actionDate;
        
        private EntityRef<ActionType> _actionType;
        
        private Guid _actionTypeID;
        
        private Guid _historyID;
        
        private string _newValue;
        
        private string _oldValue;
        
        private string _tableName;
        
        private EntityRef<User> _user;
        
        private Guid _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActionDateChanging(DateTime value);
        partial void OnActionDateChanged();
        partial void OnActionTypeIDChanging(Guid value);
        partial void OnActionTypeIDChanged();
        partial void OnHistoryIDChanging(Guid value);
        partial void OnHistoryIDChanged();
        partial void OnNewValueChanging(string value);
        partial void OnNewValueChanged();
        partial void OnOldValueChanging(string value);
        partial void OnOldValueChanged();
        partial void OnTableNameChanging(string value);
        partial void OnTableNameChanged();
        partial void OnUserIDChanging(Guid value);
        partial void OnUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="History"/> class.
        /// </summary>
        public History()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ActionDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ActionDate
        {
            get
            {
                return this._actionDate;
            }
            set
            {
                if ((this._actionDate != value))
                {
                    this.OnActionDateChanging(value);
                    this.RaiseDataMemberChanging("ActionDate");
                    this.ValidateProperty("ActionDate", value);
                    this._actionDate = value;
                    this.RaiseDataMemberChanged("ActionDate");
                    this.OnActionDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ActionType"/> entity.
        /// </summary>
        [Association("ActionType_History", "ActionTypeID", "ActionTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public ActionType ActionType
        {
            get
            {
                if ((this._actionType == null))
                {
                    this._actionType = new EntityRef<ActionType>(this, "ActionType", this.FilterActionType);
                }
                return this._actionType.Entity;
            }
            set
            {
                ActionType previous = this.ActionType;
                if ((previous != value))
                {
                    this.ValidateProperty("ActionType", value);
                    if ((previous != null))
                    {
                        this._actionType.Entity = null;
                        previous.Histories.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ActionTypeID = value.ActionTypeID;
                    }
                    else
                    {
                        this.ActionTypeID = default(Guid);
                    }
                    this._actionType.Entity = value;
                    if ((value != null))
                    {
                        value.Histories.Add(this);
                    }
                    this.RaisePropertyChanged("ActionType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ActionTypeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ActionTypeID
        {
            get
            {
                return this._actionTypeID;
            }
            set
            {
                if ((this._actionTypeID != value))
                {
                    this.OnActionTypeIDChanging(value);
                    this.RaiseDataMemberChanging("ActionTypeID");
                    this.ValidateProperty("ActionTypeID", value);
                    this._actionTypeID = value;
                    this.RaiseDataMemberChanged("ActionTypeID");
                    this.OnActionTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HistoryID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid HistoryID
        {
            get
            {
                return this._historyID;
            }
            set
            {
                if ((this._historyID != value))
                {
                    this.OnHistoryIDChanging(value);
                    this.ValidateProperty("HistoryID", value);
                    this._historyID = value;
                    this.RaisePropertyChanged("HistoryID");
                    this.OnHistoryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NewValue' value.
        /// </summary>
        [DataMember()]
        public string NewValue
        {
            get
            {
                return this._newValue;
            }
            set
            {
                if ((this._newValue != value))
                {
                    this.OnNewValueChanging(value);
                    this.RaiseDataMemberChanging("NewValue");
                    this.ValidateProperty("NewValue", value);
                    this._newValue = value;
                    this.RaiseDataMemberChanged("NewValue");
                    this.OnNewValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OldValue' value.
        /// </summary>
        [DataMember()]
        public string OldValue
        {
            get
            {
                return this._oldValue;
            }
            set
            {
                if ((this._oldValue != value))
                {
                    this.OnOldValueChanging(value);
                    this.RaiseDataMemberChanging("OldValue");
                    this.ValidateProperty("OldValue", value);
                    this._oldValue = value;
                    this.RaiseDataMemberChanged("OldValue");
                    this.OnOldValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TableName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                if ((this._tableName != value))
                {
                    this.OnTableNameChanging(value);
                    this.RaiseDataMemberChanging("TableName");
                    this.ValidateProperty("TableName", value);
                    this._tableName = value;
                    this.RaiseDataMemberChanged("TableName");
                    this.OnTableNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="User"/> entity.
        /// </summary>
        [Association("User_History", "UserID", "UserID", IsForeignKey=true)]
        [XmlIgnore()]
        public User User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<User>(this, "User", this.FilterUser);
                }
                return this._user.Entity;
            }
            set
            {
                User previous = this.User;
                if ((previous != value))
                {
                    this.ValidateProperty("User", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.Histories.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserID = value.UserID;
                    }
                    else
                    {
                        this.UserID = default(Guid);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.Histories.Add(this);
                    }
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        private bool FilterActionType(ActionType entity)
        {
            return (entity.ActionTypeID == this.ActionTypeID);
        }
        
        private bool FilterUser(User entity)
        {
            return (entity.UserID == this.UserID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._historyID;
        }
    }
    
    /// <summary>
    /// The 'Log' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class Log : Entity
    {
        
        private string _appDomainName;
        
        private EntityCollection<CategoryLog> _categoryLogs;
        
        private Nullable<int> _eventID;
        
        private string _formattedMessage;
        
        private int _logID;
        
        private string _machineName;
        
        private string _message;
        
        private int _priority;
        
        private string _processID;
        
        private string _processName;
        
        private string _severity;
        
        private string _threadName;
        
        private DateTime _timestamp;
        
        private string _title;
        
        private string _win32ThreadId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAppDomainNameChanging(string value);
        partial void OnAppDomainNameChanged();
        partial void OnEventIDChanging(Nullable<int> value);
        partial void OnEventIDChanged();
        partial void OnFormattedMessageChanging(string value);
        partial void OnFormattedMessageChanged();
        partial void OnLogIDChanging(int value);
        partial void OnLogIDChanged();
        partial void OnMachineNameChanging(string value);
        partial void OnMachineNameChanged();
        partial void OnMessageChanging(string value);
        partial void OnMessageChanged();
        partial void OnPriorityChanging(int value);
        partial void OnPriorityChanged();
        partial void OnProcessIDChanging(string value);
        partial void OnProcessIDChanged();
        partial void OnProcessNameChanging(string value);
        partial void OnProcessNameChanged();
        partial void OnSeverityChanging(string value);
        partial void OnSeverityChanged();
        partial void OnThreadNameChanging(string value);
        partial void OnThreadNameChanged();
        partial void OnTimestampChanging(DateTime value);
        partial void OnTimestampChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnWin32ThreadIdChanging(string value);
        partial void OnWin32ThreadIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Log"/> class.
        /// </summary>
        public Log()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AppDomainName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(512)]
        public string AppDomainName
        {
            get
            {
                return this._appDomainName;
            }
            set
            {
                if ((this._appDomainName != value))
                {
                    this.OnAppDomainNameChanging(value);
                    this.RaiseDataMemberChanging("AppDomainName");
                    this.ValidateProperty("AppDomainName", value);
                    this._appDomainName = value;
                    this.RaiseDataMemberChanged("AppDomainName");
                    this.OnAppDomainNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CategoryLog"/> entities.
        /// </summary>
        [Association("Log_CategoryLog", "LogID", "LogID")]
        [XmlIgnore()]
        public EntityCollection<CategoryLog> CategoryLogs
        {
            get
            {
                if ((this._categoryLogs == null))
                {
                    this._categoryLogs = new EntityCollection<CategoryLog>(this, "CategoryLogs", this.FilterCategoryLogs, this.AttachCategoryLogs, this.DetachCategoryLogs);
                }
                return this._categoryLogs;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EventID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> EventID
        {
            get
            {
                return this._eventID;
            }
            set
            {
                if ((this._eventID != value))
                {
                    this.OnEventIDChanging(value);
                    this.RaiseDataMemberChanging("EventID");
                    this.ValidateProperty("EventID", value);
                    this._eventID = value;
                    this.RaiseDataMemberChanged("EventID");
                    this.OnEventIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FormattedMessage' value.
        /// </summary>
        [DataMember()]
        public string FormattedMessage
        {
            get
            {
                return this._formattedMessage;
            }
            set
            {
                if ((this._formattedMessage != value))
                {
                    this.OnFormattedMessageChanging(value);
                    this.RaiseDataMemberChanging("FormattedMessage");
                    this.ValidateProperty("FormattedMessage", value);
                    this._formattedMessage = value;
                    this.RaiseDataMemberChanged("FormattedMessage");
                    this.OnFormattedMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LogID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int LogID
        {
            get
            {
                return this._logID;
            }
            set
            {
                if ((this._logID != value))
                {
                    this.OnLogIDChanging(value);
                    this.ValidateProperty("LogID", value);
                    this._logID = value;
                    this.RaisePropertyChanged("LogID");
                    this.OnLogIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MachineName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(32)]
        public string MachineName
        {
            get
            {
                return this._machineName;
            }
            set
            {
                if ((this._machineName != value))
                {
                    this.OnMachineNameChanging(value);
                    this.RaiseDataMemberChanging("MachineName");
                    this.ValidateProperty("MachineName", value);
                    this._machineName = value;
                    this.RaiseDataMemberChanged("MachineName");
                    this.OnMachineNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Message' value.
        /// </summary>
        [DataMember()]
        [StringLength(1500)]
        public string Message
        {
            get
            {
                return this._message;
            }
            set
            {
                if ((this._message != value))
                {
                    this.OnMessageChanging(value);
                    this.RaiseDataMemberChanging("Message");
                    this.ValidateProperty("Message", value);
                    this._message = value;
                    this.RaiseDataMemberChanged("Message");
                    this.OnMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Priority' value.
        /// </summary>
        [DataMember()]
        public int Priority
        {
            get
            {
                return this._priority;
            }
            set
            {
                if ((this._priority != value))
                {
                    this.OnPriorityChanging(value);
                    this.RaiseDataMemberChanging("Priority");
                    this.ValidateProperty("Priority", value);
                    this._priority = value;
                    this.RaiseDataMemberChanged("Priority");
                    this.OnPriorityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProcessID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(256)]
        public string ProcessID
        {
            get
            {
                return this._processID;
            }
            set
            {
                if ((this._processID != value))
                {
                    this.OnProcessIDChanging(value);
                    this.RaiseDataMemberChanging("ProcessID");
                    this.ValidateProperty("ProcessID", value);
                    this._processID = value;
                    this.RaiseDataMemberChanged("ProcessID");
                    this.OnProcessIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProcessName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(512)]
        public string ProcessName
        {
            get
            {
                return this._processName;
            }
            set
            {
                if ((this._processName != value))
                {
                    this.OnProcessNameChanging(value);
                    this.RaiseDataMemberChanging("ProcessName");
                    this.ValidateProperty("ProcessName", value);
                    this._processName = value;
                    this.RaiseDataMemberChanged("ProcessName");
                    this.OnProcessNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Severity' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(32)]
        public string Severity
        {
            get
            {
                return this._severity;
            }
            set
            {
                if ((this._severity != value))
                {
                    this.OnSeverityChanging(value);
                    this.RaiseDataMemberChanging("Severity");
                    this.ValidateProperty("Severity", value);
                    this._severity = value;
                    this.RaiseDataMemberChanged("Severity");
                    this.OnSeverityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ThreadName' value.
        /// </summary>
        [DataMember()]
        [StringLength(512)]
        public string ThreadName
        {
            get
            {
                return this._threadName;
            }
            set
            {
                if ((this._threadName != value))
                {
                    this.OnThreadNameChanging(value);
                    this.RaiseDataMemberChanging("ThreadName");
                    this.ValidateProperty("ThreadName", value);
                    this._threadName = value;
                    this.RaiseDataMemberChanged("ThreadName");
                    this.OnThreadNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Timestamp' value.
        /// </summary>
        [DataMember()]
        public DateTime Timestamp
        {
            get
            {
                return this._timestamp;
            }
            set
            {
                if ((this._timestamp != value))
                {
                    this.OnTimestampChanging(value);
                    this.RaiseDataMemberChanging("Timestamp");
                    this.ValidateProperty("Timestamp", value);
                    this._timestamp = value;
                    this.RaiseDataMemberChanged("Timestamp");
                    this.OnTimestampChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Title' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(256)]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Win32ThreadId' value.
        /// </summary>
        [DataMember()]
        [StringLength(128)]
        public string Win32ThreadId
        {
            get
            {
                return this._win32ThreadId;
            }
            set
            {
                if ((this._win32ThreadId != value))
                {
                    this.OnWin32ThreadIdChanging(value);
                    this.RaiseDataMemberChanging("Win32ThreadId");
                    this.ValidateProperty("Win32ThreadId", value);
                    this._win32ThreadId = value;
                    this.RaiseDataMemberChanged("Win32ThreadId");
                    this.OnWin32ThreadIdChanged();
                }
            }
        }
        
        private void AttachCategoryLogs(CategoryLog entity)
        {
            entity.Log = this;
        }
        
        private void DetachCategoryLogs(CategoryLog entity)
        {
            entity.Log = null;
        }
        
        private bool FilterCategoryLogs(CategoryLog entity)
        {
            return (entity.LogID == this.LogID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._logID;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'LogInService' domain service.
    /// </summary>
    public sealed partial class LogInContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LogInContext"/> class.
        /// </summary>
        public LogInContext() : 
                this(new WebDomainClient<ILogInServiceContract>(new Uri("citPOINT-eNeg-Data-Web-LogInService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LogInContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The LogInService service URI.</param>
        public LogInContext(Uri serviceUri) : 
                this(new WebDomainClient<ILogInServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LogInContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public LogInContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="LoginUser"/> entities that have been loaded into this <see cref="LogInContext"/> instance.
        /// </summary>
        public EntitySet<LoginUser> LoginUsers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<LoginUser>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LoginUser"/> entities using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LoginUser"/> entities.</returns>
        public EntityQuery<LoginUser> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<LoginUser>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LoginUser"/> entities using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LoginUser"/> entities.</returns>
        public EntityQuery<LoginUser> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<LoginUser>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LoginUser"/> entities using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LoginUser"/> entities.</returns>
        public EntityQuery<LoginUser> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<LoginUser>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AuthenticateUser' method of the domain service.
        /// </summary>
        /// <param name="Name">The value for the 'Name' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation AuthenticateUser(string Name, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Name", Name);
            this.ValidateMethod("AuthenticateUser", parameters);
            return this.InvokeOperation("AuthenticateUser", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AuthenticateUser' method of the domain service.
        /// </summary>
        /// <param name="Name">The value for the 'Name' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation AuthenticateUser(string Name)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Name", Name);
            this.ValidateMethod("AuthenticateUser", parameters);
            return this.InvokeOperation("AuthenticateUser", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new LogInContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'LogInService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface ILogInServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'AuthenticateUser' operation.
            /// </summary>
            /// <param name="Name">The value for the 'Name' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LogInService/AuthenticateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LogInService/AuthenticateUser", ReplyAction="http://tempuri.org/LogInService/AuthenticateUserResponse")]
            IAsyncResult BeginAuthenticateUser(string Name, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAuthenticateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAuthenticateUser'.</param>
            void EndAuthenticateUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LogInService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LogInService/GetUser", ReplyAction="http://tempuri.org/LogInService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<LoginUser> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LogInService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LogInService/Login", ReplyAction="http://tempuri.org/LogInService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<LoginUser> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LogInService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LogInService/Logout", ReplyAction="http://tempuri.org/LogInService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<LoginUser> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LogInService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LogInService/SubmitChanges", ReplyAction="http://tempuri.org/LogInService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class LogInContextEntityContainer : EntityContainer
        {
            
            public LogInContextEntityContainer()
            {
                this.CreateEntitySet<LoginUser>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The 'LoginUser' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class LoginUser : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private Nullable<Guid> _accountTypeID;
        
        private string _address;
        
        private string _answerHash;
        
        private string _answerSalt;
        
        private bool _checkForNewEmailAddress;
        
        private bool _checkForNewPassword;
        
        private string _city;
        
        private string _clientAddress;
        
        private string _companyName;
        
        private Nullable<Guid> _countryID;
        
        private DateTime _createDate;
        
        private Nullable<int> _cultureID;
        
        private bool _disabled;
        
        private string _emailAddress;
        
        private IEnumerable<string> _eNegRights;
        
        private IEnumerable<string> _eNegRoles;
        
        private string _firstName;
        
        private Nullable<bool> _gender;
        
        private bool _hasActivationMail;
        
        private Nullable<bool> _hasPublicProfile;
        
        private string _ipAddress;
        
        private Nullable<bool> _isFemale;
        
        private Nullable<bool> _isMale;
        
        private bool _isOrganizationOwner;
        
        private bool _isSelected;
        
        private bool _isUserMaintenance;
        
        private Nullable<DateTime> _lastLoginDate;
        
        private string _lastName;
        
        private Nullable<int> _lcid;
        
        private bool _locked;
        
        private Nullable<DateTime> _lockedDate;
        
        private string _mobile;
        
        private string _name = string.Empty;
        
        private string _newEmail;
        
        private string _newEmailConfirmation;
        
        private string _newPassword;
        
        private string _newPasswordConfirmation;
        
        private bool _online;
        
        private string _operationStringUrl;
        
        private Guid _organizationOwnedID;
        
        private string _password;
        
        private string _passwordAnswer;
        
        private string _passwordConfirmation;
        
        private string _phone;
        
        private string _postalCode;
        
        private string _profileDescription;
        
        private Nullable<bool> _reset;
        
        private IEnumerable<string> _roles;
        
        private Nullable<Guid> _securityQuestionID;
        
        private Guid _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAccountTypeIDChanging(Nullable<Guid> value);
        partial void OnAccountTypeIDChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnAnswerHashChanging(string value);
        partial void OnAnswerHashChanged();
        partial void OnAnswerSaltChanging(string value);
        partial void OnAnswerSaltChanged();
        partial void OnCheckForNewEmailAddressChanging(bool value);
        partial void OnCheckForNewEmailAddressChanged();
        partial void OnCheckForNewPasswordChanging(bool value);
        partial void OnCheckForNewPasswordChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnClientAddressChanging(string value);
        partial void OnClientAddressChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnCountryIDChanging(Nullable<Guid> value);
        partial void OnCountryIDChanged();
        partial void OnCreateDateChanging(DateTime value);
        partial void OnCreateDateChanged();
        partial void OnCultureIDChanging(Nullable<int> value);
        partial void OnCultureIDChanged();
        partial void OnDisabledChanging(bool value);
        partial void OnDisabledChanged();
        partial void OnEmailAddressChanging(string value);
        partial void OnEmailAddressChanged();
        partial void OneNegRightsChanging(IEnumerable<string> value);
        partial void OneNegRightsChanged();
        partial void OneNegRolesChanging(IEnumerable<string> value);
        partial void OneNegRolesChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnGenderChanging(Nullable<bool> value);
        partial void OnGenderChanged();
        partial void OnHasActivationMailChanging(bool value);
        partial void OnHasActivationMailChanged();
        partial void OnHasPublicProfileChanging(Nullable<bool> value);
        partial void OnHasPublicProfileChanged();
        partial void OnIPAddressChanging(string value);
        partial void OnIPAddressChanged();
        partial void OnIsFemaleChanging(Nullable<bool> value);
        partial void OnIsFemaleChanged();
        partial void OnIsMaleChanging(Nullable<bool> value);
        partial void OnIsMaleChanged();
        partial void OnIsOrganizationOwnerChanging(bool value);
        partial void OnIsOrganizationOwnerChanged();
        partial void OnIsSelectedChanging(bool value);
        partial void OnIsSelectedChanged();
        partial void OnIsUserMaintenanceChanging(bool value);
        partial void OnIsUserMaintenanceChanged();
        partial void OnLastLoginDateChanging(Nullable<DateTime> value);
        partial void OnLastLoginDateChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnLCIDChanging(Nullable<int> value);
        partial void OnLCIDChanged();
        partial void OnLockedChanging(bool value);
        partial void OnLockedChanged();
        partial void OnLockedDateChanging(Nullable<DateTime> value);
        partial void OnLockedDateChanged();
        partial void OnMobileChanging(string value);
        partial void OnMobileChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNewEmailChanging(string value);
        partial void OnNewEmailChanged();
        partial void OnNewEmailConfirmationChanging(string value);
        partial void OnNewEmailConfirmationChanged();
        partial void OnNewPasswordChanging(string value);
        partial void OnNewPasswordChanged();
        partial void OnNewPasswordConfirmationChanging(string value);
        partial void OnNewPasswordConfirmationChanged();
        partial void OnOnlineChanging(bool value);
        partial void OnOnlineChanged();
        partial void OnOperationStringUrlChanging(string value);
        partial void OnOperationStringUrlChanged();
        partial void OnOrganizationOwnedIDChanging(Guid value);
        partial void OnOrganizationOwnedIDChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnPasswordAnswerChanging(string value);
        partial void OnPasswordAnswerChanged();
        partial void OnPasswordConfirmationChanging(string value);
        partial void OnPasswordConfirmationChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();
        partial void OnProfileDescriptionChanging(string value);
        partial void OnProfileDescriptionChanged();
        partial void OnResetChanging(Nullable<bool> value);
        partial void OnResetChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();
        partial void OnSecurityQuestionIDChanging(Nullable<Guid> value);
        partial void OnSecurityQuestionIDChanged();
        partial void OnUserIDChanging(Guid value);
        partial void OnUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginUser"/> class.
        /// </summary>
        public LoginUser()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AccountTypeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> AccountTypeID
        {
            get
            {
                return this._accountTypeID;
            }
            set
            {
                if ((this._accountTypeID != value))
                {
                    this.OnAccountTypeIDChanging(value);
                    this.RaiseDataMemberChanging("AccountTypeID");
                    this.ValidateProperty("AccountTypeID", value);
                    this._accountTypeID = value;
                    this.RaiseDataMemberChanged("AccountTypeID");
                    this.OnAccountTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [StringLength(300)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AnswerHash' value.
        /// </summary>
        [DataMember()]
        [StringLength(150)]
        public string AnswerHash
        {
            get
            {
                return this._answerHash;
            }
            set
            {
                if ((this._answerHash != value))
                {
                    this.OnAnswerHashChanging(value);
                    this.RaiseDataMemberChanging("AnswerHash");
                    this.ValidateProperty("AnswerHash", value);
                    this._answerHash = value;
                    this.RaiseDataMemberChanged("AnswerHash");
                    this.OnAnswerHashChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AnswerSalt' value.
        /// </summary>
        [DataMember()]
        [StringLength(150)]
        public string AnswerSalt
        {
            get
            {
                return this._answerSalt;
            }
            set
            {
                if ((this._answerSalt != value))
                {
                    this.OnAnswerSaltChanging(value);
                    this.RaiseDataMemberChanging("AnswerSalt");
                    this.ValidateProperty("AnswerSalt", value);
                    this._answerSalt = value;
                    this.RaiseDataMemberChanged("AnswerSalt");
                    this.OnAnswerSaltChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CheckForNewEmailAddress' value.
        /// </summary>
        [DataMember()]
        public bool CheckForNewEmailAddress
        {
            get
            {
                return this._checkForNewEmailAddress;
            }
            set
            {
                if ((this._checkForNewEmailAddress != value))
                {
                    this.OnCheckForNewEmailAddressChanging(value);
                    this.RaiseDataMemberChanging("CheckForNewEmailAddress");
                    this.ValidateProperty("CheckForNewEmailAddress", value);
                    this._checkForNewEmailAddress = value;
                    this.RaiseDataMemberChanged("CheckForNewEmailAddress");
                    this.OnCheckForNewEmailAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CheckForNewPassword' value.
        /// </summary>
        [DataMember()]
        public bool CheckForNewPassword
        {
            get
            {
                return this._checkForNewPassword;
            }
            set
            {
                if ((this._checkForNewPassword != value))
                {
                    this.OnCheckForNewPasswordChanging(value);
                    this.RaiseDataMemberChanging("CheckForNewPassword");
                    this.ValidateProperty("CheckForNewPassword", value);
                    this._checkForNewPassword = value;
                    this.RaiseDataMemberChanged("CheckForNewPassword");
                    this.OnCheckForNewPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClientAddress' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string ClientAddress
        {
            get
            {
                return this._clientAddress;
            }
            set
            {
                if ((this._clientAddress != value))
                {
                    this.OnClientAddressChanging(value);
                    this.ValidateProperty("ClientAddress", value);
                    this._clientAddress = value;
                    this.RaisePropertyChanged("ClientAddress");
                    this.OnClientAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyName' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string CompanyName
        {
            get
            {
                return this._companyName;
            }
            set
            {
                if ((this._companyName != value))
                {
                    this.OnCompanyNameChanging(value);
                    this.RaiseDataMemberChanging("CompanyName");
                    this.ValidateProperty("CompanyName", value);
                    this._companyName = value;
                    this.RaiseDataMemberChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CountryID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> CountryID
        {
            get
            {
                return this._countryID;
            }
            set
            {
                if ((this._countryID != value))
                {
                    this.OnCountryIDChanging(value);
                    this.RaiseDataMemberChanging("CountryID");
                    this.ValidateProperty("CountryID", value);
                    this._countryID = value;
                    this.RaiseDataMemberChanged("CountryID");
                    this.OnCountryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreateDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                if ((this._createDate != value))
                {
                    this.OnCreateDateChanging(value);
                    this.RaiseDataMemberChanging("CreateDate");
                    this.ValidateProperty("CreateDate", value);
                    this._createDate = value;
                    this.RaiseDataMemberChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CultureID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> CultureID
        {
            get
            {
                return this._cultureID;
            }
            set
            {
                if ((this._cultureID != value))
                {
                    this.OnCultureIDChanging(value);
                    this.RaiseDataMemberChanging("CultureID");
                    this.ValidateProperty("CultureID", value);
                    this._cultureID = value;
                    this.RaiseDataMemberChanged("CultureID");
                    this.OnCultureIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Disabled' value.
        /// </summary>
        [DataMember()]
        public bool Disabled
        {
            get
            {
                return this._disabled;
            }
            set
            {
                if ((this._disabled != value))
                {
                    this.OnDisabledChanging(value);
                    this.RaiseDataMemberChanging("Disabled");
                    this.ValidateProperty("Disabled", value);
                    this._disabled = value;
                    this.RaiseDataMemberChanged("Disabled");
                    this.OnDisabledChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmailAddress' value.
        /// </summary>
        [CustomValidation(typeof(UserRules), "IsValidEmail")]
        [DataMember()]
        [Display(Name="E-mail")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ErrorResources))]
        [StringLength(300)]
        public string EmailAddress
        {
            get
            {
                return this._emailAddress;
            }
            set
            {
                if ((this._emailAddress != value))
                {
                    this.OnEmailAddressChanging(value);
                    this.RaiseDataMemberChanging("EmailAddress");
                    this.ValidateProperty("EmailAddress", value);
                    this._emailAddress = value;
                    this.RaiseDataMemberChanged("EmailAddress");
                    this.OnEmailAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'eNegRights' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<string> eNegRights
        {
            get
            {
                return this._eNegRights;
            }
            set
            {
                if ((this._eNegRights != value))
                {
                    this.OneNegRightsChanging(value);
                    this.RaiseDataMemberChanging("eNegRights");
                    this.ValidateProperty("eNegRights", value);
                    this._eNegRights = value;
                    this.RaiseDataMemberChanged("eNegRights");
                    this.OneNegRightsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'eNegRoles' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<string> eNegRoles
        {
            get
            {
                return this._eNegRoles;
            }
            set
            {
                if ((this._eNegRoles != value))
                {
                    this.OneNegRolesChanging(value);
                    this.RaiseDataMemberChanging("eNegRoles");
                    this.ValidateProperty("eNegRoles", value);
                    this._eNegRoles = value;
                    this.RaiseDataMemberChanged("eNegRoles");
                    this.OneNegRolesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="First Name")]
        [StringLength(100)]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Gender' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Gender
        {
            get
            {
                return this._gender;
            }
            set
            {
                if ((this._gender != value))
                {
                    this.OnGenderChanging(value);
                    this.RaiseDataMemberChanging("Gender");
                    this.ValidateProperty("Gender", value);
                    this._gender = value;
                    this.RaiseDataMemberChanged("Gender");
                    this.OnGenderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HasActivationMail' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(true)]
        public bool HasActivationMail
        {
            get
            {
                return this._hasActivationMail;
            }
            set
            {
                if ((this._hasActivationMail != value))
                {
                    this.OnHasActivationMailChanging(value);
                    this.RaiseDataMemberChanging("HasActivationMail");
                    this.ValidateProperty("HasActivationMail", value);
                    this._hasActivationMail = value;
                    this.RaiseDataMemberChanged("HasActivationMail");
                    this.OnHasActivationMailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HasPublicProfile' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> HasPublicProfile
        {
            get
            {
                return this._hasPublicProfile;
            }
            set
            {
                if ((this._hasPublicProfile != value))
                {
                    this.OnHasPublicProfileChanging(value);
                    this.RaiseDataMemberChanging("HasPublicProfile");
                    this.ValidateProperty("HasPublicProfile", value);
                    this._hasPublicProfile = value;
                    this.RaiseDataMemberChanged("HasPublicProfile");
                    this.OnHasPublicProfileChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IPAddress' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string IPAddress
        {
            get
            {
                return this._ipAddress;
            }
            set
            {
                if ((this._ipAddress != value))
                {
                    this.OnIPAddressChanging(value);
                    this.RaiseDataMemberChanging("IPAddress");
                    this.ValidateProperty("IPAddress", value);
                    this._ipAddress = value;
                    this.RaiseDataMemberChanged("IPAddress");
                    this.OnIPAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsFemale' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsFemale
        {
            get
            {
                return this._isFemale;
            }
            set
            {
                if ((this._isFemale != value))
                {
                    this.OnIsFemaleChanging(value);
                    this.RaiseDataMemberChanging("IsFemale");
                    this.ValidateProperty("IsFemale", value);
                    this._isFemale = value;
                    this.RaiseDataMemberChanged("IsFemale");
                    this.OnIsFemaleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsMale' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsMale
        {
            get
            {
                return this._isMale;
            }
            set
            {
                if ((this._isMale != value))
                {
                    this.OnIsMaleChanging(value);
                    this.RaiseDataMemberChanging("IsMale");
                    this.ValidateProperty("IsMale", value);
                    this._isMale = value;
                    this.RaiseDataMemberChanged("IsMale");
                    this.OnIsMaleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsOrganizationOwner' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(null)]
        public bool IsOrganizationOwner
        {
            get
            {
                return this._isOrganizationOwner;
            }
            set
            {
                if ((this._isOrganizationOwner != value))
                {
                    this.OnIsOrganizationOwnerChanging(value);
                    this.RaiseDataMemberChanging("IsOrganizationOwner");
                    this.ValidateProperty("IsOrganizationOwner", value);
                    this._isOrganizationOwner = value;
                    this.RaiseDataMemberChanged("IsOrganizationOwner");
                    this.OnIsOrganizationOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsSelected' value.
        /// </summary>
        [DataMember()]
        public bool IsSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnIsSelectedChanging(value);
                    this.RaiseDataMemberChanging("IsSelected");
                    this.ValidateProperty("IsSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("IsSelected");
                    this.OnIsSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsUserMaintenance' value.
        /// </summary>
        [DataMember()]
        public bool IsUserMaintenance
        {
            get
            {
                return this._isUserMaintenance;
            }
            set
            {
                if ((this._isUserMaintenance != value))
                {
                    this.OnIsUserMaintenanceChanging(value);
                    this.RaiseDataMemberChanging("IsUserMaintenance");
                    this.ValidateProperty("IsUserMaintenance", value);
                    this._isUserMaintenance = value;
                    this.RaiseDataMemberChanged("IsUserMaintenance");
                    this.OnIsUserMaintenanceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastLoginDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> LastLoginDate
        {
            get
            {
                return this._lastLoginDate;
            }
            set
            {
                if ((this._lastLoginDate != value))
                {
                    this.OnLastLoginDateChanging(value);
                    this.RaiseDataMemberChanging("LastLoginDate");
                    this.ValidateProperty("LastLoginDate", value);
                    this._lastLoginDate = value;
                    this.RaiseDataMemberChanged("LastLoginDate");
                    this.OnLastLoginDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Last Name")]
        [StringLength(100)]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.RaiseDataMemberChanging("LastName");
                    this.ValidateProperty("LastName", value);
                    this._lastName = value;
                    this.RaiseDataMemberChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LCID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> LCID
        {
            get
            {
                return this._lcid;
            }
            set
            {
                if ((this._lcid != value))
                {
                    this.OnLCIDChanging(value);
                    this.RaiseDataMemberChanging("LCID");
                    this.ValidateProperty("LCID", value);
                    this._lcid = value;
                    this.RaiseDataMemberChanged("LCID");
                    this.OnLCIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Locked' value.
        /// </summary>
        [DataMember()]
        public bool Locked
        {
            get
            {
                return this._locked;
            }
            set
            {
                if ((this._locked != value))
                {
                    this.OnLockedChanging(value);
                    this.RaiseDataMemberChanging("Locked");
                    this.ValidateProperty("Locked", value);
                    this._locked = value;
                    this.RaiseDataMemberChanged("Locked");
                    this.OnLockedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LockedDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> LockedDate
        {
            get
            {
                return this._lockedDate;
            }
            set
            {
                if ((this._lockedDate != value))
                {
                    this.OnLockedDateChanging(value);
                    this.RaiseDataMemberChanging("LockedDate");
                    this.ValidateProperty("LockedDate", value);
                    this._lockedDate = value;
                    this.RaiseDataMemberChanged("LockedDate");
                    this.OnLockedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Mobile' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Mobile
        {
            get
            {
                return this._mobile;
            }
            set
            {
                if ((this._mobile != value))
                {
                    this.OnMobileChanging(value);
                    this.RaiseDataMemberChanging("Mobile");
                    this.ValidateProperty("Mobile", value);
                    this._mobile = value;
                    this.RaiseDataMemberChanged("Mobile");
                    this.OnMobileChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NewEmail' value.
        /// </summary>
        [CustomValidation(typeof(UserRules), "CheckNewEmailWithConfirmation")]
        [CustomValidation(typeof(UserRules), "IsNewEmailFieldRequired")]
        [CustomValidation(typeof(UserRules), "IsValidEmail")]
        [DataMember()]
        public string NewEmail
        {
            get
            {
                return this._newEmail;
            }
            set
            {
                if ((this._newEmail != value))
                {
                    this.OnNewEmailChanging(value);
                    this.RaiseDataMemberChanging("NewEmail");
                    this.ValidateProperty("NewEmail", value);
                    this._newEmail = value;
                    this.RaiseDataMemberChanged("NewEmail");
                    this.OnNewEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NewEmailConfirmation' value.
        /// </summary>
        [CustomValidation(typeof(UserRules), "CheckNewEmailConfirmation")]
        [CustomValidation(typeof(UserRules), "IsNewEmailFieldRequired")]
        [CustomValidation(typeof(UserRules), "IsValidEmail")]
        [DataMember()]
        public string NewEmailConfirmation
        {
            get
            {
                return this._newEmailConfirmation;
            }
            set
            {
                if ((this._newEmailConfirmation != value))
                {
                    this.OnNewEmailConfirmationChanging(value);
                    this.RaiseDataMemberChanging("NewEmailConfirmation");
                    this.ValidateProperty("NewEmailConfirmation", value);
                    this._newEmailConfirmation = value;
                    this.RaiseDataMemberChanged("NewEmailConfirmation");
                    this.OnNewEmailConfirmationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NewPassword' value.
        /// </summary>
        [CustomValidation(typeof(UserRules), "CheckNewPasswordMinLenght")]
        [CustomValidation(typeof(UserRules), "CheckNewPasswordWithNewConfirmation")]
        [CustomValidation(typeof(UserRules), "CheckPasswordMaxLenght")]
        [CustomValidation(typeof(UserRules), "IsNewPasswordFieldRequired")]
        [DataMember()]
        public string NewPassword
        {
            get
            {
                return this._newPassword;
            }
            set
            {
                if ((this._newPassword != value))
                {
                    this.OnNewPasswordChanging(value);
                    this.RaiseDataMemberChanging("NewPassword");
                    this.ValidateProperty("NewPassword", value);
                    this._newPassword = value;
                    this.RaiseDataMemberChanged("NewPassword");
                    this.OnNewPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NewPasswordConfirmation' value.
        /// </summary>
        [CustomValidation(typeof(UserRules), "CheckNewPasswordConfirmation")]
        [CustomValidation(typeof(UserRules), "CheckNewPasswordMinLenght")]
        [CustomValidation(typeof(UserRules), "CheckPasswordMaxLenght")]
        [CustomValidation(typeof(UserRules), "IsNewPasswordFieldRequired")]
        [DataMember()]
        public string NewPasswordConfirmation
        {
            get
            {
                return this._newPasswordConfirmation;
            }
            set
            {
                if ((this._newPasswordConfirmation != value))
                {
                    this.OnNewPasswordConfirmationChanging(value);
                    this.RaiseDataMemberChanging("NewPasswordConfirmation");
                    this.ValidateProperty("NewPasswordConfirmation", value);
                    this._newPasswordConfirmation = value;
                    this.RaiseDataMemberChanged("NewPasswordConfirmation");
                    this.OnNewPasswordConfirmationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Online' value.
        /// </summary>
        [DataMember()]
        public bool Online
        {
            get
            {
                return this._online;
            }
            set
            {
                if ((this._online != value))
                {
                    this.OnOnlineChanging(value);
                    this.RaiseDataMemberChanging("Online");
                    this.ValidateProperty("Online", value);
                    this._online = value;
                    this.RaiseDataMemberChanged("Online");
                    this.OnOnlineChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OperationStringUrl' value.
        /// </summary>
        [DataMember()]
        public string OperationStringUrl
        {
            get
            {
                return this._operationStringUrl;
            }
            set
            {
                if ((this._operationStringUrl != value))
                {
                    this.OnOperationStringUrlChanging(value);
                    this.RaiseDataMemberChanging("OperationStringUrl");
                    this.ValidateProperty("OperationStringUrl", value);
                    this._operationStringUrl = value;
                    this.RaiseDataMemberChanged("OperationStringUrl");
                    this.OnOperationStringUrlChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationOwnedID' value.
        /// </summary>
        [DataMember()]
        public Guid OrganizationOwnedID
        {
            get
            {
                return this._organizationOwnedID;
            }
            set
            {
                if ((this._organizationOwnedID != value))
                {
                    this.OnOrganizationOwnedIDChanging(value);
                    this.RaiseDataMemberChanging("OrganizationOwnedID");
                    this.ValidateProperty("OrganizationOwnedID", value);
                    this._organizationOwnedID = value;
                    this.RaiseDataMemberChanged("OrganizationOwnedID");
                    this.OnOrganizationOwnedIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Password' value.
        /// </summary>
        [CustomValidation(typeof(UserRules), "CheckPasswordMaxLenght")]
        [CustomValidation(typeof(UserRules), "CheckPasswordMinLenght")]
        [CustomValidation(typeof(UserRules), "CheckPasswordWithConfirmation")]
        [DataMember()]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ErrorResources))]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this.ValidateProperty("Password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordAnswer' value.
        /// </summary>
        [DataMember()]
        public string PasswordAnswer
        {
            get
            {
                return this._passwordAnswer;
            }
            set
            {
                if ((this._passwordAnswer != value))
                {
                    this.OnPasswordAnswerChanging(value);
                    this.RaiseDataMemberChanging("PasswordAnswer");
                    this.ValidateProperty("PasswordAnswer", value);
                    this._passwordAnswer = value;
                    this.RaiseDataMemberChanged("PasswordAnswer");
                    this.OnPasswordAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordConfirmation' value.
        /// </summary>
        [CustomValidation(typeof(UserRules), "CheckPasswordConfirmation")]
        [CustomValidation(typeof(UserRules), "CheckPasswordMaxLenght")]
        [CustomValidation(typeof(UserRules), "CheckPasswordMinLenght")]
        [DataMember()]
        [Display(Name="Password Confirmation")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ErrorResources))]
        public string PasswordConfirmation
        {
            get
            {
                return this._passwordConfirmation;
            }
            set
            {
                if ((this._passwordConfirmation != value))
                {
                    this.OnPasswordConfirmationChanging(value);
                    this.RaiseDataMemberChanging("PasswordConfirmation");
                    this.ValidateProperty("PasswordConfirmation", value);
                    this._passwordConfirmation = value;
                    this.RaiseDataMemberChanged("PasswordConfirmation");
                    this.OnPasswordConfirmationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Phone' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.RaiseDataMemberChanging("Phone");
                    this.ValidateProperty("Phone", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PostalCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(150)]
        public string PostalCode
        {
            get
            {
                return this._postalCode;
            }
            set
            {
                if ((this._postalCode != value))
                {
                    this.OnPostalCodeChanging(value);
                    this.RaiseDataMemberChanging("PostalCode");
                    this.ValidateProperty("PostalCode", value);
                    this._postalCode = value;
                    this.RaiseDataMemberChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProfileDescription' value.
        /// </summary>
        [DataMember()]
        [StringLength(300)]
        public string ProfileDescription
        {
            get
            {
                return this._profileDescription;
            }
            set
            {
                if ((this._profileDescription != value))
                {
                    this.OnProfileDescriptionChanging(value);
                    this.RaiseDataMemberChanging("ProfileDescription");
                    this.ValidateProperty("ProfileDescription", value);
                    this._profileDescription = value;
                    this.RaiseDataMemberChanged("ProfileDescription");
                    this.OnProfileDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Reset' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Reset
        {
            get
            {
                return this._reset;
            }
            set
            {
                if ((this._reset != value))
                {
                    this.OnResetChanging(value);
                    this.RaiseDataMemberChanging("Reset");
                    this.ValidateProperty("Reset", value);
                    this._reset = value;
                    this.RaiseDataMemberChanged("Reset");
                    this.OnResetChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.RaiseDataMemberChanging("Roles");
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaiseDataMemberChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecurityQuestionID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> SecurityQuestionID
        {
            get
            {
                return this._securityQuestionID;
            }
            set
            {
                if ((this._securityQuestionID != value))
                {
                    this.OnSecurityQuestionIDChanging(value);
                    this.RaiseDataMemberChanging("SecurityQuestionID");
                    this.ValidateProperty("SecurityQuestionID", value);
                    this._securityQuestionID = value;
                    this.RaiseDataMemberChanged("SecurityQuestionID");
                    this.OnSecurityQuestionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaisePropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._name, this._userID);
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'MailService' domain service.
    /// </summary>
    public sealed partial class MailContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MailContext"/> class.
        /// </summary>
        public MailContext() : 
                this(new WebDomainClient<IMailServiceContract>(new Uri("citPOINT-eNeg-Data-Web-MailService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MailContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The MailService service URI.</param>
        public MailContext(Uri serviceUri) : 
                this(new WebDomainClient<IMailServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MailContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public MailContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SendMailMessage' method of the domain service.
        /// </summary>
        /// <param name="from">The value for the 'from' parameter of this action.</param>
        /// <param name="to">The value for the 'to' parameter of this action.</param>
        /// <param name="bcc">The value for the 'bcc' parameter of this action.</param>
        /// <param name="cc">The value for the 'cc' parameter of this action.</param>
        /// <param name="subject">The value for the 'subject' parameter of this action.</param>
        /// <param name="body">The value for the 'body' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SendMailMessage(string from, string to, string bcc, string cc, string subject, string body, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("from", from);
            parameters.Add("to", to);
            parameters.Add("bcc", bcc);
            parameters.Add("cc", cc);
            parameters.Add("subject", subject);
            parameters.Add("body", body);
            this.ValidateMethod("SendMailMessage", parameters);
            return this.InvokeOperation("SendMailMessage", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SendMailMessage' method of the domain service.
        /// </summary>
        /// <param name="from">The value for the 'from' parameter of this action.</param>
        /// <param name="to">The value for the 'to' parameter of this action.</param>
        /// <param name="bcc">The value for the 'bcc' parameter of this action.</param>
        /// <param name="cc">The value for the 'cc' parameter of this action.</param>
        /// <param name="subject">The value for the 'subject' parameter of this action.</param>
        /// <param name="body">The value for the 'body' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SendMailMessage(string from, string to, string bcc, string cc, string subject, string body)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("from", from);
            parameters.Add("to", to);
            parameters.Add("bcc", bcc);
            parameters.Add("cc", cc);
            parameters.Add("subject", subject);
            parameters.Add("body", body);
            this.ValidateMethod("SendMailMessage", parameters);
            return this.InvokeOperation("SendMailMessage", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MailContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'MailService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IMailServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'SendMailMessage' operation.
            /// </summary>
            /// <param name="from">The value for the 'from' parameter of this action.</param>
            /// <param name="to">The value for the 'to' parameter of this action.</param>
            /// <param name="bcc">The value for the 'bcc' parameter of this action.</param>
            /// <param name="cc">The value for the 'cc' parameter of this action.</param>
            /// <param name="subject">The value for the 'subject' parameter of this action.</param>
            /// <param name="body">The value for the 'body' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MailService/SendMailMessageDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MailService/SendMailMessage", ReplyAction="http://tempuri.org/MailService/SendMailMessageResponse")]
            IAsyncResult BeginSendMailMessage(string from, string to, string bcc, string cc, string subject, string body, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSendMailMessage'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSendMailMessage'.</param>
            void EndSendMailMessage(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MailService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MailService/SubmitChanges", ReplyAction="http://tempuri.org/MailService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class MailContextEntityContainer : EntityContainer
        {
            
            public MailContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// The 'Message' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class Message : Entity
    {
        
        private EntityCollection<Attachement> _attachements;
        
        private EntityRef<Channel> _channel;
        
        private Guid _channelID;
        
        private EntityRef<Conversation> _conversation;
        
        private Nullable<Guid> _conversationID;
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private bool _isAppsMessage;
        
        private bool _isChecked;
        
        private bool _isSelected;
        
        private bool _isSent;
        
        private string _messageContent;
        
        private Nullable<DateTime> _messageDate;
        
        private Guid _messageID;
        
        private string _messageReceiver;
        
        private string _messageSender;
        
        private string _messageSubject;
        
        private string _negotiator;
        
        private bool _received;
        
        private bool _sent;
        
        private EntityRef<User> _user;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnChannelIDChanging(Guid value);
        partial void OnChannelIDChanged();
        partial void OnConversationIDChanging(Nullable<Guid> value);
        partial void OnConversationIDChanged();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnIsAppsMessageChanging(bool value);
        partial void OnIsAppsMessageChanged();
        partial void OnIsCheckedChanging(bool value);
        partial void OnIsCheckedChanged();
        partial void OnIsSelectedChanging(bool value);
        partial void OnIsSelectedChanged();
        partial void OnIsSentChanging(bool value);
        partial void OnIsSentChanged();
        partial void OnMessageContentChanging(string value);
        partial void OnMessageContentChanged();
        partial void OnMessageDateChanging(Nullable<DateTime> value);
        partial void OnMessageDateChanged();
        partial void OnMessageIDChanging(Guid value);
        partial void OnMessageIDChanged();
        partial void OnMessageReceiverChanging(string value);
        partial void OnMessageReceiverChanged();
        partial void OnMessageSenderChanging(string value);
        partial void OnMessageSenderChanged();
        partial void OnMessageSubjectChanging(string value);
        partial void OnMessageSubjectChanged();
        partial void OnNegotiatorChanging(string value);
        partial void OnNegotiatorChanged();
        partial void OnReceivedChanging(bool value);
        partial void OnReceivedChanged();
        partial void OnSentChanging(bool value);
        partial void OnSentChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Message"/> class.
        /// </summary>
        public Message()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Attachement"/> entities.
        /// </summary>
        [Association("Message_Attachement", "MessageID", "MessageID")]
        [XmlIgnore()]
        public EntityCollection<Attachement> Attachements
        {
            get
            {
                if ((this._attachements == null))
                {
                    this._attachements = new EntityCollection<Attachement>(this, "Attachements", this.FilterAttachements, this.AttachAttachements, this.DetachAttachements);
                }
                return this._attachements;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Channel"/> entity.
        /// </summary>
        [Association("Channel_Message", "ChannelID", "ChannelID", IsForeignKey=true)]
        [XmlIgnore()]
        public Channel Channel
        {
            get
            {
                if ((this._channel == null))
                {
                    this._channel = new EntityRef<Channel>(this, "Channel", this.FilterChannel);
                }
                return this._channel.Entity;
            }
            set
            {
                Channel previous = this.Channel;
                if ((previous != value))
                {
                    this.ValidateProperty("Channel", value);
                    if ((previous != null))
                    {
                        this._channel.Entity = null;
                        previous.Messages.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ChannelID = value.ChannelID;
                    }
                    else
                    {
                        this.ChannelID = default(Guid);
                    }
                    this._channel.Entity = value;
                    if ((value != null))
                    {
                        value.Messages.Add(this);
                    }
                    this.RaisePropertyChanged("Channel");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChannelID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ChannelID
        {
            get
            {
                return this._channelID;
            }
            set
            {
                if ((this._channelID != value))
                {
                    this.OnChannelIDChanging(value);
                    this.RaiseDataMemberChanging("ChannelID");
                    this.ValidateProperty("ChannelID", value);
                    this._channelID = value;
                    this.RaiseDataMemberChanged("ChannelID");
                    this.OnChannelIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Conversation"/> entity.
        /// </summary>
        [Association("Conversation_Message", "ConversationID", "ConversationID", IsForeignKey=true)]
        [XmlIgnore()]
        public Conversation Conversation
        {
            get
            {
                if ((this._conversation == null))
                {
                    this._conversation = new EntityRef<Conversation>(this, "Conversation", this.FilterConversation);
                }
                return this._conversation.Entity;
            }
            set
            {
                Conversation previous = this.Conversation;
                if ((previous != value))
                {
                    this.ValidateProperty("Conversation", value);
                    if ((previous != null))
                    {
                        this._conversation.Entity = null;
                        previous.Messages.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ConversationID = value.ConversationID;
                    }
                    else
                    {
                        this.ConversationID = default(Nullable<Guid>);
                    }
                    this._conversation.Entity = value;
                    if ((value != null))
                    {
                        value.Messages.Add(this);
                    }
                    this.RaisePropertyChanged("Conversation");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ConversationID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> ConversationID
        {
            get
            {
                return this._conversationID;
            }
            set
            {
                if ((this._conversationID != value))
                {
                    this.OnConversationIDChanging(value);
                    this.RaiseDataMemberChanging("ConversationID");
                    this.ValidateProperty("ConversationID", value);
                    this._conversationID = value;
                    this.RaiseDataMemberChanged("ConversationID");
                    this.OnConversationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsAppsMessage' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(null)]
        public bool IsAppsMessage
        {
            get
            {
                return this._isAppsMessage;
            }
            set
            {
                if ((this._isAppsMessage != value))
                {
                    this.OnIsAppsMessageChanging(value);
                    this.RaiseDataMemberChanging("IsAppsMessage");
                    this.ValidateProperty("IsAppsMessage", value);
                    this._isAppsMessage = value;
                    this.RaiseDataMemberChanged("IsAppsMessage");
                    this.OnIsAppsMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsChecked' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(null)]
        public bool IsChecked
        {
            get
            {
                return this._isChecked;
            }
            set
            {
                if ((this._isChecked != value))
                {
                    this.OnIsCheckedChanging(value);
                    this.RaiseDataMemberChanging("IsChecked");
                    this.ValidateProperty("IsChecked", value);
                    this._isChecked = value;
                    this.RaiseDataMemberChanged("IsChecked");
                    this.OnIsCheckedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsSelected' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(null)]
        public bool IsSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnIsSelectedChanging(value);
                    this.RaiseDataMemberChanging("IsSelected");
                    this.ValidateProperty("IsSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("IsSelected");
                    this.OnIsSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsSent' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(null)]
        public bool IsSent
        {
            get
            {
                return this._isSent;
            }
            set
            {
                if ((this._isSent != value))
                {
                    this.OnIsSentChanging(value);
                    this.RaiseDataMemberChanging("IsSent");
                    this.ValidateProperty("IsSent", value);
                    this._isSent = value;
                    this.RaiseDataMemberChanged("IsSent");
                    this.OnIsSentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageContent' value.
        /// </summary>
        [CustomValidation(typeof(UserRules), "CheckMessageLenght")]
        [DataMember()]
        [Required(ErrorMessageResourceName="MessageContentRequired", ErrorMessageResourceType=typeof(ErrorResources))]
        public string MessageContent
        {
            get
            {
                return this._messageContent;
            }
            set
            {
                if ((this._messageContent != value))
                {
                    this.OnMessageContentChanging(value);
                    this.RaiseDataMemberChanging("MessageContent");
                    this.ValidateProperty("MessageContent", value);
                    this._messageContent = value;
                    this.RaiseDataMemberChanged("MessageContent");
                    this.OnMessageContentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> MessageDate
        {
            get
            {
                return this._messageDate;
            }
            set
            {
                if ((this._messageDate != value))
                {
                    this.OnMessageDateChanging(value);
                    this.RaiseDataMemberChanging("MessageDate");
                    this.ValidateProperty("MessageDate", value);
                    this._messageDate = value;
                    this.RaiseDataMemberChanged("MessageDate");
                    this.OnMessageDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid MessageID
        {
            get
            {
                return this._messageID;
            }
            set
            {
                if ((this._messageID != value))
                {
                    this.OnMessageIDChanging(value);
                    this.ValidateProperty("MessageID", value);
                    this._messageID = value;
                    this.RaisePropertyChanged("MessageID");
                    this.OnMessageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageReceiver' value.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessageResourceName="MessageReceiverRequired", ErrorMessageResourceType=typeof(ErrorResources))]
        [StringLength(300)]
        public string MessageReceiver
        {
            get
            {
                return this._messageReceiver;
            }
            set
            {
                if ((this._messageReceiver != value))
                {
                    this.OnMessageReceiverChanging(value);
                    this.RaiseDataMemberChanging("MessageReceiver");
                    this.ValidateProperty("MessageReceiver", value);
                    this._messageReceiver = value;
                    this.RaiseDataMemberChanged("MessageReceiver");
                    this.OnMessageReceiverChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageSender' value.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessageResourceName="MessageSenderRequired", ErrorMessageResourceType=typeof(ErrorResources))]
        [StringLength(300)]
        public string MessageSender
        {
            get
            {
                return this._messageSender;
            }
            set
            {
                if ((this._messageSender != value))
                {
                    this.OnMessageSenderChanging(value);
                    this.RaiseDataMemberChanging("MessageSender");
                    this.ValidateProperty("MessageSender", value);
                    this._messageSender = value;
                    this.RaiseDataMemberChanged("MessageSender");
                    this.OnMessageSenderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageSubject' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string MessageSubject
        {
            get
            {
                return this._messageSubject;
            }
            set
            {
                if ((this._messageSubject != value))
                {
                    this.OnMessageSubjectChanging(value);
                    this.RaiseDataMemberChanging("MessageSubject");
                    this.ValidateProperty("MessageSubject", value);
                    this._messageSubject = value;
                    this.RaiseDataMemberChanged("MessageSubject");
                    this.OnMessageSubjectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Negotiator' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string Negotiator
        {
            get
            {
                return this._negotiator;
            }
            set
            {
                if ((this._negotiator != value))
                {
                    this.OnNegotiatorChanging(value);
                    this.ValidateProperty("Negotiator", value);
                    this._negotiator = value;
                    this.RaisePropertyChanged("Negotiator");
                    this.OnNegotiatorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Received' value.
        /// </summary>
        [DataMember()]
        public bool Received
        {
            get
            {
                return this._received;
            }
            set
            {
                if ((this._received != value))
                {
                    this.OnReceivedChanging(value);
                    this.RaiseDataMemberChanging("Received");
                    this.ValidateProperty("Received", value);
                    this._received = value;
                    this.RaiseDataMemberChanged("Received");
                    this.OnReceivedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sent' value.
        /// </summary>
        [DataMember()]
        public bool Sent
        {
            get
            {
                return this._sent;
            }
            set
            {
                if ((this._sent != value))
                {
                    this.OnSentChanging(value);
                    this.RaiseDataMemberChanging("Sent");
                    this.ValidateProperty("Sent", value);
                    this._sent = value;
                    this.RaiseDataMemberChanged("Sent");
                    this.OnSentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="User"/> entity.
        /// </summary>
        [Association("User_Message", "DeletedBy", "UserID", IsForeignKey=true)]
        [XmlIgnore()]
        public User User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<User>(this, "User", this.FilterUser);
                }
                return this._user.Entity;
            }
            set
            {
                User previous = this.User;
                if ((previous != value))
                {
                    this.ValidateProperty("User", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.Messages.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DeletedBy = value.UserID;
                    }
                    else
                    {
                        this.DeletedBy = default(Nullable<Guid>);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.Messages.Add(this);
                    }
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        private void AttachAttachements(Attachement entity)
        {
            entity.Message = this;
        }
        
        private void DetachAttachements(Attachement entity)
        {
            entity.Message = null;
        }
        
        private bool FilterAttachements(Attachement entity)
        {
            return (entity.MessageID == this.MessageID);
        }
        
        private bool FilterChannel(Channel entity)
        {
            return (entity.ChannelID == this.ChannelID);
        }
        
        private bool FilterConversation(Conversation entity)
        {
            return (entity.ConversationID == this.ConversationID);
        }
        
        private bool FilterUser(User entity)
        {
            return (entity.UserID == this.DeletedBy);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._messageID;
        }
    }
    
    /// <summary>
    /// The 'Negotiation' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class Negotiation : Entity
    {
        
        private EntityCollection<Conversation> _conversations;
        
        private DateTime _createdDate;
        
        private Nullable<bool> _deleted;
        
        private Nullable<DateTime> _deletedDate;
        
        private bool _isNegSelected;
        
        private bool _isNewNegotiation;
        
        private EntityCollection<NegotiationApplicationStatu> _negotiationApplicationStatus;
        
        private Guid _negotiationID;
        
        private string _negotiationName;
        
        private EntityCollection<NegotiationOrganization> _negotiationOrganizations;
        
        private EntityRef<NegotiationStatu> _negotiationStatu;
        
        private Nullable<Guid> _statusID;
        
        private Guid _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedDateChanging(Nullable<DateTime> value);
        partial void OnDeletedDateChanged();
        partial void OnIsNegSelectedChanging(bool value);
        partial void OnIsNegSelectedChanged();
        partial void OnIsNewNegotiationChanging(bool value);
        partial void OnIsNewNegotiationChanged();
        partial void OnNegotiationIDChanging(Guid value);
        partial void OnNegotiationIDChanged();
        partial void OnNegotiationNameChanging(string value);
        partial void OnNegotiationNameChanged();
        partial void OnStatusIDChanging(Nullable<Guid> value);
        partial void OnStatusIDChanged();
        partial void OnUserIDChanging(Guid value);
        partial void OnUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Negotiation"/> class.
        /// </summary>
        public Negotiation()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Conversation"/> entities.
        /// </summary>
        [Association("Negotiation_Conversation", "NegotiationID", "NegotiationID")]
        [XmlIgnore()]
        public EntityCollection<Conversation> Conversations
        {
            get
            {
                if ((this._conversations == null))
                {
                    this._conversations = new EntityCollection<Conversation>(this, "Conversations", this.FilterConversations, this.AttachConversations, this.DetachConversations);
                }
                return this._conversations;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreatedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CreatedDate
        {
            get
            {
                return this._createdDate;
            }
            set
            {
                if ((this._createdDate != value))
                {
                    this.OnCreatedDateChanging(value);
                    this.RaiseDataMemberChanging("CreatedDate");
                    this.ValidateProperty("CreatedDate", value);
                    this._createdDate = value;
                    this.RaiseDataMemberChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedDate
        {
            get
            {
                return this._deletedDate;
            }
            set
            {
                if ((this._deletedDate != value))
                {
                    this.OnDeletedDateChanging(value);
                    this.RaiseDataMemberChanging("DeletedDate");
                    this.ValidateProperty("DeletedDate", value);
                    this._deletedDate = value;
                    this.RaiseDataMemberChanged("DeletedDate");
                    this.OnDeletedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsNegSelected' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(null)]
        public bool IsNegSelected
        {
            get
            {
                return this._isNegSelected;
            }
            set
            {
                if ((this._isNegSelected != value))
                {
                    this.OnIsNegSelectedChanging(value);
                    this.RaiseDataMemberChanging("IsNegSelected");
                    this.ValidateProperty("IsNegSelected", value);
                    this._isNegSelected = value;
                    this.RaiseDataMemberChanged("IsNegSelected");
                    this.OnIsNegSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsNewNegotiation' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(null)]
        public bool IsNewNegotiation
        {
            get
            {
                return this._isNewNegotiation;
            }
            set
            {
                if ((this._isNewNegotiation != value))
                {
                    this.OnIsNewNegotiationChanging(value);
                    this.RaiseDataMemberChanging("IsNewNegotiation");
                    this.ValidateProperty("IsNewNegotiation", value);
                    this._isNewNegotiation = value;
                    this.RaiseDataMemberChanged("IsNewNegotiation");
                    this.OnIsNewNegotiationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="NegotiationApplicationStatu"/> entities.
        /// </summary>
        [Association("Negotiation_NegotiationApplicationStatu", "NegotiationID", "NegotiationID")]
        [XmlIgnore()]
        public EntityCollection<NegotiationApplicationStatu> NegotiationApplicationStatus
        {
            get
            {
                if ((this._negotiationApplicationStatus == null))
                {
                    this._negotiationApplicationStatus = new EntityCollection<NegotiationApplicationStatu>(this, "NegotiationApplicationStatus", this.FilterNegotiationApplicationStatus, this.AttachNegotiationApplicationStatus, this.DetachNegotiationApplicationStatus);
                }
                return this._negotiationApplicationStatus;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid NegotiationID
        {
            get
            {
                return this._negotiationID;
            }
            set
            {
                if ((this._negotiationID != value))
                {
                    this.OnNegotiationIDChanging(value);
                    this.ValidateProperty("NegotiationID", value);
                    this._negotiationID = value;
                    this.RaisePropertyChanged("NegotiationID");
                    this.OnNegotiationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(150)]
        public string NegotiationName
        {
            get
            {
                return this._negotiationName;
            }
            set
            {
                if ((this._negotiationName != value))
                {
                    this.OnNegotiationNameChanging(value);
                    this.RaiseDataMemberChanging("NegotiationName");
                    this.ValidateProperty("NegotiationName", value);
                    this._negotiationName = value;
                    this.RaiseDataMemberChanged("NegotiationName");
                    this.OnNegotiationNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="NegotiationOrganization"/> entities.
        /// </summary>
        [Association("Negotiation_NegotiationOrganization", "NegotiationID", "NegotiationID")]
        [XmlIgnore()]
        public EntityCollection<NegotiationOrganization> NegotiationOrganizations
        {
            get
            {
                if ((this._negotiationOrganizations == null))
                {
                    this._negotiationOrganizations = new EntityCollection<NegotiationOrganization>(this, "NegotiationOrganizations", this.FilterNegotiationOrganizations, this.AttachNegotiationOrganizations, this.DetachNegotiationOrganizations);
                }
                return this._negotiationOrganizations;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="NegotiationStatu"/> entity.
        /// </summary>
        [Association("NegotiationStatu_Negotiation", "StatusID", "StatusID", IsForeignKey=true)]
        [XmlIgnore()]
        public NegotiationStatu NegotiationStatu
        {
            get
            {
                if ((this._negotiationStatu == null))
                {
                    this._negotiationStatu = new EntityRef<NegotiationStatu>(this, "NegotiationStatu", this.FilterNegotiationStatu);
                }
                return this._negotiationStatu.Entity;
            }
            set
            {
                NegotiationStatu previous = this.NegotiationStatu;
                if ((previous != value))
                {
                    this.ValidateProperty("NegotiationStatu", value);
                    if ((previous != null))
                    {
                        this._negotiationStatu.Entity = null;
                        previous.Negotiations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.StatusID = value.StatusID;
                    }
                    else
                    {
                        this.StatusID = default(Nullable<Guid>);
                    }
                    this._negotiationStatu.Entity = value;
                    if ((value != null))
                    {
                        value.Negotiations.Add(this);
                    }
                    this.RaisePropertyChanged("NegotiationStatu");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StatusID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> StatusID
        {
            get
            {
                return this._statusID;
            }
            set
            {
                if ((this._statusID != value))
                {
                    this.OnStatusIDChanging(value);
                    this.RaiseDataMemberChanging("StatusID");
                    this.ValidateProperty("StatusID", value);
                    this._statusID = value;
                    this.RaiseDataMemberChanged("StatusID");
                    this.OnStatusIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        public Guid UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        private void AttachConversations(Conversation entity)
        {
            entity.Negotiation = this;
        }
        
        private void DetachConversations(Conversation entity)
        {
            entity.Negotiation = null;
        }
        
        private bool FilterConversations(Conversation entity)
        {
            return (entity.NegotiationID == this.NegotiationID);
        }
        
        private void AttachNegotiationApplicationStatus(NegotiationApplicationStatu entity)
        {
            entity.Negotiation = this;
        }
        
        private void DetachNegotiationApplicationStatus(NegotiationApplicationStatu entity)
        {
            entity.Negotiation = null;
        }
        
        private bool FilterNegotiationApplicationStatus(NegotiationApplicationStatu entity)
        {
            return (entity.NegotiationID == this.NegotiationID);
        }
        
        private void AttachNegotiationOrganizations(NegotiationOrganization entity)
        {
            entity.Negotiation = this;
        }
        
        private void DetachNegotiationOrganizations(NegotiationOrganization entity)
        {
            entity.Negotiation = null;
        }
        
        private bool FilterNegotiationOrganizations(NegotiationOrganization entity)
        {
            return (entity.NegotiationID == this.NegotiationID);
        }
        
        private bool FilterNegotiationStatu(NegotiationStatu entity)
        {
            return (entity.StatusID == this.StatusID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._negotiationID;
        }
    }
    
    /// <summary>
    /// The 'NegotiationApplicationStatu' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class NegotiationApplicationStatu : Entity
    {
        
        private bool _active;
        
        private EntityRef<Application> _application;
        
        private Guid _applicationID;
        
        private EntityRef<Negotiation> _negotiation;
        
        private Guid _negotiationApplicationStatusID;
        
        private Guid _negotiationID;
        
        private EntityRef<User> _user;
        
        private Guid _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(bool value);
        partial void OnActiveChanged();
        partial void OnApplicationIDChanging(Guid value);
        partial void OnApplicationIDChanged();
        partial void OnNegotiationApplicationStatusIDChanging(Guid value);
        partial void OnNegotiationApplicationStatusIDChanged();
        partial void OnNegotiationIDChanging(Guid value);
        partial void OnNegotiationIDChanged();
        partial void OnUserIDChanging(Guid value);
        partial void OnUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NegotiationApplicationStatu"/> class.
        /// </summary>
        public NegotiationApplicationStatu()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Application"/> entity.
        /// </summary>
        [Association("Application_NegotiationApplicationStatu", "ApplicationID", "ApplicationID", IsForeignKey=true)]
        [XmlIgnore()]
        public Application Application
        {
            get
            {
                if ((this._application == null))
                {
                    this._application = new EntityRef<Application>(this, "Application", this.FilterApplication);
                }
                return this._application.Entity;
            }
            set
            {
                Application previous = this.Application;
                if ((previous != value))
                {
                    this.ValidateProperty("Application", value);
                    if ((previous != null))
                    {
                        this._application.Entity = null;
                        previous.NegotiationApplicationStatus.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ApplicationID = value.ApplicationID;
                    }
                    else
                    {
                        this.ApplicationID = default(Guid);
                    }
                    this._application.Entity = value;
                    if ((value != null))
                    {
                        value.NegotiationApplicationStatus.Add(this);
                    }
                    this.RaisePropertyChanged("Application");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ApplicationID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ApplicationID
        {
            get
            {
                return this._applicationID;
            }
            set
            {
                if ((this._applicationID != value))
                {
                    this.OnApplicationIDChanging(value);
                    this.RaiseDataMemberChanging("ApplicationID");
                    this.ValidateProperty("ApplicationID", value);
                    this._applicationID = value;
                    this.RaiseDataMemberChanged("ApplicationID");
                    this.OnApplicationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Negotiation"/> entity.
        /// </summary>
        [Association("Negotiation_NegotiationApplicationStatu", "NegotiationID", "NegotiationID", IsForeignKey=true)]
        [XmlIgnore()]
        public Negotiation Negotiation
        {
            get
            {
                if ((this._negotiation == null))
                {
                    this._negotiation = new EntityRef<Negotiation>(this, "Negotiation", this.FilterNegotiation);
                }
                return this._negotiation.Entity;
            }
            set
            {
                Negotiation previous = this.Negotiation;
                if ((previous != value))
                {
                    this.ValidateProperty("Negotiation", value);
                    if ((previous != null))
                    {
                        this._negotiation.Entity = null;
                        previous.NegotiationApplicationStatus.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.NegotiationID = value.NegotiationID;
                    }
                    else
                    {
                        this.NegotiationID = default(Guid);
                    }
                    this._negotiation.Entity = value;
                    if ((value != null))
                    {
                        value.NegotiationApplicationStatus.Add(this);
                    }
                    this.RaisePropertyChanged("Negotiation");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationApplicationStatusID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid NegotiationApplicationStatusID
        {
            get
            {
                return this._negotiationApplicationStatusID;
            }
            set
            {
                if ((this._negotiationApplicationStatusID != value))
                {
                    this.OnNegotiationApplicationStatusIDChanging(value);
                    this.ValidateProperty("NegotiationApplicationStatusID", value);
                    this._negotiationApplicationStatusID = value;
                    this.RaisePropertyChanged("NegotiationApplicationStatusID");
                    this.OnNegotiationApplicationStatusIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid NegotiationID
        {
            get
            {
                return this._negotiationID;
            }
            set
            {
                if ((this._negotiationID != value))
                {
                    this.OnNegotiationIDChanging(value);
                    this.RaiseDataMemberChanging("NegotiationID");
                    this.ValidateProperty("NegotiationID", value);
                    this._negotiationID = value;
                    this.RaiseDataMemberChanged("NegotiationID");
                    this.OnNegotiationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="User"/> entity.
        /// </summary>
        [Association("User_NegotiationApplicationStatu", "UserID", "UserID", IsForeignKey=true)]
        [XmlIgnore()]
        public User User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<User>(this, "User", this.FilterUser);
                }
                return this._user.Entity;
            }
            set
            {
                User previous = this.User;
                if ((previous != value))
                {
                    this.ValidateProperty("User", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.NegotiationApplicationStatus.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserID = value.UserID;
                    }
                    else
                    {
                        this.UserID = default(Guid);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.NegotiationApplicationStatus.Add(this);
                    }
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        private bool FilterApplication(Application entity)
        {
            return (entity.ApplicationID == this.ApplicationID);
        }
        
        private bool FilterNegotiation(Negotiation entity)
        {
            return (entity.NegotiationID == this.NegotiationID);
        }
        
        private bool FilterUser(User entity)
        {
            return (entity.UserID == this.UserID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._negotiationApplicationStatusID;
        }
    }
    
    /// <summary>
    /// The 'NegotiationArchive' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class NegotiationArchive : Entity
    {
        
        private int _archiveID;
        
        private Nullable<int> _archiveMonth;
        
        private Nullable<int> _archiveYear;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnArchiveIDChanging(int value);
        partial void OnArchiveIDChanged();
        partial void OnArchiveMonthChanging(Nullable<int> value);
        partial void OnArchiveMonthChanged();
        partial void OnArchiveYearChanging(Nullable<int> value);
        partial void OnArchiveYearChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NegotiationArchive"/> class.
        /// </summary>
        public NegotiationArchive()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ArchiveID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ArchiveID
        {
            get
            {
                return this._archiveID;
            }
            set
            {
                if ((this._archiveID != value))
                {
                    this.OnArchiveIDChanging(value);
                    this.ValidateProperty("ArchiveID", value);
                    this._archiveID = value;
                    this.RaisePropertyChanged("ArchiveID");
                    this.OnArchiveIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ArchiveMonth' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ArchiveMonth
        {
            get
            {
                return this._archiveMonth;
            }
            set
            {
                if ((this._archiveMonth != value))
                {
                    this.OnArchiveMonthChanging(value);
                    this.RaiseDataMemberChanging("ArchiveMonth");
                    this.ValidateProperty("ArchiveMonth", value);
                    this._archiveMonth = value;
                    this.RaiseDataMemberChanged("ArchiveMonth");
                    this.OnArchiveMonthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ArchiveYear' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ArchiveYear
        {
            get
            {
                return this._archiveYear;
            }
            set
            {
                if ((this._archiveYear != value))
                {
                    this.OnArchiveYearChanging(value);
                    this.RaiseDataMemberChanging("ArchiveYear");
                    this.ValidateProperty("ArchiveYear", value);
                    this._archiveYear = value;
                    this.RaiseDataMemberChanged("ArchiveYear");
                    this.OnArchiveYearChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._archiveID;
        }
    }
    
    /// <summary>
    /// The 'NegotiationOrganization' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class NegotiationOrganization : Entity
    {
        
        private bool _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private EntityRef<Negotiation> _negotiation;
        
        private Guid _negotiationID;
        
        private Guid _negotiationOrganizationID;
        
        private EntityRef<Organization> _organization;
        
        private Guid _organizationID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeletedChanging(bool value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnNegotiationIDChanging(Guid value);
        partial void OnNegotiationIDChanged();
        partial void OnNegotiationOrganizationIDChanging(Guid value);
        partial void OnNegotiationOrganizationIDChanged();
        partial void OnOrganizationIDChanging(Guid value);
        partial void OnOrganizationIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NegotiationOrganization"/> class.
        /// </summary>
        public NegotiationOrganization()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public bool Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Negotiation"/> entity.
        /// </summary>
        [Association("Negotiation_NegotiationOrganization", "NegotiationID", "NegotiationID", IsForeignKey=true)]
        [XmlIgnore()]
        public Negotiation Negotiation
        {
            get
            {
                if ((this._negotiation == null))
                {
                    this._negotiation = new EntityRef<Negotiation>(this, "Negotiation", this.FilterNegotiation);
                }
                return this._negotiation.Entity;
            }
            set
            {
                Negotiation previous = this.Negotiation;
                if ((previous != value))
                {
                    this.ValidateProperty("Negotiation", value);
                    if ((previous != null))
                    {
                        this._negotiation.Entity = null;
                        previous.NegotiationOrganizations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.NegotiationID = value.NegotiationID;
                    }
                    else
                    {
                        this.NegotiationID = default(Guid);
                    }
                    this._negotiation.Entity = value;
                    if ((value != null))
                    {
                        value.NegotiationOrganizations.Add(this);
                    }
                    this.RaisePropertyChanged("Negotiation");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid NegotiationID
        {
            get
            {
                return this._negotiationID;
            }
            set
            {
                if ((this._negotiationID != value))
                {
                    this.OnNegotiationIDChanging(value);
                    this.RaiseDataMemberChanging("NegotiationID");
                    this.ValidateProperty("NegotiationID", value);
                    this._negotiationID = value;
                    this.RaiseDataMemberChanged("NegotiationID");
                    this.OnNegotiationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationOrganizationID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid NegotiationOrganizationID
        {
            get
            {
                return this._negotiationOrganizationID;
            }
            set
            {
                if ((this._negotiationOrganizationID != value))
                {
                    this.OnNegotiationOrganizationIDChanging(value);
                    this.ValidateProperty("NegotiationOrganizationID", value);
                    this._negotiationOrganizationID = value;
                    this.RaisePropertyChanged("NegotiationOrganizationID");
                    this.OnNegotiationOrganizationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Organization"/> entity.
        /// </summary>
        [Association("Organization_NegotiationOrganization", "OrganizationID", "OrganizationID", IsForeignKey=true)]
        [XmlIgnore()]
        public Organization Organization
        {
            get
            {
                if ((this._organization == null))
                {
                    this._organization = new EntityRef<Organization>(this, "Organization", this.FilterOrganization);
                }
                return this._organization.Entity;
            }
            set
            {
                Organization previous = this.Organization;
                if ((previous != value))
                {
                    this.ValidateProperty("Organization", value);
                    if ((previous != null))
                    {
                        this._organization.Entity = null;
                        previous.NegotiationOrganizations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OrganizationID = value.OrganizationID;
                    }
                    else
                    {
                        this.OrganizationID = default(Guid);
                    }
                    this._organization.Entity = value;
                    if ((value != null))
                    {
                        value.NegotiationOrganizations.Add(this);
                    }
                    this.RaisePropertyChanged("Organization");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid OrganizationID
        {
            get
            {
                return this._organizationID;
            }
            set
            {
                if ((this._organizationID != value))
                {
                    this.OnOrganizationIDChanging(value);
                    this.RaiseDataMemberChanging("OrganizationID");
                    this.ValidateProperty("OrganizationID", value);
                    this._organizationID = value;
                    this.RaiseDataMemberChanged("OrganizationID");
                    this.OnOrganizationIDChanged();
                }
            }
        }
        
        private bool FilterNegotiation(Negotiation entity)
        {
            return (entity.NegotiationID == this.NegotiationID);
        }
        
        private bool FilterOrganization(Organization entity)
        {
            return (entity.OrganizationID == this.OrganizationID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._negotiationOrganizationID;
        }
    }
    
    /// <summary>
    /// The 'NegotiationStatu' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class NegotiationStatu : Entity
    {
        
        private EntityCollection<Negotiation> _negotiations;
        
        private string _statusDescription;
        
        private Guid _statusID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnStatusDescriptionChanging(string value);
        partial void OnStatusDescriptionChanged();
        partial void OnStatusIDChanging(Guid value);
        partial void OnStatusIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NegotiationStatu"/> class.
        /// </summary>
        public NegotiationStatu()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Negotiation"/> entities.
        /// </summary>
        [Association("NegotiationStatu_Negotiation", "StatusID", "StatusID")]
        [XmlIgnore()]
        public EntityCollection<Negotiation> Negotiations
        {
            get
            {
                if ((this._negotiations == null))
                {
                    this._negotiations = new EntityCollection<Negotiation>(this, "Negotiations", this.FilterNegotiations, this.AttachNegotiations, this.DetachNegotiations);
                }
                return this._negotiations;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StatusDescription' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string StatusDescription
        {
            get
            {
                return this._statusDescription;
            }
            set
            {
                if ((this._statusDescription != value))
                {
                    this.OnStatusDescriptionChanging(value);
                    this.RaiseDataMemberChanging("StatusDescription");
                    this.ValidateProperty("StatusDescription", value);
                    this._statusDescription = value;
                    this.RaiseDataMemberChanged("StatusDescription");
                    this.OnStatusDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StatusID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid StatusID
        {
            get
            {
                return this._statusID;
            }
            set
            {
                if ((this._statusID != value))
                {
                    this.OnStatusIDChanging(value);
                    this.ValidateProperty("StatusID", value);
                    this._statusID = value;
                    this.RaisePropertyChanged("StatusID");
                    this.OnStatusIDChanged();
                }
            }
        }
        
        private void AttachNegotiations(Negotiation entity)
        {
            entity.NegotiationStatu = this;
        }
        
        private void DetachNegotiations(Negotiation entity)
        {
            entity.NegotiationStatu = null;
        }
        
        private bool FilterNegotiations(Negotiation entity)
        {
            return (entity.StatusID == this.StatusID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._statusID;
        }
    }
    
    /// <summary>
    /// The 'Organization' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class Organization : Entity
    {
        
        private bool _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private EntityCollection<NegotiationOrganization> _negotiationOrganizations;
        
        private Guid _organizationID;
        
        private string _organizationName;
        
        private EntityRef<OrganizationType> _organizationType;
        
        private int _organizationTypeID;
        
        private EntityCollection<UserOrganization> _userOrganizations;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeletedChanging(bool value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnOrganizationIDChanging(Guid value);
        partial void OnOrganizationIDChanged();
        partial void OnOrganizationNameChanging(string value);
        partial void OnOrganizationNameChanged();
        partial void OnOrganizationTypeIDChanging(int value);
        partial void OnOrganizationTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Organization"/> class.
        /// </summary>
        public Organization()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public bool Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="NegotiationOrganization"/> entities.
        /// </summary>
        [Association("Organization_NegotiationOrganization", "OrganizationID", "OrganizationID")]
        [XmlIgnore()]
        public EntityCollection<NegotiationOrganization> NegotiationOrganizations
        {
            get
            {
                if ((this._negotiationOrganizations == null))
                {
                    this._negotiationOrganizations = new EntityCollection<NegotiationOrganization>(this, "NegotiationOrganizations", this.FilterNegotiationOrganizations, this.AttachNegotiationOrganizations, this.DetachNegotiationOrganizations);
                }
                return this._negotiationOrganizations;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid OrganizationID
        {
            get
            {
                return this._organizationID;
            }
            set
            {
                if ((this._organizationID != value))
                {
                    this.OnOrganizationIDChanging(value);
                    this.ValidateProperty("OrganizationID", value);
                    this._organizationID = value;
                    this.RaisePropertyChanged("OrganizationID");
                    this.OnOrganizationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Name")]
        [Required()]
        [StringLength(150)]
        public string OrganizationName
        {
            get
            {
                return this._organizationName;
            }
            set
            {
                if ((this._organizationName != value))
                {
                    this.OnOrganizationNameChanging(value);
                    this.RaiseDataMemberChanging("OrganizationName");
                    this.ValidateProperty("OrganizationName", value);
                    this._organizationName = value;
                    this.RaiseDataMemberChanged("OrganizationName");
                    this.OnOrganizationNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="OrganizationType"/> entity.
        /// </summary>
        [Association("OrganizationType_Organization", "OrganizationTypeID", "OrganizationTypeID", IsForeignKey=true)]
        [Display(Name="Type")]
        [XmlIgnore()]
        public OrganizationType OrganizationType
        {
            get
            {
                if ((this._organizationType == null))
                {
                    this._organizationType = new EntityRef<OrganizationType>(this, "OrganizationType", this.FilterOrganizationType);
                }
                return this._organizationType.Entity;
            }
            set
            {
                OrganizationType previous = this.OrganizationType;
                if ((previous != value))
                {
                    this.ValidateProperty("OrganizationType", value);
                    if ((previous != null))
                    {
                        this._organizationType.Entity = null;
                        previous.Organizations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OrganizationTypeID = value.OrganizationTypeID;
                    }
                    else
                    {
                        this.OrganizationTypeID = default(int);
                    }
                    this._organizationType.Entity = value;
                    if ((value != null))
                    {
                        value.Organizations.Add(this);
                    }
                    this.RaisePropertyChanged("OrganizationType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationTypeID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Type")]
        [RoundtripOriginal()]
        public int OrganizationTypeID
        {
            get
            {
                return this._organizationTypeID;
            }
            set
            {
                if ((this._organizationTypeID != value))
                {
                    this.OnOrganizationTypeIDChanging(value);
                    this.RaiseDataMemberChanging("OrganizationTypeID");
                    this.ValidateProperty("OrganizationTypeID", value);
                    this._organizationTypeID = value;
                    this.RaiseDataMemberChanged("OrganizationTypeID");
                    this.OnOrganizationTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="UserOrganization"/> entities.
        /// </summary>
        [Association("Organization_UserOrganization", "OrganizationID", "OrganizationID")]
        [XmlIgnore()]
        public EntityCollection<UserOrganization> UserOrganizations
        {
            get
            {
                if ((this._userOrganizations == null))
                {
                    this._userOrganizations = new EntityCollection<UserOrganization>(this, "UserOrganizations", this.FilterUserOrganizations, this.AttachUserOrganizations, this.DetachUserOrganizations);
                }
                return this._userOrganizations;
            }
        }
        
        private void AttachNegotiationOrganizations(NegotiationOrganization entity)
        {
            entity.Organization = this;
        }
        
        private void DetachNegotiationOrganizations(NegotiationOrganization entity)
        {
            entity.Organization = null;
        }
        
        private bool FilterNegotiationOrganizations(NegotiationOrganization entity)
        {
            return (entity.OrganizationID == this.OrganizationID);
        }
        
        private bool FilterOrganizationType(OrganizationType entity)
        {
            return (entity.OrganizationTypeID == this.OrganizationTypeID);
        }
        
        private void AttachUserOrganizations(UserOrganization entity)
        {
            entity.Organization = this;
        }
        
        private void DetachUserOrganizations(UserOrganization entity)
        {
            entity.Organization = null;
        }
        
        private bool FilterUserOrganizations(UserOrganization entity)
        {
            return (entity.OrganizationID == this.OrganizationID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._organizationID;
        }
    }
    
    /// <summary>
    /// The 'OrganizationType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class OrganizationType : Entity
    {
        
        private EntityCollection<Organization> _organizations;
        
        private int _organizationTypeID;
        
        private string _organizationTypeName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnOrganizationTypeIDChanging(int value);
        partial void OnOrganizationTypeIDChanged();
        partial void OnOrganizationTypeNameChanging(string value);
        partial void OnOrganizationTypeNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationType"/> class.
        /// </summary>
        public OrganizationType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Organization"/> entities.
        /// </summary>
        [Association("OrganizationType_Organization", "OrganizationTypeID", "OrganizationTypeID")]
        [XmlIgnore()]
        public EntityCollection<Organization> Organizations
        {
            get
            {
                if ((this._organizations == null))
                {
                    this._organizations = new EntityCollection<Organization>(this, "Organizations", this.FilterOrganizations, this.AttachOrganizations, this.DetachOrganizations);
                }
                return this._organizations;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationTypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int OrganizationTypeID
        {
            get
            {
                return this._organizationTypeID;
            }
            set
            {
                if ((this._organizationTypeID != value))
                {
                    this.OnOrganizationTypeIDChanging(value);
                    this.ValidateProperty("OrganizationTypeID", value);
                    this._organizationTypeID = value;
                    this.RaisePropertyChanged("OrganizationTypeID");
                    this.OnOrganizationTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationTypeName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string OrganizationTypeName
        {
            get
            {
                return this._organizationTypeName;
            }
            set
            {
                if ((this._organizationTypeName != value))
                {
                    this.OnOrganizationTypeNameChanging(value);
                    this.RaiseDataMemberChanging("OrganizationTypeName");
                    this.ValidateProperty("OrganizationTypeName", value);
                    this._organizationTypeName = value;
                    this.RaiseDataMemberChanged("OrganizationTypeName");
                    this.OnOrganizationTypeNameChanged();
                }
            }
        }
        
        private void AttachOrganizations(Organization entity)
        {
            entity.OrganizationType = this;
        }
        
        private void DetachOrganizations(Organization entity)
        {
            entity.OrganizationType = null;
        }
        
        private bool FilterOrganizations(Organization entity)
        {
            return (entity.OrganizationTypeID == this.OrganizationTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._organizationTypeID;
        }
    }
    
    /// <summary>
    /// The 'PreferedLanguage' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class PreferedLanguage : Entity
    {
        
        private int _lcid;
        
        private string _preferedLanguage1;
        
        private EntityCollection<User> _user;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnLCIDChanging(int value);
        partial void OnLCIDChanged();
        partial void OnPreferedLanguage1Changing(string value);
        partial void OnPreferedLanguage1Changed();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PreferedLanguage"/> class.
        /// </summary>
        public PreferedLanguage()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'LCID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int LCID
        {
            get
            {
                return this._lcid;
            }
            set
            {
                if ((this._lcid != value))
                {
                    this.OnLCIDChanging(value);
                    this.ValidateProperty("LCID", value);
                    this._lcid = value;
                    this.RaisePropertyChanged("LCID");
                    this.OnLCIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PreferedLanguage1' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string PreferedLanguage1
        {
            get
            {
                return this._preferedLanguage1;
            }
            set
            {
                if ((this._preferedLanguage1 != value))
                {
                    this.OnPreferedLanguage1Changing(value);
                    this.RaiseDataMemberChanging("PreferedLanguage1");
                    this.ValidateProperty("PreferedLanguage1", value);
                    this._preferedLanguage1 = value;
                    this.RaiseDataMemberChanged("PreferedLanguage1");
                    this.OnPreferedLanguage1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="User"/> entities.
        /// </summary>
        [Association("PreferedLanguage_User", "LCID", "LCID")]
        [XmlIgnore()]
        public EntityCollection<User> User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityCollection<User>(this, "User", this.FilterUser, this.AttachUser, this.DetachUser);
                }
                return this._user;
            }
        }
        
        private void AttachUser(User entity)
        {
            entity.PreferedLanguage = this;
        }
        
        private void DetachUser(User entity)
        {
            entity.PreferedLanguage = null;
        }
        
        private bool FilterUser(User entity)
        {
            return (entity.LCID == this.LCID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._lcid;
        }
    }
    
    /// <summary>
    /// The 'Profile' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class Profile : Entity
    {
        
        private string _currentTheme;
        
        private Guid _profileID;
        
        private EntityRef<User> _user;
        
        private Nullable<Guid> _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCurrentThemeChanging(string value);
        partial void OnCurrentThemeChanged();
        partial void OnProfileIDChanging(Guid value);
        partial void OnProfileIDChanged();
        partial void OnUserIDChanging(Nullable<Guid> value);
        partial void OnUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Profile"/> class.
        /// </summary>
        public Profile()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CurrentTheme' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string CurrentTheme
        {
            get
            {
                return this._currentTheme;
            }
            set
            {
                if ((this._currentTheme != value))
                {
                    this.OnCurrentThemeChanging(value);
                    this.RaiseDataMemberChanging("CurrentTheme");
                    this.ValidateProperty("CurrentTheme", value);
                    this._currentTheme = value;
                    this.RaiseDataMemberChanged("CurrentTheme");
                    this.OnCurrentThemeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProfileID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ProfileID
        {
            get
            {
                return this._profileID;
            }
            set
            {
                if ((this._profileID != value))
                {
                    this.OnProfileIDChanging(value);
                    this.ValidateProperty("ProfileID", value);
                    this._profileID = value;
                    this.RaisePropertyChanged("ProfileID");
                    this.OnProfileIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="User"/> entity.
        /// </summary>
        [Association("User_Profile", "UserID", "UserID", IsForeignKey=true)]
        [XmlIgnore()]
        public User User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<User>(this, "User", this.FilterUser);
                }
                return this._user.Entity;
            }
            set
            {
                User previous = this.User;
                if ((previous != value))
                {
                    this.ValidateProperty("User", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.Profile.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserID = value.UserID;
                    }
                    else
                    {
                        this.UserID = default(Nullable<Guid>);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.Profile.Add(this);
                    }
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        private bool FilterUser(User entity)
        {
            return (entity.UserID == this.UserID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._profileID;
        }
    }
    
    /// <summary>
    /// The 'Right' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class Right : Entity
    {
        
        private string _rightDescription;
        
        private Guid _rightID;
        
        private string _rightName;
        
        private EntityCollection<RoleRight> _roleRight;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnRightDescriptionChanging(string value);
        partial void OnRightDescriptionChanged();
        partial void OnRightIDChanging(Guid value);
        partial void OnRightIDChanged();
        partial void OnRightNameChanging(string value);
        partial void OnRightNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Right"/> class.
        /// </summary>
        public Right()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'RightDescription' value.
        /// </summary>
        [DataMember()]
        [StringLength(300)]
        public string RightDescription
        {
            get
            {
                return this._rightDescription;
            }
            set
            {
                if ((this._rightDescription != value))
                {
                    this.OnRightDescriptionChanging(value);
                    this.RaiseDataMemberChanging("RightDescription");
                    this.ValidateProperty("RightDescription", value);
                    this._rightDescription = value;
                    this.RaiseDataMemberChanged("RightDescription");
                    this.OnRightDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RightID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid RightID
        {
            get
            {
                return this._rightID;
            }
            set
            {
                if ((this._rightID != value))
                {
                    this.OnRightIDChanging(value);
                    this.ValidateProperty("RightID", value);
                    this._rightID = value;
                    this.RaisePropertyChanged("RightID");
                    this.OnRightIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RightName' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string RightName
        {
            get
            {
                return this._rightName;
            }
            set
            {
                if ((this._rightName != value))
                {
                    this.OnRightNameChanging(value);
                    this.RaiseDataMemberChanging("RightName");
                    this.ValidateProperty("RightName", value);
                    this._rightName = value;
                    this.RaiseDataMemberChanged("RightName");
                    this.OnRightNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RoleRight"/> entities.
        /// </summary>
        [Association("Right_RoleRight", "RightID", "RightID")]
        [XmlIgnore()]
        public EntityCollection<RoleRight> RoleRight
        {
            get
            {
                if ((this._roleRight == null))
                {
                    this._roleRight = new EntityCollection<RoleRight>(this, "RoleRight", this.FilterRoleRight, this.AttachRoleRight, this.DetachRoleRight);
                }
                return this._roleRight;
            }
        }
        
        private void AttachRoleRight(RoleRight entity)
        {
            entity.Right = this;
        }
        
        private void DetachRoleRight(RoleRight entity)
        {
            entity.Right = null;
        }
        
        private bool FilterRoleRight(RoleRight entity)
        {
            return (entity.RightID == this.RightID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._rightID;
        }
    }
    
    /// <summary>
    /// The 'Role' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class Role : Entity
    {
        
        private string _roleDescription;
        
        private Guid _roleID;
        
        private string _roleName;
        
        private EntityCollection<RoleRight> _roleRight;
        
        private EntityCollection<UserRole> _userRole;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnRoleDescriptionChanging(string value);
        partial void OnRoleDescriptionChanged();
        partial void OnRoleIDChanging(Guid value);
        partial void OnRoleIDChanged();
        partial void OnRoleNameChanging(string value);
        partial void OnRoleNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Role"/> class.
        /// </summary>
        public Role()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'RoleDescription' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(300)]
        public string RoleDescription
        {
            get
            {
                return this._roleDescription;
            }
            set
            {
                if ((this._roleDescription != value))
                {
                    this.OnRoleDescriptionChanging(value);
                    this.RaiseDataMemberChanging("RoleDescription");
                    this.ValidateProperty("RoleDescription", value);
                    this._roleDescription = value;
                    this.RaiseDataMemberChanged("RoleDescription");
                    this.OnRoleDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RoleID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid RoleID
        {
            get
            {
                return this._roleID;
            }
            set
            {
                if ((this._roleID != value))
                {
                    this.OnRoleIDChanging(value);
                    this.ValidateProperty("RoleID", value);
                    this._roleID = value;
                    this.RaisePropertyChanged("RoleID");
                    this.OnRoleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RoleName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string RoleName
        {
            get
            {
                return this._roleName;
            }
            set
            {
                if ((this._roleName != value))
                {
                    this.OnRoleNameChanging(value);
                    this.RaiseDataMemberChanging("RoleName");
                    this.ValidateProperty("RoleName", value);
                    this._roleName = value;
                    this.RaiseDataMemberChanged("RoleName");
                    this.OnRoleNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RoleRight"/> entities.
        /// </summary>
        [Association("Role_RoleRight", "RoleID", "RoleID")]
        [XmlIgnore()]
        public EntityCollection<RoleRight> RoleRight
        {
            get
            {
                if ((this._roleRight == null))
                {
                    this._roleRight = new EntityCollection<RoleRight>(this, "RoleRight", this.FilterRoleRight, this.AttachRoleRight, this.DetachRoleRight);
                }
                return this._roleRight;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="UserRole"/> entities.
        /// </summary>
        [Association("Role_UserRole", "RoleID", "RoleID")]
        [XmlIgnore()]
        public EntityCollection<UserRole> UserRole
        {
            get
            {
                if ((this._userRole == null))
                {
                    this._userRole = new EntityCollection<UserRole>(this, "UserRole", this.FilterUserRole, this.AttachUserRole, this.DetachUserRole);
                }
                return this._userRole;
            }
        }
        
        private void AttachRoleRight(RoleRight entity)
        {
            entity.Role = this;
        }
        
        private void DetachRoleRight(RoleRight entity)
        {
            entity.Role = null;
        }
        
        private bool FilterRoleRight(RoleRight entity)
        {
            return (entity.RoleID == this.RoleID);
        }
        
        private void AttachUserRole(UserRole entity)
        {
            entity.Role = this;
        }
        
        private void DetachUserRole(UserRole entity)
        {
            entity.Role = null;
        }
        
        private bool FilterUserRole(UserRole entity)
        {
            return (entity.RoleID == this.RoleID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._roleID;
        }
    }
    
    /// <summary>
    /// The 'RoleRight' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class RoleRight : Entity
    {
        
        private EntityRef<Right> _right;
        
        private Nullable<Guid> _rightID;
        
        private EntityRef<Role> _role;
        
        private Nullable<Guid> _roleID;
        
        private Guid _roleRightID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnRightIDChanging(Nullable<Guid> value);
        partial void OnRightIDChanged();
        partial void OnRoleIDChanging(Nullable<Guid> value);
        partial void OnRoleIDChanged();
        partial void OnRoleRightIDChanging(Guid value);
        partial void OnRoleRightIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RoleRight"/> class.
        /// </summary>
        public RoleRight()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Right"/> entity.
        /// </summary>
        [Association("Right_RoleRight", "RightID", "RightID", IsForeignKey=true)]
        [XmlIgnore()]
        public Right Right
        {
            get
            {
                if ((this._right == null))
                {
                    this._right = new EntityRef<Right>(this, "Right", this.FilterRight);
                }
                return this._right.Entity;
            }
            set
            {
                Right previous = this.Right;
                if ((previous != value))
                {
                    this.ValidateProperty("Right", value);
                    if ((previous != null))
                    {
                        this._right.Entity = null;
                        previous.RoleRight.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RightID = value.RightID;
                    }
                    else
                    {
                        this.RightID = default(Nullable<Guid>);
                    }
                    this._right.Entity = value;
                    if ((value != null))
                    {
                        value.RoleRight.Add(this);
                    }
                    this.RaisePropertyChanged("Right");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RightID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> RightID
        {
            get
            {
                return this._rightID;
            }
            set
            {
                if ((this._rightID != value))
                {
                    this.OnRightIDChanging(value);
                    this.RaiseDataMemberChanging("RightID");
                    this.ValidateProperty("RightID", value);
                    this._rightID = value;
                    this.RaiseDataMemberChanged("RightID");
                    this.OnRightIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Role"/> entity.
        /// </summary>
        [Association("Role_RoleRight", "RoleID", "RoleID", IsForeignKey=true)]
        [XmlIgnore()]
        public Role Role
        {
            get
            {
                if ((this._role == null))
                {
                    this._role = new EntityRef<Role>(this, "Role", this.FilterRole);
                }
                return this._role.Entity;
            }
            set
            {
                Role previous = this.Role;
                if ((previous != value))
                {
                    this.ValidateProperty("Role", value);
                    if ((previous != null))
                    {
                        this._role.Entity = null;
                        previous.RoleRight.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RoleID = value.RoleID;
                    }
                    else
                    {
                        this.RoleID = default(Nullable<Guid>);
                    }
                    this._role.Entity = value;
                    if ((value != null))
                    {
                        value.RoleRight.Add(this);
                    }
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RoleID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> RoleID
        {
            get
            {
                return this._roleID;
            }
            set
            {
                if ((this._roleID != value))
                {
                    this.OnRoleIDChanging(value);
                    this.RaiseDataMemberChanging("RoleID");
                    this.ValidateProperty("RoleID", value);
                    this._roleID = value;
                    this.RaiseDataMemberChanged("RoleID");
                    this.OnRoleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RoleRightID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid RoleRightID
        {
            get
            {
                return this._roleRightID;
            }
            set
            {
                if ((this._roleRightID != value))
                {
                    this.OnRoleRightIDChanging(value);
                    this.ValidateProperty("RoleRightID", value);
                    this._roleRightID = value;
                    this.RaisePropertyChanged("RoleRightID");
                    this.OnRoleRightIDChanged();
                }
            }
        }
        
        private bool FilterRight(Right entity)
        {
            return (entity.RightID == this.RightID);
        }
        
        private bool FilterRole(Role entity)
        {
            return (entity.RoleID == this.RoleID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._roleRightID;
        }
    }
    
    /// <summary>
    /// The 'SecurityQuestion' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class SecurityQuestion : Entity
    {
        
        private string _question;
        
        private Guid _securityQuestionID;
        
        private EntityCollection<User> _user;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnSecurityQuestionIDChanging(Guid value);
        partial void OnSecurityQuestionIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityQuestion"/> class.
        /// </summary>
        public SecurityQuestion()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(200)]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecurityQuestionID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid SecurityQuestionID
        {
            get
            {
                return this._securityQuestionID;
            }
            set
            {
                if ((this._securityQuestionID != value))
                {
                    this.OnSecurityQuestionIDChanging(value);
                    this.ValidateProperty("SecurityQuestionID", value);
                    this._securityQuestionID = value;
                    this.RaisePropertyChanged("SecurityQuestionID");
                    this.OnSecurityQuestionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="User"/> entities.
        /// </summary>
        [Association("SecurityQuestion_User", "SecurityQuestionID", "SecurityQuestionID")]
        [XmlIgnore()]
        public EntityCollection<User> User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityCollection<User>(this, "User", this.FilterUser, this.AttachUser, this.DetachUser);
                }
                return this._user;
            }
        }
        
        private void AttachUser(User entity)
        {
            entity.SecurityQuestion = this;
        }
        
        private void DetachUser(User entity)
        {
            entity.SecurityQuestion = null;
        }
        
        private bool FilterUser(User entity)
        {
            return (entity.SecurityQuestionID == this.SecurityQuestionID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._securityQuestionID;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'SessionService' domain service.
    /// </summary>
    public sealed partial class SessionContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class.
        /// </summary>
        public SessionContext() : 
                this(new WebDomainClient<ISessionServiceContract>(new Uri("citPOINT-eNeg-Data-Web-SessionService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The SessionService service URI.</param>
        public SessionContext(Uri serviceUri) : 
                this(new WebDomainClient<ISessionServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public SessionContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetSessionValue(string sessionKey, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            this.ValidateMethod("GetSessionValue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetSessionValue", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetSessionValue(string sessionKey)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            this.ValidateMethod("GetSessionValue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetSessionValue", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SetSessionValue(string sessionKey, string sessionValue, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            parameters.Add("sessionValue", sessionValue);
            this.ValidateMethod("SetSessionValue", parameters);
            return this.InvokeOperation("SetSessionValue", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SetSessionValue(string sessionKey, string sessionValue)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            parameters.Add("sessionValue", sessionValue);
            this.ValidateMethod("SetSessionValue", parameters);
            return this.InvokeOperation("SetSessionValue", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SessionContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'SessionService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface ISessionServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetSessionValue' operation.
            /// </summary>
            /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/GetSessionValueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/GetSessionValue", ReplyAction="http://tempuri.org/SessionService/GetSessionValueResponse")]
            IAsyncResult BeginGetSessionValue(string sessionKey, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSessionValue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSessionValue'.</param>
            /// <returns>The 'String' returned from the 'GetSessionValue' operation.</returns>
            string EndGetSessionValue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SetSessionValue' operation.
            /// </summary>
            /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
            /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/SetSessionValueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/SetSessionValue", ReplyAction="http://tempuri.org/SessionService/SetSessionValueResponse")]
            IAsyncResult BeginSetSessionValue(string sessionKey, string sessionValue, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSetSessionValue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSetSessionValue'.</param>
            void EndSetSessionValue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/SubmitChanges", ReplyAction="http://tempuri.org/SessionService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class SessionContextEntityContainer : EntityContainer
        {
            
            public SessionContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class User : Entity
    {
        
        private EntityRef<AccountType> _accountType;
        
        private Nullable<Guid> _accountTypeID;
        
        private string _address;
        
        private string _answerHash;
        
        private string _answerSalt;
        
        private bool _checkForNewEmailAddress;
        
        private bool _checkForNewPassword;
        
        private string _city;
        
        private string _clientAddress;
        
        private string _companyName;
        
        private EntityCollection<Conversation> _conversations;
        
        private EntityRef<Country> _country;
        
        private Nullable<Guid> _countryID;
        
        private DateTime _createDate;
        
        private EntityRef<Culture> _culture;
        
        private Nullable<int> _cultureID;
        
        private bool _disabled;
        
        private string _emailAddress;
        
        private IEnumerable<string> _eNegRights;
        
        private IEnumerable<string> _eNegRoles;
        
        private string _firstName;
        
        private Nullable<bool> _gender;
        
        private Nullable<bool> _hasPublicProfile;
        
        private EntityCollection<History> _histories;
        
        private string _ipAddress;
        
        private Nullable<bool> _isFemale;
        
        private Nullable<bool> _isMale;
        
        private bool _isSelected;
        
        private bool _isUserMaintenance;
        
        private Nullable<DateTime> _lastLoginDate;
        
        private string _lastName;
        
        private Nullable<int> _lcid;
        
        private bool _locked;
        
        private Nullable<DateTime> _lockedDate;
        
        private EntityCollection<Message> _messages;
        
        private string _mobile;
        
        private EntityCollection<NegotiationApplicationStatu> _negotiationApplicationStatus;
        
        private string _newEmail;
        
        private string _newEmailConfirmation;
        
        private string _newPassword;
        
        private string _newPasswordConfirmation;
        
        private bool _online;
        
        private string _password;
        
        private string _passwordAnswer;
        
        private string _passwordConfirmation;
        
        private string _phone;
        
        private string _postalCode;
        
        private EntityRef<PreferedLanguage> _preferedLanguage;
        
        private EntityCollection<Profile> _profile;
        
        private string _profileDescription;
        
        private Nullable<bool> _reset;
        
        private EntityRef<SecurityQuestion> _securityQuestion;
        
        private Nullable<Guid> _securityQuestionID;
        
        private EntityCollection<UserApplicationStatu> _userApplicationStatus;
        
        private Guid _userID;
        
        private EntityCollection<UserOperation> _userOperations;
        
        private EntityCollection<UserOrganization> _userOrganizations;
        
        private EntityCollection<UserRole> _userRole;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAccountTypeIDChanging(Nullable<Guid> value);
        partial void OnAccountTypeIDChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnAnswerHashChanging(string value);
        partial void OnAnswerHashChanged();
        partial void OnAnswerSaltChanging(string value);
        partial void OnAnswerSaltChanged();
        partial void OnCheckForNewEmailAddressChanging(bool value);
        partial void OnCheckForNewEmailAddressChanged();
        partial void OnCheckForNewPasswordChanging(bool value);
        partial void OnCheckForNewPasswordChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnClientAddressChanging(string value);
        partial void OnClientAddressChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnCountryIDChanging(Nullable<Guid> value);
        partial void OnCountryIDChanged();
        partial void OnCreateDateChanging(DateTime value);
        partial void OnCreateDateChanged();
        partial void OnCultureIDChanging(Nullable<int> value);
        partial void OnCultureIDChanged();
        partial void OnDisabledChanging(bool value);
        partial void OnDisabledChanged();
        partial void OnEmailAddressChanging(string value);
        partial void OnEmailAddressChanged();
        partial void OneNegRightsChanging(IEnumerable<string> value);
        partial void OneNegRightsChanged();
        partial void OneNegRolesChanging(IEnumerable<string> value);
        partial void OneNegRolesChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnGenderChanging(Nullable<bool> value);
        partial void OnGenderChanged();
        partial void OnHasPublicProfileChanging(Nullable<bool> value);
        partial void OnHasPublicProfileChanged();
        partial void OnIPAddressChanging(string value);
        partial void OnIPAddressChanged();
        partial void OnIsFemaleChanging(Nullable<bool> value);
        partial void OnIsFemaleChanged();
        partial void OnIsMaleChanging(Nullable<bool> value);
        partial void OnIsMaleChanged();
        partial void OnIsSelectedChanging(bool value);
        partial void OnIsSelectedChanged();
        partial void OnIsUserMaintenanceChanging(bool value);
        partial void OnIsUserMaintenanceChanged();
        partial void OnLastLoginDateChanging(Nullable<DateTime> value);
        partial void OnLastLoginDateChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnLCIDChanging(Nullable<int> value);
        partial void OnLCIDChanged();
        partial void OnLockedChanging(bool value);
        partial void OnLockedChanged();
        partial void OnLockedDateChanging(Nullable<DateTime> value);
        partial void OnLockedDateChanged();
        partial void OnMobileChanging(string value);
        partial void OnMobileChanged();
        partial void OnNewEmailChanging(string value);
        partial void OnNewEmailChanged();
        partial void OnNewEmailConfirmationChanging(string value);
        partial void OnNewEmailConfirmationChanged();
        partial void OnNewPasswordChanging(string value);
        partial void OnNewPasswordChanged();
        partial void OnNewPasswordConfirmationChanging(string value);
        partial void OnNewPasswordConfirmationChanged();
        partial void OnOnlineChanging(bool value);
        partial void OnOnlineChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnPasswordAnswerChanging(string value);
        partial void OnPasswordAnswerChanged();
        partial void OnPasswordConfirmationChanging(string value);
        partial void OnPasswordConfirmationChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();
        partial void OnProfileDescriptionChanging(string value);
        partial void OnProfileDescriptionChanged();
        partial void OnResetChanging(Nullable<bool> value);
        partial void OnResetChanged();
        partial void OnSecurityQuestionIDChanging(Nullable<Guid> value);
        partial void OnSecurityQuestionIDChanged();
        partial void OnUserIDChanging(Guid value);
        partial void OnUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="AccountType"/> entity.
        /// </summary>
        [Association("AccountType_User", "AccountTypeID", "AccountTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public AccountType AccountType
        {
            get
            {
                if ((this._accountType == null))
                {
                    this._accountType = new EntityRef<AccountType>(this, "AccountType", this.FilterAccountType);
                }
                return this._accountType.Entity;
            }
            set
            {
                AccountType previous = this.AccountType;
                if ((previous != value))
                {
                    this.ValidateProperty("AccountType", value);
                    if ((previous != null))
                    {
                        this._accountType.Entity = null;
                        previous.User.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AccountTypeID = value.AccountTypeID;
                    }
                    else
                    {
                        this.AccountTypeID = default(Nullable<Guid>);
                    }
                    this._accountType.Entity = value;
                    if ((value != null))
                    {
                        value.User.Add(this);
                    }
                    this.RaisePropertyChanged("AccountType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AccountTypeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> AccountTypeID
        {
            get
            {
                return this._accountTypeID;
            }
            set
            {
                if ((this._accountTypeID != value))
                {
                    this.OnAccountTypeIDChanging(value);
                    this.RaiseDataMemberChanging("AccountTypeID");
                    this.ValidateProperty("AccountTypeID", value);
                    this._accountTypeID = value;
                    this.RaiseDataMemberChanged("AccountTypeID");
                    this.OnAccountTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [StringLength(300)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AnswerHash' value.
        /// </summary>
        [DataMember()]
        [StringLength(150)]
        public string AnswerHash
        {
            get
            {
                return this._answerHash;
            }
            set
            {
                if ((this._answerHash != value))
                {
                    this.OnAnswerHashChanging(value);
                    this.RaiseDataMemberChanging("AnswerHash");
                    this.ValidateProperty("AnswerHash", value);
                    this._answerHash = value;
                    this.RaiseDataMemberChanged("AnswerHash");
                    this.OnAnswerHashChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AnswerSalt' value.
        /// </summary>
        [DataMember()]
        [StringLength(150)]
        public string AnswerSalt
        {
            get
            {
                return this._answerSalt;
            }
            set
            {
                if ((this._answerSalt != value))
                {
                    this.OnAnswerSaltChanging(value);
                    this.RaiseDataMemberChanging("AnswerSalt");
                    this.ValidateProperty("AnswerSalt", value);
                    this._answerSalt = value;
                    this.RaiseDataMemberChanged("AnswerSalt");
                    this.OnAnswerSaltChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CheckForNewEmailAddress' value.
        /// </summary>
        [DataMember()]
        public bool CheckForNewEmailAddress
        {
            get
            {
                return this._checkForNewEmailAddress;
            }
            set
            {
                if ((this._checkForNewEmailAddress != value))
                {
                    this.OnCheckForNewEmailAddressChanging(value);
                    this.RaiseDataMemberChanging("CheckForNewEmailAddress");
                    this.ValidateProperty("CheckForNewEmailAddress", value);
                    this._checkForNewEmailAddress = value;
                    this.RaiseDataMemberChanged("CheckForNewEmailAddress");
                    this.OnCheckForNewEmailAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CheckForNewPassword' value.
        /// </summary>
        [DataMember()]
        public bool CheckForNewPassword
        {
            get
            {
                return this._checkForNewPassword;
            }
            set
            {
                if ((this._checkForNewPassword != value))
                {
                    this.OnCheckForNewPasswordChanging(value);
                    this.RaiseDataMemberChanging("CheckForNewPassword");
                    this.ValidateProperty("CheckForNewPassword", value);
                    this._checkForNewPassword = value;
                    this.RaiseDataMemberChanged("CheckForNewPassword");
                    this.OnCheckForNewPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClientAddress' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string ClientAddress
        {
            get
            {
                return this._clientAddress;
            }
            set
            {
                if ((this._clientAddress != value))
                {
                    this.OnClientAddressChanging(value);
                    this.ValidateProperty("ClientAddress", value);
                    this._clientAddress = value;
                    this.RaisePropertyChanged("ClientAddress");
                    this.OnClientAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyName' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string CompanyName
        {
            get
            {
                return this._companyName;
            }
            set
            {
                if ((this._companyName != value))
                {
                    this.OnCompanyNameChanging(value);
                    this.RaiseDataMemberChanging("CompanyName");
                    this.ValidateProperty("CompanyName", value);
                    this._companyName = value;
                    this.RaiseDataMemberChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Conversation"/> entities.
        /// </summary>
        [Association("User_Conversation", "UserID", "DeletedBy")]
        [XmlIgnore()]
        public EntityCollection<Conversation> Conversations
        {
            get
            {
                if ((this._conversations == null))
                {
                    this._conversations = new EntityCollection<Conversation>(this, "Conversations", this.FilterConversations, this.AttachConversations, this.DetachConversations);
                }
                return this._conversations;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Country"/> entity.
        /// </summary>
        [Association("Country_User", "CountryID", "CountryID", IsForeignKey=true)]
        [XmlIgnore()]
        public Country Country
        {
            get
            {
                if ((this._country == null))
                {
                    this._country = new EntityRef<Country>(this, "Country", this.FilterCountry);
                }
                return this._country.Entity;
            }
            set
            {
                Country previous = this.Country;
                if ((previous != value))
                {
                    this.ValidateProperty("Country", value);
                    if ((previous != null))
                    {
                        this._country.Entity = null;
                        previous.User.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CountryID = value.CountryID;
                    }
                    else
                    {
                        this.CountryID = default(Nullable<Guid>);
                    }
                    this._country.Entity = value;
                    if ((value != null))
                    {
                        value.User.Add(this);
                    }
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CountryID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> CountryID
        {
            get
            {
                return this._countryID;
            }
            set
            {
                if ((this._countryID != value))
                {
                    this.OnCountryIDChanging(value);
                    this.RaiseDataMemberChanging("CountryID");
                    this.ValidateProperty("CountryID", value);
                    this._countryID = value;
                    this.RaiseDataMemberChanged("CountryID");
                    this.OnCountryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreateDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                if ((this._createDate != value))
                {
                    this.OnCreateDateChanging(value);
                    this.RaiseDataMemberChanging("CreateDate");
                    this.ValidateProperty("CreateDate", value);
                    this._createDate = value;
                    this.RaiseDataMemberChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Culture"/> entity.
        /// </summary>
        [Association("Culture_User", "CultureID", "CultureID", IsForeignKey=true)]
        [XmlIgnore()]
        public Culture Culture
        {
            get
            {
                if ((this._culture == null))
                {
                    this._culture = new EntityRef<Culture>(this, "Culture", this.FilterCulture);
                }
                return this._culture.Entity;
            }
            set
            {
                Culture previous = this.Culture;
                if ((previous != value))
                {
                    this.ValidateProperty("Culture", value);
                    if ((previous != null))
                    {
                        this._culture.Entity = null;
                        previous.Users.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CultureID = value.CultureID;
                    }
                    else
                    {
                        this.CultureID = default(Nullable<int>);
                    }
                    this._culture.Entity = value;
                    if ((value != null))
                    {
                        value.Users.Add(this);
                    }
                    this.RaisePropertyChanged("Culture");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CultureID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> CultureID
        {
            get
            {
                return this._cultureID;
            }
            set
            {
                if ((this._cultureID != value))
                {
                    this.OnCultureIDChanging(value);
                    this.RaiseDataMemberChanging("CultureID");
                    this.ValidateProperty("CultureID", value);
                    this._cultureID = value;
                    this.RaiseDataMemberChanged("CultureID");
                    this.OnCultureIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Disabled' value.
        /// </summary>
        [DataMember()]
        public bool Disabled
        {
            get
            {
                return this._disabled;
            }
            set
            {
                if ((this._disabled != value))
                {
                    this.OnDisabledChanging(value);
                    this.RaiseDataMemberChanging("Disabled");
                    this.ValidateProperty("Disabled", value);
                    this._disabled = value;
                    this.RaiseDataMemberChanged("Disabled");
                    this.OnDisabledChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmailAddress' value.
        /// </summary>
        [CustomValidation(typeof(UserRules), "IsValidEmail")]
        [DataMember()]
        [Display(Name="E-mail")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ErrorResources))]
        [StringLength(300)]
        public string EmailAddress
        {
            get
            {
                return this._emailAddress;
            }
            set
            {
                if ((this._emailAddress != value))
                {
                    this.OnEmailAddressChanging(value);
                    this.RaiseDataMemberChanging("EmailAddress");
                    this.ValidateProperty("EmailAddress", value);
                    this._emailAddress = value;
                    this.RaiseDataMemberChanged("EmailAddress");
                    this.OnEmailAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'eNegRights' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<string> eNegRights
        {
            get
            {
                return this._eNegRights;
            }
            set
            {
                if ((this._eNegRights != value))
                {
                    this.OneNegRightsChanging(value);
                    this.RaiseDataMemberChanging("eNegRights");
                    this.ValidateProperty("eNegRights", value);
                    this._eNegRights = value;
                    this.RaiseDataMemberChanged("eNegRights");
                    this.OneNegRightsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'eNegRoles' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<string> eNegRoles
        {
            get
            {
                return this._eNegRoles;
            }
            set
            {
                if ((this._eNegRoles != value))
                {
                    this.OneNegRolesChanging(value);
                    this.RaiseDataMemberChanging("eNegRoles");
                    this.ValidateProperty("eNegRoles", value);
                    this._eNegRoles = value;
                    this.RaiseDataMemberChanged("eNegRoles");
                    this.OneNegRolesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="First Name")]
        [StringLength(100)]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Gender' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Gender
        {
            get
            {
                return this._gender;
            }
            set
            {
                if ((this._gender != value))
                {
                    this.OnGenderChanging(value);
                    this.RaiseDataMemberChanging("Gender");
                    this.ValidateProperty("Gender", value);
                    this._gender = value;
                    this.RaiseDataMemberChanged("Gender");
                    this.OnGenderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HasPublicProfile' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> HasPublicProfile
        {
            get
            {
                return this._hasPublicProfile;
            }
            set
            {
                if ((this._hasPublicProfile != value))
                {
                    this.OnHasPublicProfileChanging(value);
                    this.RaiseDataMemberChanging("HasPublicProfile");
                    this.ValidateProperty("HasPublicProfile", value);
                    this._hasPublicProfile = value;
                    this.RaiseDataMemberChanged("HasPublicProfile");
                    this.OnHasPublicProfileChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="History"/> entities.
        /// </summary>
        [Association("User_History", "UserID", "UserID")]
        [XmlIgnore()]
        public EntityCollection<History> Histories
        {
            get
            {
                if ((this._histories == null))
                {
                    this._histories = new EntityCollection<History>(this, "Histories", this.FilterHistories, this.AttachHistories, this.DetachHistories);
                }
                return this._histories;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IPAddress' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string IPAddress
        {
            get
            {
                return this._ipAddress;
            }
            set
            {
                if ((this._ipAddress != value))
                {
                    this.OnIPAddressChanging(value);
                    this.RaiseDataMemberChanging("IPAddress");
                    this.ValidateProperty("IPAddress", value);
                    this._ipAddress = value;
                    this.RaiseDataMemberChanged("IPAddress");
                    this.OnIPAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsFemale' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsFemale
        {
            get
            {
                return this._isFemale;
            }
            set
            {
                if ((this._isFemale != value))
                {
                    this.OnIsFemaleChanging(value);
                    this.RaiseDataMemberChanging("IsFemale");
                    this.ValidateProperty("IsFemale", value);
                    this._isFemale = value;
                    this.RaiseDataMemberChanged("IsFemale");
                    this.OnIsFemaleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsMale' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsMale
        {
            get
            {
                return this._isMale;
            }
            set
            {
                if ((this._isMale != value))
                {
                    this.OnIsMaleChanging(value);
                    this.RaiseDataMemberChanging("IsMale");
                    this.ValidateProperty("IsMale", value);
                    this._isMale = value;
                    this.RaiseDataMemberChanged("IsMale");
                    this.OnIsMaleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsSelected' value.
        /// </summary>
        [DataMember()]
        public bool IsSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnIsSelectedChanging(value);
                    this.RaiseDataMemberChanging("IsSelected");
                    this.ValidateProperty("IsSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("IsSelected");
                    this.OnIsSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsUserMaintenance' value.
        /// </summary>
        [DataMember()]
        public bool IsUserMaintenance
        {
            get
            {
                return this._isUserMaintenance;
            }
            set
            {
                if ((this._isUserMaintenance != value))
                {
                    this.OnIsUserMaintenanceChanging(value);
                    this.RaiseDataMemberChanging("IsUserMaintenance");
                    this.ValidateProperty("IsUserMaintenance", value);
                    this._isUserMaintenance = value;
                    this.RaiseDataMemberChanged("IsUserMaintenance");
                    this.OnIsUserMaintenanceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastLoginDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> LastLoginDate
        {
            get
            {
                return this._lastLoginDate;
            }
            set
            {
                if ((this._lastLoginDate != value))
                {
                    this.OnLastLoginDateChanging(value);
                    this.RaiseDataMemberChanging("LastLoginDate");
                    this.ValidateProperty("LastLoginDate", value);
                    this._lastLoginDate = value;
                    this.RaiseDataMemberChanged("LastLoginDate");
                    this.OnLastLoginDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Last Name")]
        [StringLength(100)]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.RaiseDataMemberChanging("LastName");
                    this.ValidateProperty("LastName", value);
                    this._lastName = value;
                    this.RaiseDataMemberChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LCID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> LCID
        {
            get
            {
                return this._lcid;
            }
            set
            {
                if ((this._lcid != value))
                {
                    this.OnLCIDChanging(value);
                    this.RaiseDataMemberChanging("LCID");
                    this.ValidateProperty("LCID", value);
                    this._lcid = value;
                    this.RaiseDataMemberChanged("LCID");
                    this.OnLCIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Locked' value.
        /// </summary>
        [DataMember()]
        public bool Locked
        {
            get
            {
                return this._locked;
            }
            set
            {
                if ((this._locked != value))
                {
                    this.OnLockedChanging(value);
                    this.RaiseDataMemberChanging("Locked");
                    this.ValidateProperty("Locked", value);
                    this._locked = value;
                    this.RaiseDataMemberChanged("Locked");
                    this.OnLockedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LockedDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> LockedDate
        {
            get
            {
                return this._lockedDate;
            }
            set
            {
                if ((this._lockedDate != value))
                {
                    this.OnLockedDateChanging(value);
                    this.RaiseDataMemberChanging("LockedDate");
                    this.ValidateProperty("LockedDate", value);
                    this._lockedDate = value;
                    this.RaiseDataMemberChanged("LockedDate");
                    this.OnLockedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Message"/> entities.
        /// </summary>
        [Association("User_Message", "UserID", "DeletedBy")]
        [XmlIgnore()]
        public EntityCollection<Message> Messages
        {
            get
            {
                if ((this._messages == null))
                {
                    this._messages = new EntityCollection<Message>(this, "Messages", this.FilterMessages, this.AttachMessages, this.DetachMessages);
                }
                return this._messages;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Mobile' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Mobile
        {
            get
            {
                return this._mobile;
            }
            set
            {
                if ((this._mobile != value))
                {
                    this.OnMobileChanging(value);
                    this.RaiseDataMemberChanging("Mobile");
                    this.ValidateProperty("Mobile", value);
                    this._mobile = value;
                    this.RaiseDataMemberChanged("Mobile");
                    this.OnMobileChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="NegotiationApplicationStatu"/> entities.
        /// </summary>
        [Association("User_NegotiationApplicationStatu", "UserID", "UserID")]
        [XmlIgnore()]
        public EntityCollection<NegotiationApplicationStatu> NegotiationApplicationStatus
        {
            get
            {
                if ((this._negotiationApplicationStatus == null))
                {
                    this._negotiationApplicationStatus = new EntityCollection<NegotiationApplicationStatu>(this, "NegotiationApplicationStatus", this.FilterNegotiationApplicationStatus, this.AttachNegotiationApplicationStatus, this.DetachNegotiationApplicationStatus);
                }
                return this._negotiationApplicationStatus;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NewEmail' value.
        /// </summary>
        [CustomValidation(typeof(UserRules), "CheckNewEmailWithConfirmation")]
        [CustomValidation(typeof(UserRules), "IsNewEmailFieldRequired")]
        [CustomValidation(typeof(UserRules), "IsValidEmail")]
        [DataMember()]
        public string NewEmail
        {
            get
            {
                return this._newEmail;
            }
            set
            {
                if ((this._newEmail != value))
                {
                    this.OnNewEmailChanging(value);
                    this.RaiseDataMemberChanging("NewEmail");
                    this.ValidateProperty("NewEmail", value);
                    this._newEmail = value;
                    this.RaiseDataMemberChanged("NewEmail");
                    this.OnNewEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NewEmailConfirmation' value.
        /// </summary>
        [CustomValidation(typeof(UserRules), "CheckNewEmailConfirmation")]
        [CustomValidation(typeof(UserRules), "IsNewEmailFieldRequired")]
        [CustomValidation(typeof(UserRules), "IsValidEmail")]
        [DataMember()]
        public string NewEmailConfirmation
        {
            get
            {
                return this._newEmailConfirmation;
            }
            set
            {
                if ((this._newEmailConfirmation != value))
                {
                    this.OnNewEmailConfirmationChanging(value);
                    this.RaiseDataMemberChanging("NewEmailConfirmation");
                    this.ValidateProperty("NewEmailConfirmation", value);
                    this._newEmailConfirmation = value;
                    this.RaiseDataMemberChanged("NewEmailConfirmation");
                    this.OnNewEmailConfirmationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NewPassword' value.
        /// </summary>
        [CustomValidation(typeof(UserRules), "CheckNewPasswordMinLenght")]
        [CustomValidation(typeof(UserRules), "CheckNewPasswordWithNewConfirmation")]
        [CustomValidation(typeof(UserRules), "CheckPasswordMaxLenght")]
        [CustomValidation(typeof(UserRules), "IsNewPasswordFieldRequired")]
        [DataMember()]
        public string NewPassword
        {
            get
            {
                return this._newPassword;
            }
            set
            {
                if ((this._newPassword != value))
                {
                    this.OnNewPasswordChanging(value);
                    this.RaiseDataMemberChanging("NewPassword");
                    this.ValidateProperty("NewPassword", value);
                    this._newPassword = value;
                    this.RaiseDataMemberChanged("NewPassword");
                    this.OnNewPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NewPasswordConfirmation' value.
        /// </summary>
        [CustomValidation(typeof(UserRules), "CheckNewPasswordConfirmation")]
        [CustomValidation(typeof(UserRules), "CheckNewPasswordMinLenght")]
        [CustomValidation(typeof(UserRules), "CheckPasswordMaxLenght")]
        [CustomValidation(typeof(UserRules), "IsNewPasswordFieldRequired")]
        [DataMember()]
        public string NewPasswordConfirmation
        {
            get
            {
                return this._newPasswordConfirmation;
            }
            set
            {
                if ((this._newPasswordConfirmation != value))
                {
                    this.OnNewPasswordConfirmationChanging(value);
                    this.RaiseDataMemberChanging("NewPasswordConfirmation");
                    this.ValidateProperty("NewPasswordConfirmation", value);
                    this._newPasswordConfirmation = value;
                    this.RaiseDataMemberChanged("NewPasswordConfirmation");
                    this.OnNewPasswordConfirmationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Online' value.
        /// </summary>
        [DataMember()]
        public bool Online
        {
            get
            {
                return this._online;
            }
            set
            {
                if ((this._online != value))
                {
                    this.OnOnlineChanging(value);
                    this.RaiseDataMemberChanging("Online");
                    this.ValidateProperty("Online", value);
                    this._online = value;
                    this.RaiseDataMemberChanged("Online");
                    this.OnOnlineChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Password' value.
        /// </summary>
        [CustomValidation(typeof(UserRules), "CheckPasswordMaxLenght")]
        [CustomValidation(typeof(UserRules), "CheckPasswordMinLenght")]
        [CustomValidation(typeof(UserRules), "CheckPasswordWithConfirmation")]
        [DataMember()]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ErrorResources))]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this.ValidateProperty("Password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordAnswer' value.
        /// </summary>
        [DataMember()]
        public string PasswordAnswer
        {
            get
            {
                return this._passwordAnswer;
            }
            set
            {
                if ((this._passwordAnswer != value))
                {
                    this.OnPasswordAnswerChanging(value);
                    this.RaiseDataMemberChanging("PasswordAnswer");
                    this.ValidateProperty("PasswordAnswer", value);
                    this._passwordAnswer = value;
                    this.RaiseDataMemberChanged("PasswordAnswer");
                    this.OnPasswordAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordConfirmation' value.
        /// </summary>
        [CustomValidation(typeof(UserRules), "CheckPasswordConfirmation")]
        [CustomValidation(typeof(UserRules), "CheckPasswordMaxLenght")]
        [CustomValidation(typeof(UserRules), "CheckPasswordMinLenght")]
        [DataMember()]
        [Display(Name="Password Confirmation")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ErrorResources))]
        public string PasswordConfirmation
        {
            get
            {
                return this._passwordConfirmation;
            }
            set
            {
                if ((this._passwordConfirmation != value))
                {
                    this.OnPasswordConfirmationChanging(value);
                    this.RaiseDataMemberChanging("PasswordConfirmation");
                    this.ValidateProperty("PasswordConfirmation", value);
                    this._passwordConfirmation = value;
                    this.RaiseDataMemberChanged("PasswordConfirmation");
                    this.OnPasswordConfirmationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Phone' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.RaiseDataMemberChanging("Phone");
                    this.ValidateProperty("Phone", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PostalCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(150)]
        public string PostalCode
        {
            get
            {
                return this._postalCode;
            }
            set
            {
                if ((this._postalCode != value))
                {
                    this.OnPostalCodeChanging(value);
                    this.RaiseDataMemberChanging("PostalCode");
                    this.ValidateProperty("PostalCode", value);
                    this._postalCode = value;
                    this.RaiseDataMemberChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PreferedLanguage"/> entity.
        /// </summary>
        [Association("PreferedLanguage_User", "LCID", "LCID", IsForeignKey=true)]
        [XmlIgnore()]
        public PreferedLanguage PreferedLanguage
        {
            get
            {
                if ((this._preferedLanguage == null))
                {
                    this._preferedLanguage = new EntityRef<PreferedLanguage>(this, "PreferedLanguage", this.FilterPreferedLanguage);
                }
                return this._preferedLanguage.Entity;
            }
            set
            {
                PreferedLanguage previous = this.PreferedLanguage;
                if ((previous != value))
                {
                    this.ValidateProperty("PreferedLanguage", value);
                    if ((previous != null))
                    {
                        this._preferedLanguage.Entity = null;
                        previous.User.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.LCID = value.LCID;
                    }
                    else
                    {
                        this.LCID = default(Nullable<int>);
                    }
                    this._preferedLanguage.Entity = value;
                    if ((value != null))
                    {
                        value.User.Add(this);
                    }
                    this.RaisePropertyChanged("PreferedLanguage");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Profile"/> entities.
        /// </summary>
        [Association("User_Profile", "UserID", "UserID")]
        [XmlIgnore()]
        public EntityCollection<Profile> Profile
        {
            get
            {
                if ((this._profile == null))
                {
                    this._profile = new EntityCollection<Profile>(this, "Profile", this.FilterProfile, this.AttachProfile, this.DetachProfile);
                }
                return this._profile;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProfileDescription' value.
        /// </summary>
        [DataMember()]
        [StringLength(300)]
        public string ProfileDescription
        {
            get
            {
                return this._profileDescription;
            }
            set
            {
                if ((this._profileDescription != value))
                {
                    this.OnProfileDescriptionChanging(value);
                    this.RaiseDataMemberChanging("ProfileDescription");
                    this.ValidateProperty("ProfileDescription", value);
                    this._profileDescription = value;
                    this.RaiseDataMemberChanged("ProfileDescription");
                    this.OnProfileDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Reset' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Reset
        {
            get
            {
                return this._reset;
            }
            set
            {
                if ((this._reset != value))
                {
                    this.OnResetChanging(value);
                    this.RaiseDataMemberChanging("Reset");
                    this.ValidateProperty("Reset", value);
                    this._reset = value;
                    this.RaiseDataMemberChanged("Reset");
                    this.OnResetChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SecurityQuestion"/> entity.
        /// </summary>
        [Association("SecurityQuestion_User", "SecurityQuestionID", "SecurityQuestionID", IsForeignKey=true)]
        [XmlIgnore()]
        public SecurityQuestion SecurityQuestion
        {
            get
            {
                if ((this._securityQuestion == null))
                {
                    this._securityQuestion = new EntityRef<SecurityQuestion>(this, "SecurityQuestion", this.FilterSecurityQuestion);
                }
                return this._securityQuestion.Entity;
            }
            set
            {
                SecurityQuestion previous = this.SecurityQuestion;
                if ((previous != value))
                {
                    this.ValidateProperty("SecurityQuestion", value);
                    if ((previous != null))
                    {
                        this._securityQuestion.Entity = null;
                        previous.User.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SecurityQuestionID = value.SecurityQuestionID;
                    }
                    else
                    {
                        this.SecurityQuestionID = default(Nullable<Guid>);
                    }
                    this._securityQuestion.Entity = value;
                    if ((value != null))
                    {
                        value.User.Add(this);
                    }
                    this.RaisePropertyChanged("SecurityQuestion");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecurityQuestionID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> SecurityQuestionID
        {
            get
            {
                return this._securityQuestionID;
            }
            set
            {
                if ((this._securityQuestionID != value))
                {
                    this.OnSecurityQuestionIDChanging(value);
                    this.RaiseDataMemberChanging("SecurityQuestionID");
                    this.ValidateProperty("SecurityQuestionID", value);
                    this._securityQuestionID = value;
                    this.RaiseDataMemberChanged("SecurityQuestionID");
                    this.OnSecurityQuestionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="UserApplicationStatu"/> entities.
        /// </summary>
        [Association("User_UserApplicationStatu", "UserID", "UserID")]
        [XmlIgnore()]
        public EntityCollection<UserApplicationStatu> UserApplicationStatus
        {
            get
            {
                if ((this._userApplicationStatus == null))
                {
                    this._userApplicationStatus = new EntityCollection<UserApplicationStatu>(this, "UserApplicationStatus", this.FilterUserApplicationStatus, this.AttachUserApplicationStatus, this.DetachUserApplicationStatus);
                }
                return this._userApplicationStatus;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaisePropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="UserOperation"/> entities.
        /// </summary>
        [Association("User_UserOperation", "UserID", "UserID")]
        [XmlIgnore()]
        public EntityCollection<UserOperation> UserOperations
        {
            get
            {
                if ((this._userOperations == null))
                {
                    this._userOperations = new EntityCollection<UserOperation>(this, "UserOperations", this.FilterUserOperations, this.AttachUserOperations, this.DetachUserOperations);
                }
                return this._userOperations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="UserOrganization"/> entities.
        /// </summary>
        [Association("User_UserOrganization", "UserID", "UserID")]
        [XmlIgnore()]
        public EntityCollection<UserOrganization> UserOrganizations
        {
            get
            {
                if ((this._userOrganizations == null))
                {
                    this._userOrganizations = new EntityCollection<UserOrganization>(this, "UserOrganizations", this.FilterUserOrganizations, this.AttachUserOrganizations, this.DetachUserOrganizations);
                }
                return this._userOrganizations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="UserRole"/> entities.
        /// </summary>
        [Association("User_UserRole", "UserID", "UserID")]
        [XmlIgnore()]
        public EntityCollection<UserRole> UserRole
        {
            get
            {
                if ((this._userRole == null))
                {
                    this._userRole = new EntityCollection<UserRole>(this, "UserRole", this.FilterUserRole, this.AttachUserRole, this.DetachUserRole);
                }
                return this._userRole;
            }
        }
        
        private bool FilterAccountType(AccountType entity)
        {
            return (entity.AccountTypeID == this.AccountTypeID);
        }
        
        private void AttachConversations(Conversation entity)
        {
            entity.User = this;
        }
        
        private void DetachConversations(Conversation entity)
        {
            entity.User = null;
        }
        
        private bool FilterConversations(Conversation entity)
        {
            return (entity.DeletedBy == this.UserID);
        }
        
        private bool FilterCountry(Country entity)
        {
            return (entity.CountryID == this.CountryID);
        }
        
        private bool FilterCulture(Culture entity)
        {
            return (entity.CultureID == this.CultureID);
        }
        
        private void AttachHistories(History entity)
        {
            entity.User = this;
        }
        
        private void DetachHistories(History entity)
        {
            entity.User = null;
        }
        
        private bool FilterHistories(History entity)
        {
            return (entity.UserID == this.UserID);
        }
        
        private void AttachMessages(Message entity)
        {
            entity.User = this;
        }
        
        private void DetachMessages(Message entity)
        {
            entity.User = null;
        }
        
        private bool FilterMessages(Message entity)
        {
            return (entity.DeletedBy == this.UserID);
        }
        
        private void AttachNegotiationApplicationStatus(NegotiationApplicationStatu entity)
        {
            entity.User = this;
        }
        
        private void DetachNegotiationApplicationStatus(NegotiationApplicationStatu entity)
        {
            entity.User = null;
        }
        
        private bool FilterNegotiationApplicationStatus(NegotiationApplicationStatu entity)
        {
            return (entity.UserID == this.UserID);
        }
        
        private bool FilterPreferedLanguage(PreferedLanguage entity)
        {
            return (entity.LCID == this.LCID);
        }
        
        private void AttachProfile(Profile entity)
        {
            entity.User = this;
        }
        
        private void DetachProfile(Profile entity)
        {
            entity.User = null;
        }
        
        private bool FilterProfile(Profile entity)
        {
            return (entity.UserID == this.UserID);
        }
        
        private bool FilterSecurityQuestion(SecurityQuestion entity)
        {
            return (entity.SecurityQuestionID == this.SecurityQuestionID);
        }
        
        private void AttachUserApplicationStatus(UserApplicationStatu entity)
        {
            entity.User = this;
        }
        
        private void DetachUserApplicationStatus(UserApplicationStatu entity)
        {
            entity.User = null;
        }
        
        private bool FilterUserApplicationStatus(UserApplicationStatu entity)
        {
            return (entity.UserID == this.UserID);
        }
        
        private void AttachUserOperations(UserOperation entity)
        {
            entity.User = this;
        }
        
        private void DetachUserOperations(UserOperation entity)
        {
            entity.User = null;
        }
        
        private bool FilterUserOperations(UserOperation entity)
        {
            return (entity.UserID == this.UserID);
        }
        
        private void AttachUserOrganizations(UserOrganization entity)
        {
            entity.User = this;
        }
        
        private void DetachUserOrganizations(UserOrganization entity)
        {
            entity.User = null;
        }
        
        private bool FilterUserOrganizations(UserOrganization entity)
        {
            return (entity.UserID == this.UserID);
        }
        
        private void AttachUserRole(UserRole entity)
        {
            entity.User = this;
        }
        
        private void DetachUserRole(UserRole entity)
        {
            entity.User = null;
        }
        
        private bool FilterUserRole(UserRole entity)
        {
            return (entity.UserID == this.UserID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._userID;
        }
    }
    
    /// <summary>
    /// The 'UserApplicationStatu' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class UserApplicationStatu : Entity
    {
        
        private EntityRef<Application> _application;
        
        private Guid _applicationID;
        
        private Nullable<bool> _isDMActive;
        
        private EntityRef<User> _user;
        
        private Guid _userAppStatusID;
        
        private Guid _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnApplicationIDChanging(Guid value);
        partial void OnApplicationIDChanged();
        partial void OnIsDMActiveChanging(Nullable<bool> value);
        partial void OnIsDMActiveChanged();
        partial void OnUserAppStatusIDChanging(Guid value);
        partial void OnUserAppStatusIDChanged();
        partial void OnUserIDChanging(Guid value);
        partial void OnUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserApplicationStatu"/> class.
        /// </summary>
        public UserApplicationStatu()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Application"/> entity.
        /// </summary>
        [Association("Application_UserApplicationStatu", "ApplicationID", "ApplicationID", IsForeignKey=true)]
        [XmlIgnore()]
        public Application Application
        {
            get
            {
                if ((this._application == null))
                {
                    this._application = new EntityRef<Application>(this, "Application", this.FilterApplication);
                }
                return this._application.Entity;
            }
            set
            {
                Application previous = this.Application;
                if ((previous != value))
                {
                    this.ValidateProperty("Application", value);
                    if ((previous != null))
                    {
                        this._application.Entity = null;
                        previous.UserApplicationStatus.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ApplicationID = value.ApplicationID;
                    }
                    else
                    {
                        this.ApplicationID = default(Guid);
                    }
                    this._application.Entity = value;
                    if ((value != null))
                    {
                        value.UserApplicationStatus.Add(this);
                    }
                    this.RaisePropertyChanged("Application");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ApplicationID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ApplicationID
        {
            get
            {
                return this._applicationID;
            }
            set
            {
                if ((this._applicationID != value))
                {
                    this.OnApplicationIDChanging(value);
                    this.RaiseDataMemberChanging("ApplicationID");
                    this.ValidateProperty("ApplicationID", value);
                    this._applicationID = value;
                    this.RaiseDataMemberChanged("ApplicationID");
                    this.OnApplicationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsDMActive' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsDMActive
        {
            get
            {
                return this._isDMActive;
            }
            set
            {
                if ((this._isDMActive != value))
                {
                    this.OnIsDMActiveChanging(value);
                    this.RaiseDataMemberChanging("IsDMActive");
                    this.ValidateProperty("IsDMActive", value);
                    this._isDMActive = value;
                    this.RaiseDataMemberChanged("IsDMActive");
                    this.OnIsDMActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="User"/> entity.
        /// </summary>
        [Association("User_UserApplicationStatu", "UserID", "UserID", IsForeignKey=true)]
        [XmlIgnore()]
        public User User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<User>(this, "User", this.FilterUser);
                }
                return this._user.Entity;
            }
            set
            {
                User previous = this.User;
                if ((previous != value))
                {
                    this.ValidateProperty("User", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.UserApplicationStatus.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserID = value.UserID;
                    }
                    else
                    {
                        this.UserID = default(Guid);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.UserApplicationStatus.Add(this);
                    }
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserAppStatusID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid UserAppStatusID
        {
            get
            {
                return this._userAppStatusID;
            }
            set
            {
                if ((this._userAppStatusID != value))
                {
                    this.OnUserAppStatusIDChanging(value);
                    this.ValidateProperty("UserAppStatusID", value);
                    this._userAppStatusID = value;
                    this.RaisePropertyChanged("UserAppStatusID");
                    this.OnUserAppStatusIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        private bool FilterApplication(Application entity)
        {
            return (entity.ApplicationID == this.ApplicationID);
        }
        
        private bool FilterUser(User entity)
        {
            return (entity.UserID == this.UserID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._userAppStatusID;
        }
    }
    
    /// <summary>
    /// The 'UserLeaveOrganizationResult' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class UserLeaveOrganizationResult : Entity
    {
        
        private Nullable<Guid> _alternativeOwnerID;
        
        private Nullable<bool> _canLeave;
        
        private string _emailAddress;
        
        private string _firstName;
        
        private string _lastName;
        
        private Nullable<int> _ownersCount;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAlternativeOwnerIDChanging(Nullable<Guid> value);
        partial void OnAlternativeOwnerIDChanged();
        partial void OnCanLeaveChanging(Nullable<bool> value);
        partial void OnCanLeaveChanged();
        partial void OnEmailAddressChanging(string value);
        partial void OnEmailAddressChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnOwnersCountChanging(Nullable<int> value);
        partial void OnOwnersCountChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserLeaveOrganizationResult"/> class.
        /// </summary>
        public UserLeaveOrganizationResult()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AlternativeOwnerID' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> AlternativeOwnerID
        {
            get
            {
                return this._alternativeOwnerID;
            }
            set
            {
                if ((this._alternativeOwnerID != value))
                {
                    this.OnAlternativeOwnerIDChanging(value);
                    this.RaiseDataMemberChanging("AlternativeOwnerID");
                    this.ValidateProperty("AlternativeOwnerID", value);
                    this._alternativeOwnerID = value;
                    this.RaiseDataMemberChanged("AlternativeOwnerID");
                    this.OnAlternativeOwnerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CanLeave' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Nullable<bool> CanLeave
        {
            get
            {
                return this._canLeave;
            }
            set
            {
                if ((this._canLeave != value))
                {
                    this.OnCanLeaveChanging(value);
                    this.ValidateProperty("CanLeave", value);
                    this._canLeave = value;
                    this.RaisePropertyChanged("CanLeave");
                    this.OnCanLeaveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmailAddress' value.
        /// </summary>
        [DataMember()]
        public string EmailAddress
        {
            get
            {
                return this._emailAddress;
            }
            set
            {
                if ((this._emailAddress != value))
                {
                    this.OnEmailAddressChanging(value);
                    this.RaiseDataMemberChanging("EmailAddress");
                    this.ValidateProperty("EmailAddress", value);
                    this._emailAddress = value;
                    this.RaiseDataMemberChanged("EmailAddress");
                    this.OnEmailAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstName' value.
        /// </summary>
        [DataMember()]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastName' value.
        /// </summary>
        [DataMember()]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.RaiseDataMemberChanging("LastName");
                    this.ValidateProperty("LastName", value);
                    this._lastName = value;
                    this.RaiseDataMemberChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OwnersCount' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> OwnersCount
        {
            get
            {
                return this._ownersCount;
            }
            set
            {
                if ((this._ownersCount != value))
                {
                    this.OnOwnersCountChanging(value);
                    this.RaiseDataMemberChanging("OwnersCount");
                    this.ValidateProperty("OwnersCount", value);
                    this._ownersCount = value;
                    this.RaiseDataMemberChanged("OwnersCount");
                    this.OnOwnersCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._canLeave;
        }
    }
    
    /// <summary>
    /// The 'UserOperation' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class UserOperation : Entity
    {
        
        private string _newEmailAddress;
        
        private Guid _operationID;
        
        private string _operationString;
        
        private Nullable<Guid> _organizationID;
        
        private Nullable<Guid> _requestUserID;
        
        private Nullable<byte> _type;
        
        private EntityRef<User> _user;
        
        private Nullable<Guid> _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNewEmailAddressChanging(string value);
        partial void OnNewEmailAddressChanged();
        partial void OnOperationIDChanging(Guid value);
        partial void OnOperationIDChanged();
        partial void OnOperationStringChanging(string value);
        partial void OnOperationStringChanged();
        partial void OnOrganizationIDChanging(Nullable<Guid> value);
        partial void OnOrganizationIDChanged();
        partial void OnRequestUserIDChanging(Nullable<Guid> value);
        partial void OnRequestUserIDChanged();
        partial void OnTypeChanging(Nullable<byte> value);
        partial void OnTypeChanged();
        partial void OnUserIDChanging(Nullable<Guid> value);
        partial void OnUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserOperation"/> class.
        /// </summary>
        public UserOperation()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'NewEmailAddress' value.
        /// </summary>
        [DataMember()]
        [StringLength(300)]
        public string NewEmailAddress
        {
            get
            {
                return this._newEmailAddress;
            }
            set
            {
                if ((this._newEmailAddress != value))
                {
                    this.OnNewEmailAddressChanging(value);
                    this.RaiseDataMemberChanging("NewEmailAddress");
                    this.ValidateProperty("NewEmailAddress", value);
                    this._newEmailAddress = value;
                    this.RaiseDataMemberChanged("NewEmailAddress");
                    this.OnNewEmailAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OperationID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid OperationID
        {
            get
            {
                return this._operationID;
            }
            set
            {
                if ((this._operationID != value))
                {
                    this.OnOperationIDChanging(value);
                    this.ValidateProperty("OperationID", value);
                    this._operationID = value;
                    this.RaisePropertyChanged("OperationID");
                    this.OnOperationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OperationString' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string OperationString
        {
            get
            {
                return this._operationString;
            }
            set
            {
                if ((this._operationString != value))
                {
                    this.OnOperationStringChanging(value);
                    this.RaiseDataMemberChanging("OperationString");
                    this.ValidateProperty("OperationString", value);
                    this._operationString = value;
                    this.RaiseDataMemberChanged("OperationString");
                    this.OnOperationStringChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationID' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> OrganizationID
        {
            get
            {
                return this._organizationID;
            }
            set
            {
                if ((this._organizationID != value))
                {
                    this.OnOrganizationIDChanging(value);
                    this.RaiseDataMemberChanging("OrganizationID");
                    this.ValidateProperty("OrganizationID", value);
                    this._organizationID = value;
                    this.RaiseDataMemberChanged("OrganizationID");
                    this.OnOrganizationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RequestUserID' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> RequestUserID
        {
            get
            {
                return this._requestUserID;
            }
            set
            {
                if ((this._requestUserID != value))
                {
                    this.OnRequestUserIDChanging(value);
                    this.RaiseDataMemberChanging("RequestUserID");
                    this.ValidateProperty("RequestUserID", value);
                    this._requestUserID = value;
                    this.RaiseDataMemberChanged("RequestUserID");
                    this.OnRequestUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        public Nullable<byte> Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="User"/> entity.
        /// </summary>
        [Association("User_UserOperation", "UserID", "UserID", IsForeignKey=true)]
        [XmlIgnore()]
        public User User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<User>(this, "User", this.FilterUser);
                }
                return this._user.Entity;
            }
            set
            {
                User previous = this.User;
                if ((previous != value))
                {
                    this.ValidateProperty("User", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.UserOperations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserID = value.UserID;
                    }
                    else
                    {
                        this.UserID = default(Nullable<Guid>);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.UserOperations.Add(this);
                    }
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        private bool FilterUser(User entity)
        {
            return (entity.UserID == this.UserID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._operationID;
        }
    }
    
    /// <summary>
    /// The 'UserOrganization' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class UserOrganization : Entity
    {
        
        private bool _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private byte _memberStatus;
        
        private EntityRef<Organization> _organization;
        
        private Guid _organizationID;
        
        private EntityRef<User> _user;
        
        private Guid _userID;
        
        private Guid _userOrganizationID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeletedChanging(bool value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnMemberStatusChanging(byte value);
        partial void OnMemberStatusChanged();
        partial void OnOrganizationIDChanging(Guid value);
        partial void OnOrganizationIDChanged();
        partial void OnUserIDChanging(Guid value);
        partial void OnUserIDChanged();
        partial void OnUserOrganizationIDChanging(Guid value);
        partial void OnUserOrganizationIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserOrganization"/> class.
        /// </summary>
        public UserOrganization()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public bool Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MemberStatus' value.
        /// </summary>
        [DataMember()]
        public byte MemberStatus
        {
            get
            {
                return this._memberStatus;
            }
            set
            {
                if ((this._memberStatus != value))
                {
                    this.OnMemberStatusChanging(value);
                    this.RaiseDataMemberChanging("MemberStatus");
                    this.ValidateProperty("MemberStatus", value);
                    this._memberStatus = value;
                    this.RaiseDataMemberChanged("MemberStatus");
                    this.OnMemberStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Organization"/> entity.
        /// </summary>
        [Association("Organization_UserOrganization", "OrganizationID", "OrganizationID", IsForeignKey=true)]
        [XmlIgnore()]
        public Organization Organization
        {
            get
            {
                if ((this._organization == null))
                {
                    this._organization = new EntityRef<Organization>(this, "Organization", this.FilterOrganization);
                }
                return this._organization.Entity;
            }
            set
            {
                Organization previous = this.Organization;
                if ((previous != value))
                {
                    this.ValidateProperty("Organization", value);
                    if ((previous != null))
                    {
                        this._organization.Entity = null;
                        previous.UserOrganizations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OrganizationID = value.OrganizationID;
                    }
                    else
                    {
                        this.OrganizationID = default(Guid);
                    }
                    this._organization.Entity = value;
                    if ((value != null))
                    {
                        value.UserOrganizations.Add(this);
                    }
                    this.RaisePropertyChanged("Organization");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid OrganizationID
        {
            get
            {
                return this._organizationID;
            }
            set
            {
                if ((this._organizationID != value))
                {
                    this.OnOrganizationIDChanging(value);
                    this.RaiseDataMemberChanging("OrganizationID");
                    this.ValidateProperty("OrganizationID", value);
                    this._organizationID = value;
                    this.RaiseDataMemberChanged("OrganizationID");
                    this.OnOrganizationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="User"/> entity.
        /// </summary>
        [Association("User_UserOrganization", "UserID", "UserID", IsForeignKey=true)]
        [XmlIgnore()]
        public User User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<User>(this, "User", this.FilterUser);
                }
                return this._user.Entity;
            }
            set
            {
                User previous = this.User;
                if ((previous != value))
                {
                    this.ValidateProperty("User", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.UserOrganizations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserID = value.UserID;
                    }
                    else
                    {
                        this.UserID = default(Guid);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.UserOrganizations.Add(this);
                    }
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserOrganizationID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid UserOrganizationID
        {
            get
            {
                return this._userOrganizationID;
            }
            set
            {
                if ((this._userOrganizationID != value))
                {
                    this.OnUserOrganizationIDChanging(value);
                    this.ValidateProperty("UserOrganizationID", value);
                    this._userOrganizationID = value;
                    this.RaisePropertyChanged("UserOrganizationID");
                    this.OnUserOrganizationIDChanged();
                }
            }
        }
        
        private bool FilterOrganization(Organization entity)
        {
            return (entity.OrganizationID == this.OrganizationID);
        }
        
        private bool FilterUser(User entity)
        {
            return (entity.UserID == this.UserID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._userOrganizationID;
        }
    }
    
    /// <summary>
    /// The 'UserProfileStatisticalsResult' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class UserProfileStatisticalsResult : Entity
    {
        
        private string _statisticalName;
        
        private Nullable<decimal> _statisticalValue;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnStatisticalNameChanging(string value);
        partial void OnStatisticalNameChanged();
        partial void OnStatisticalValueChanging(Nullable<decimal> value);
        partial void OnStatisticalValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserProfileStatisticalsResult"/> class.
        /// </summary>
        public UserProfileStatisticalsResult()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'StatisticalName' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string StatisticalName
        {
            get
            {
                return this._statisticalName;
            }
            set
            {
                if ((this._statisticalName != value))
                {
                    this.OnStatisticalNameChanging(value);
                    this.ValidateProperty("StatisticalName", value);
                    this._statisticalName = value;
                    this.RaisePropertyChanged("StatisticalName");
                    this.OnStatisticalNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StatisticalValue' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> StatisticalValue
        {
            get
            {
                return this._statisticalValue;
            }
            set
            {
                if ((this._statisticalValue != value))
                {
                    this.OnStatisticalValueChanging(value);
                    this.RaiseDataMemberChanging("StatisticalValue");
                    this.ValidateProperty("StatisticalValue", value);
                    this._statisticalValue = value;
                    this.RaiseDataMemberChanged("StatisticalValue");
                    this.OnStatisticalValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._statisticalName;
        }
    }
    
    /// <summary>
    /// The 'UserRole' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eNeg.Data.Web")]
    public sealed partial class UserRole : Entity
    {
        
        private EntityRef<Role> _role;
        
        private Nullable<Guid> _roleID;
        
        private EntityRef<User> _user;
        
        private Nullable<Guid> _userID;
        
        private Guid _userRoleID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnRoleIDChanging(Nullable<Guid> value);
        partial void OnRoleIDChanged();
        partial void OnUserIDChanging(Nullable<Guid> value);
        partial void OnUserIDChanged();
        partial void OnUserRoleIDChanging(Guid value);
        partial void OnUserRoleIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRole"/> class.
        /// </summary>
        public UserRole()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Role"/> entity.
        /// </summary>
        [Association("Role_UserRole", "RoleID", "RoleID", IsForeignKey=true)]
        [XmlIgnore()]
        public Role Role
        {
            get
            {
                if ((this._role == null))
                {
                    this._role = new EntityRef<Role>(this, "Role", this.FilterRole);
                }
                return this._role.Entity;
            }
            set
            {
                Role previous = this.Role;
                if ((previous != value))
                {
                    this.ValidateProperty("Role", value);
                    if ((previous != null))
                    {
                        this._role.Entity = null;
                        previous.UserRole.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RoleID = value.RoleID;
                    }
                    else
                    {
                        this.RoleID = default(Nullable<Guid>);
                    }
                    this._role.Entity = value;
                    if ((value != null))
                    {
                        value.UserRole.Add(this);
                    }
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RoleID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> RoleID
        {
            get
            {
                return this._roleID;
            }
            set
            {
                if ((this._roleID != value))
                {
                    this.OnRoleIDChanging(value);
                    this.RaiseDataMemberChanging("RoleID");
                    this.ValidateProperty("RoleID", value);
                    this._roleID = value;
                    this.RaiseDataMemberChanged("RoleID");
                    this.OnRoleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="User"/> entity.
        /// </summary>
        [Association("User_UserRole", "UserID", "UserID", IsForeignKey=true)]
        [XmlIgnore()]
        public User User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<User>(this, "User", this.FilterUser);
                }
                return this._user.Entity;
            }
            set
            {
                User previous = this.User;
                if ((previous != value))
                {
                    this.ValidateProperty("User", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.UserRole.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserID = value.UserID;
                    }
                    else
                    {
                        this.UserID = default(Nullable<Guid>);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.UserRole.Add(this);
                    }
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserRoleID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid UserRoleID
        {
            get
            {
                return this._userRoleID;
            }
            set
            {
                if ((this._userRoleID != value))
                {
                    this.OnUserRoleIDChanging(value);
                    this.ValidateProperty("UserRoleID", value);
                    this._userRoleID = value;
                    this.RaisePropertyChanged("UserRoleID");
                    this.OnUserRoleIDChanged();
                }
            }
        }
        
        private bool FilterRole(Role entity)
        {
            return (entity.RoleID == this.RoleID);
        }
        
        private bool FilterUser(User entity)
        {
            return (entity.UserID == this.UserID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._userRoleID;
        }
    }
}
