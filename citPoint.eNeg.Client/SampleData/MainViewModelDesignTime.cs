
#region → Usings   .
using citPOINT.eNeg.Common;
using citPOINT.eNeg.ViewModel;
using System.Linq;
using System.Text;
using System;
using System.Collections.Generic;
using citPOINT.eNeg.Data.Web;
using System.Collections.ObjectModel;
using GalaSoft.MvvmLight.Command;
using citPOINT.eNeg.Data;
#endregion

#region → History  .
/* Date           User            Change
 * 
 * @DateTime      M.Wahab        → creation
 * Generated By Eno Generator - Mohamedenew@hotmail.com
 */

# endregion

#region → ToDos    .

/*
 * Date         set by User     Description
 * 
 * 
*/

# endregion

namespace citPOINT.eNeg.Client
{
    /// <summary>
    /// Main View Model Design Time
    /// </summary>
    public class MainViewModelDesignTime
    {
        #region → Fields        .
        private RelayCommand<Guid> mChangeApplicationStatusCommand;
        #endregion

        #region → Properties    .
        /// <summary>
        /// Gets or sets the on going negotiation source.
        /// </summary>
        /// <value>The on going negotiation source.</value>
        public ObservableCollection<Negotiation> OnGoingNegotiationSource { get; set; }

        /// <summary>
        /// Gets or sets the closed negotiation source.
        /// </summary>
        /// <value>The closed negotiation source.</value>
        public ObservableCollection<Negotiation> ClosedNegotiationSource { get; set; }

        /// <summary>
        /// Gets or sets the messages source.
        /// </summary>
        /// <value>The messages source.</value>
        public ObservableCollection<Message> MessagesSource { get; set; }

        /// <summary>
        /// Gets or sets the negotiation application status source.
        /// </summary>
        /// <value>The negotiation application status source.</value>
        public ObservableCollection<NegotiationApplicationStatu> NegotiationApplicationStatusSource { get; set; }

        /// <summary>
        /// Gets or sets all users source.
        /// </summary>
        /// <value>All users source.</value>
        public ObservableCollection<User> AllUsersSource { get; set; }

        /// <summary>
        /// Gets the change application status command.
        /// </summary>
        /// <value>The change application status command.</value>
        public RelayCommand<Guid> ChangeApplicationStatusCommand
        {
            get
            {
                if (mChangeApplicationStatusCommand == null)
                    return new RelayCommand<Guid>((s) => { });

                return mChangeApplicationStatusCommand;
            }
        }

        /// <summary>
        /// Gets or sets the current negotiation.
        /// </summary>
        /// <value>The current negotiation.</value>
        public Negotiation CurrentNegotiation { get; set; }

        /// <summary>
        /// Gets or sets the statistical source.
        /// </summary>
        /// <value>The statistical source.</value>
        public ObservableCollection<UserProfileStatisticalsResult> StatisticalSource { get; set; }

        /// <summary>
        /// Gets or sets the current user.
        /// </summary>
        /// <value>The current user.</value>
        public User CurrentUser { get; set; }


        /// <summary>
        /// Gets or sets the negotiation archive source.
        /// </summary>
        /// <value>The negotiation archive source.</value>
        public List<ArchiveItem> NegotiationArchiveSource { get; set; }

        #endregion

        #region → Constructor   .

        /// <summary>
        /// Initializes a new instance of the <see cref="MainViewModelDesignTime"/> class.
        /// </summary>
        public MainViewModelDesignTime()
        {

            DesignTimeMock designTimeMock = new DesignTimeMock();
            this.OnGoingNegotiationSource = new ObservableCollection<Data.Web.Negotiation>(designTimeMock.NegotiationSource);
            this.ClosedNegotiationSource = new ObservableCollection<Data.Web.Negotiation>(designTimeMock.NegotiationSource.Where(ss => ss.StatusID == eNeg.Common.eNegConstant.NegotiationStatus.Closed));
            this.MessagesSource = new ObservableCollection<Message>(designTimeMock.MessageSource.Take(10));
            this.NegotiationApplicationStatusSource = new ObservableCollection<NegotiationApplicationStatu>(designTimeMock.NegotiationApplicationStatusSource);
            this.AllUsersSource = new ObservableCollection<User>(designTimeMock.UserSource);

            this.CurrentUser = designTimeMock.UserSource.Where(ss => ss.UserID == Guid.Parse("2b9c5797-dd64-4733-add7-0e0f3eab5779")).FirstOrDefault();

            //StatisticalSource=new ObservableCollection<UserProfileStatisticalsResult>(

            List<UserProfileStatisticalsResult> st = new List<UserProfileStatisticalsResult>() { };
            st.Add(new UserProfileStatisticalsResult() { StatisticalName = "Negotiation", StatisticalValue = 11 });
            st.Add(new UserProfileStatisticalsResult() { StatisticalName = "Conversation", StatisticalValue = 30 });
            st.Add(new UserProfileStatisticalsResult() { StatisticalName = "Apps.Avg", StatisticalValue = 5 });
            StatisticalSource = new ObservableCollection<UserProfileStatisticalsResult>(st);


            this.NegotiationArchiveSource = new List<ArchiveItem>();

            this.NegotiationArchiveSource.Add(new ArchiveItem()
            {
                ArchiveItemType = ArchiveItemTypes.Year,
                Name = "2012",
                Value = "2012"
            });

            this.NegotiationArchiveSource.Add(new ArchiveItem()
            {
                ArchiveItemType = ArchiveItemTypes.Year,
                Name = "2011",
                Value = "2011"
            });

            this.NegotiationArchiveSource.Add(new ArchiveItem()
            {
                ArchiveItemType = ArchiveItemTypes.Year,
                Name = "2010",
                Value = "2010"
            });


            this.CurrentNegotiation = designTimeMock
                                       .NegotiationSource
                                       .FirstOrDefault(s => s.NegotiationID == Guid.Parse("06cabcba-d6af-4f38-a11d-e50f0f0587e4"));
        }

        #endregion
    }
}

